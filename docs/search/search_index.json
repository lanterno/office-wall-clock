{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Wall Clock In Machine","text":"<ul> <li> <p> 2 Seconds Per Day</p> <p>Press button when you arrive. Press when you leave. That's it!</p> <p>Save 2.6 hours per year + eliminate context switching.</p> </li> <li> <p> Under $35</p> <p>Complete bill of materials with shopping links.</p> <p>All components available on Amazon or AliExpress.</p> </li> <li> <p> 10-14 Days Battery</p> <p>Charge once every two weeks via USB-C.</p> <p>Deep sleep mode when idle saves power.</p> </li> <li> <p> WiFi Connected</p> <p>Automatically syncs with your timer API.</p> <p>Works with any HTTP/HTTPS backend.</p> </li> <li> <p> Visual Feedback</p> <p>Status LED shows current state.</p> <p>Energy meter shows hours remaining (like a thermal meter! \ud83c\udf21\ufe0f)</p> </li> <li> <p> 100% Open Source</p> <p>Complete schematics, firmware, and documentation.</p> <p>Modify and customize as you like!</p> </li> </ul>"},{"location":"#automatic-time-tracking-device","title":"\u26a1 Automatic Time Tracking Device","text":"<p>A physical desk device that tracks your office time with a single button press</p>"},{"location":"#the-problem","title":"The Problem","text":"<p>Every day when you go to the office, you have to:</p> <ol> <li>Open your terminal</li> <li>Type a curl command to start your timer</li> <li>Do the same when you leave</li> </ol> <p>This takes 15 seconds, twice a day. It interrupts your workflow and is easy to forget.</p>"},{"location":"#the-solution","title":"The Solution","text":"<p>A physical device on your desk with one button:</p> <ul> <li>Toggle down when you arrive \u2192 Device automatically calls your API</li> <li>Toggle up when you leave \u2192 Logs your time</li> <li>LED feedback shows status and remaining hours</li> <li>Battery powered - lasts weeks between charges</li> </ul> <p>Annual Time Savings</p> <p>2.6 hours saved + no more context switching + never forget to log time!</p>"},{"location":"#features","title":"Features","text":""},{"location":"#hardware","title":"Hardware","text":"<ul> <li> ESP32-C3 microcontroller (WiFi, low power, USB-C)</li> <li> 8 RGB LEDs (1 status + 7 energy meter)</li> <li> Toggle switch (satisfying tactile feedback)</li> <li> 2000mAh battery (10-14 days runtime)</li> <li> USB-C charging</li> <li> Compact size (100\u00d760\u00d735mm - fits any desk)</li> </ul>"},{"location":"#firmware","title":"Firmware","text":"<ul> <li> WiFi connectivity with auto-reconnect</li> <li> Web-based configuration portal</li> <li> HTTPS API integration</li> <li> Deep sleep mode (5\u00b5A idle)</li> <li> OTA firmware updates</li> <li> Battery level monitoring</li> <li> Error handling &amp; retry logic</li> </ul>"},{"location":"#design","title":"Design","text":"<ul> <li> Professional appearance</li> <li> 3D printable enclosure</li> <li> Documented assembly process</li> <li> Beginner-friendly guides</li> <li> Comprehensive troubleshooting</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<ul> <li> <p> 1. Order Components</p> <p>Review the Bill of Materials and order parts (~$35 total).</p> <p>Delivery: 1-4 weeks depending on source.</p> </li> <li> <p> 2. Build Device</p> <p>Follow the Assembly Guide to build your device (2-3 hours).</p> <p>No advanced skills required!</p> </li> <li> <p> 3. Flash Firmware</p> <p>Upload firmware to ESP32-C3 using the Installation Guide.</p> <p>Takes about 30 minutes.</p> </li> <li> <p> 4. Configure</p> <p>Set up WiFi and API endpoint using the Configuration Guide.</p> <p>Quick 15-minute setup.</p> </li> <li> <p> 5. Enjoy!</p> <p>Start using your device daily with the Usage Guide.</p> <p>Never type curl commands again! \ud83c\udf89</p> </li> </ul>"},{"location":"#project-stats","title":"Project Stats","text":"Metric Value Total Cost ~$35 USD Build Time 2-3 hours Battery Life 10-14 days Lifespan 5+ years Weight ~120 grams Skill Level Beginner-Intermediate"},{"location":"#tech-stack","title":"Tech Stack","text":"Hardware ESP32-C3 microcontroller, WS2812B LEDs, LiPo battery, TP4056 charger Firmware Rust (esp-idf framework), smart-leds, esp-idf-svc, serde Connectivity WiFi 802.11 b/g/n, HTTPS, OTA updates Power 3.7V 2000mAh LiPo, USB-C charging, deep sleep mode Enclosure 3D printed PLA/PETG or project box"},{"location":"#why-build-this","title":"Why Build This?","text":"<p>Time Saved</p> <p>Current process: Open terminal, type curl command (~15 seconds \u00d7 2 times/day)</p> <p>New process: Press button (~2 seconds \u00d7 2 times/day)</p> <p>Daily savings: 26 seconds</p> <p>Annual savings: ~2.6 hours + no context switching!</p> <p>Beyond time savings:</p> <ul> <li>\u2705 Tactile satisfaction - Physical buttons feel good!</li> <li>\u2705 Never forget - Button on your desk is impossible to miss</li> <li>\u2705 Visual feedback - LED energy meter is motivating</li> <li>\u2705 Learn IoT - Great project to learn hardware + firmware</li> <li>\u2705 Customizable - Open source, modify as you like</li> <li>\u2705 Show off - Cool desk accessory that actually works!</li> </ul>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<p>This documentation is organized into clear sections:</p> <p>Getting Started - Project overview and quick start guide</p> <p>Hardware - Component selection, specifications, and BOM</p> <p>Firmware - Architecture, installation, and configuration</p> <p>Assembly - Step-by-step build instructions</p> <p>Usage - Daily operation and maintenance</p>"},{"location":"#community","title":"Community","text":"<p>Get Involved</p> <ul> <li>Star the repo \u2b50 on GitHub</li> <li>Share your build - Post photos with #WallClockInMachine</li> <li>Report issues - Help improve the project</li> <li>Contribute - Submit PRs with improvements</li> <li>Spread the word - Tell your friends who hate typing curl commands!</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is open source and available under the MIT License.</p>"},{"location":"#ready-to-build","title":"Ready to Build?","text":"<p>Get Started Now View on GitHub</p>"},{"location":"assembly/breadboard/","title":"Breadboard Prototype","text":"<p>Assemble a no-solder prototype to validate wiring and firmware.</p>"},{"location":"assembly/breadboard/#connections","title":"Connections","text":"<ul> <li>ESP32 3.3V \u2192 LED +5V (if using 5V level, prefer external 5V)</li> <li>ESP32 GND \u2192 LED GND</li> <li>GPIO2 \u2192 LED DIN via 330\u03a9 resistor</li> <li>GPIO9 \u2192 Button (to GND); enable internal pull-up</li> </ul>"},{"location":"assembly/breadboard/#steps","title":"Steps","text":"<ol> <li>Place ESP32 and LED strip on breadboard</li> <li>Wire power rails; add 1000\u00b5F cap across LED 5V/GND</li> <li>Connect data line with 330\u03a9 series resistor</li> <li>Wire button to GPIO9 and GND</li> <li>Flash test firmware</li> </ol>"},{"location":"assembly/breadboard/#verification","title":"Verification","text":"<ul> <li>Toggle button: state changes in Serial Monitor</li> <li>LEDs animate as expected</li> <li>No flicker/brownouts during animations</li> </ul> <p>Next: Soldering</p>"},{"location":"assembly/enclosure/","title":"Enclosure Assembly","text":"<p>Install electronics into the enclosure safely and neatly.</p>"},{"location":"assembly/enclosure/#hardware","title":"Hardware","text":"<ul> <li>4x M3x6 screws</li> <li>4x M3 standoffs (8\u201312 mm)</li> <li>Velcro strap for battery</li> <li>Acrylic diffuser + adhesive</li> </ul>"},{"location":"assembly/enclosure/#steps","title":"Steps","text":"<ol> <li>Mount ESP32 board on standoffs</li> <li>Install LED strip and place diffuser</li> <li>Route cables; test LEDs and button</li> <li>Install panel button and tighten nut</li> <li>Secure battery with Velcro and strap</li> <li>Close case and fasten screws</li> </ol>"},{"location":"assembly/enclosure/#cable-management","title":"Cable Management","text":"<ul> <li>Keep data line short; avoid sharp bends</li> <li>Use zip ties or adhesive tie mounts</li> <li>Leave service loop for lid removal</li> </ul>"},{"location":"assembly/enclosure/#final-checks","title":"Final Checks","text":"<ul> <li>Button actuates freely without rubbing</li> <li>USB-C port accessible</li> <li>No rattling inside when shaken gently</li> </ul> <p>Next: Final Testing</p>"},{"location":"assembly/final-testing/","title":"Final Testing","text":"<p>Checklist to validate a finished device.</p>"},{"location":"assembly/final-testing/#functional","title":"Functional","text":"<ul> <li>Button toggles states reliably (10 cycles)</li> <li>Status LED reflects state transitions</li> <li>Energy meter increments each hour (simulate fast mode if available)</li> <li>WiFi connects and API calls succeed</li> </ul>"},{"location":"assembly/final-testing/#power","title":"Power","text":"<ul> <li>Battery charges from 20% to 100% without overheating</li> <li>No brownouts during peak LED animation</li> <li>Idle current low in standby</li> </ul>"},{"location":"assembly/final-testing/#mechanical","title":"Mechanical","text":"<ul> <li>Enclosure closes flush with no pinched wires</li> <li>Button feels crisp; LEDs evenly diffused</li> <li>USB-C cable fits without strain</li> </ul>"},{"location":"assembly/final-testing/#firmware","title":"Firmware","text":"<ul> <li>Configuration saved across reboots</li> <li>Time sync works; timestamps correct</li> <li>Logs are clean (no repeated errors)</li> </ul> <p>If any item fails, check the component specifications and wiring connections.</p>"},{"location":"assembly/preparation/","title":"Preparation","text":"<p>Before soldering or assembly, prepare tools, parts, and workspace.</p>"},{"location":"assembly/preparation/#tools","title":"Tools","text":"<ul> <li>Soldering iron + stand + wet sponge</li> <li>Lead-free solder (0.5\u20130.8 mm)</li> <li>Wire cutters / strippers</li> <li>Tweezers</li> <li>Multimeter</li> <li>Heat-shrink tubing + heat gun</li> <li>Screwdrivers (PH0/PH1)</li> </ul>"},{"location":"assembly/preparation/#parts-checklist","title":"Parts Checklist","text":"<ul> <li>ESP32-C3 DevKit</li> <li>WS2812B LED strip (8 px)</li> <li>Panel-mount button (latching)</li> <li>LiPo 3.7V 2000 mAh</li> <li>TP4056 USB-C charger</li> <li>3.3V regulator (if board needs)</li> <li>Wires, headers, JST-PH connectors</li> <li>Enclosure (printed or purchased)</li> </ul>"},{"location":"assembly/preparation/#workspace","title":"Workspace","text":"<ul> <li>Ventilated area (or fume extractor)</li> <li>Non-conductive mat</li> <li>Good lighting</li> <li>Safety glasses</li> </ul>"},{"location":"assembly/preparation/#pre-flight-tests","title":"Pre-flight Tests","text":"<ol> <li>Power ESP32 via USB; upload blink sketch</li> <li>Test single LED pixel on strip</li> <li>Check button continuity with multimeter</li> </ol>"},{"location":"assembly/preparation/#tips","title":"Tips","text":"<ul> <li>Cut wires to final length after routing test</li> <li>Tin both pads and wires for quick, clean joints</li> <li>Use strain relief and heat-shrink on moving cables</li> </ul> <p>Next: Component Testing</p>"},{"location":"assembly/soldering/","title":"Soldering Guide","text":"<p>Learn how to solder all components for the Wall Clock In Machine. This guide is beginner-friendly with detailed photos and tips.</p> <p>Safety First</p> <ul> <li>Work in a well-ventilated area (solder fumes)</li> <li>Use safety glasses</li> <li>Don't touch the iron tip (350\u00b0C!)</li> <li>Wash hands after soldering</li> <li>Keep iron stand stable</li> </ul>"},{"location":"assembly/soldering/#before-you-start","title":"Before You Start","text":""},{"location":"assembly/soldering/#tools-youll-need","title":"Tools You'll Need","text":"Tool Purpose Price (CHF) Where to Get Soldering Iron Join connections 20-80 Digitec, Conrad Solder 60/40 tin/lead, 0.8mm 5-10 Conrad, Brack Wire Strippers Strip insulation 10-15 Jumbo, Brico+Loisirs Flush Cutters Cut wires/leads 8-12 Conrad Multimeter Test connections 15-30 Digitec Helping Hands Hold components 10-15 Digitec Solder Wick Remove mistakes 3-5 Conrad Flux Pen Improve flow 5-8 Conrad <p>Budget: CHF 80-100 (reusable for all future projects!)</p> <p>Lausanne Tip: Visit FabLab EPFL - they have all tools available for free (with EPFL access) or small membership fee.</p>"},{"location":"assembly/soldering/#materials-needed","title":"Materials Needed","text":"<p>From your Bill of Materials:</p> <ul> <li> ESP32-C3 DevKit</li> <li> WS2812B LED Strip (8 LEDs)</li> <li> SPDT Toggle Switch</li> <li> 2000mAh LiPo Battery</li> <li> TP4056 Charger Module</li> <li> AMS1117 Regulator Module</li> <li> 330\u03a9 Resistor (optional)</li> <li> 1000\u00b5F Capacitor (optional)</li> <li> Hookup wire (22-26 AWG)</li> <li> JST connectors (optional)</li> <li> Heat shrink tubing</li> </ul>"},{"location":"assembly/soldering/#soldering-iron-setup","title":"Soldering Iron Setup","text":"<p>Temperature Settings:</p> Material Temperature Notes 60/40 Solder 350\u00b0C (662\u00b0F) Standard Lead-free Solder 380\u00b0C (716\u00b0F) EU compliant Heat Shrink 100\u00b0C (212\u00b0F) Use heat gun <p>Recommended: Start at 350\u00b0C and adjust if needed.</p> <p>Tip Selection: - Chisel tip (recommended) - Versatile, good heat transfer - Conical tip - Precise, small joints - Bevel tip - Large pads</p>"},{"location":"assembly/soldering/#soldering-basics","title":"Soldering Basics","text":""},{"location":"assembly/soldering/#the-perfect-solder-joint","title":"The Perfect Solder Joint","text":"<p>A good solder joint looks like this:</p> <pre><code>Side View:\n        Shiny, smooth cone\n             \u2571\u2572\nComponent \u2500\u2500\u25cf  \u25cf\u2500\u2500 PCB pad\n           \u2571    \u2572\n</code></pre> <p>Good Joint: - \u2705 Shiny, smooth surface - \u2705 Cone/volcano shape - \u2705 Flows onto both pad and lead - \u2705 Concave fillet around lead</p> <p>Bad Joints: - \u274c Cold joint: Dull, grainy (reheat) - \u274c Too much solder: Blob, bridges - \u274c Too little solder: Doesn't fill joint - \u274c Burnt flux: Black, overheated</p>"},{"location":"assembly/soldering/#the-5-second-technique","title":"The 5-Second Technique","text":"<p>Perfect solder joints in 5 steps:</p> <pre><code>1. CLEAN (1 sec)\n   Wipe tip on damp sponge\n\n2. HEAT (2 sec)\n   Touch iron to pad AND lead\n\n3. FEED (1 sec)\n   Touch solder to joint (not iron!)\n   Solder flows into joint\n\n4. REMOVE (1 sec)\n   Remove solder, then iron\n\n5. COOL (3 sec)\n   Don't move! Let solidify\n</code></pre> <p>Total time: 5 seconds of heat</p> <p>Why this works: - Short heat time prevents damage - Solder flows to hot surfaces - Clean tip improves heat transfer - Proper order creates strong joint</p>"},{"location":"assembly/soldering/#common-mistakes","title":"Common Mistakes","text":"Problem Cause Solution Solder won't stick Dirty/oxidized Clean with flux Solder balls up Too hot or dirty Lower temp, clean tip Components move Moved while cooling Use helping hands Burnt smell Too hot Lower temperature Solder bridges Too much solder Use solder wick"},{"location":"assembly/soldering/#step-by-step-assembly","title":"Step-by-Step Assembly","text":""},{"location":"assembly/soldering/#step-1-prepare-components","title":"Step 1: Prepare Components","text":"<p>Cut wires to length:</p> Connection Length Color Battery \u2192 TP4056 5cm Red/Black TP4056 \u2192 AMS1117 8cm Red/Black AMS1117 \u2192 ESP32 10cm Red/Black ESP32 \u2192 LEDs 15cm Red/Black/White ESP32 \u2192 Switch 12cm Black/White <p>Strip wires: - Strip 3-5mm from each end - Twist strands together - Tin with small amount of solder</p> <p>Organize workspace: <pre><code>Layout (looking down at desk):\n\n[Helping Hands]  [Component Box]\n\n[Soldering Iron] [Work Area]     [Multimeter]\n     \u2193\n  [Stand]        [Sponge]        [Solder/Flux]\n</code></pre></p>"},{"location":"assembly/soldering/#step-2-solder-power-system","title":"Step 2: Solder Power System","text":"<p>Objective: Connect Battery \u2192 Charger \u2192 Regulator \u2192 ESP32</p>"},{"location":"assembly/soldering/#21-battery-to-tp4056-charger","title":"2.1 Battery to TP4056 Charger","text":"<p>Battery Safety</p> <ul> <li>Never short battery wires!</li> <li>Work with one wire at a time</li> <li>Cover exposed wire with heat shrink immediately</li> <li>If using battery with connector, DON'T solder - use connector!</li> </ul> <p>If battery has JST connector (recommended): - \u2705 Skip soldering, plug directly into TP4056 - TP4056 modules usually have JST socket</p> <p>If battery has bare wires:</p> <ol> <li> <p>Red wire (Battery +):    <pre><code>a. Slide heat shrink onto wire\nb. Tin wire end (small amount of solder)\nc. Tin TP4056 BAT+ pad\nd. Heat both, solder flows together\ne. Remove heat, let cool 5 seconds\nf. Slide heat shrink over joint, apply heat gun\n</code></pre></p> </li> <li> <p>Black wire (Battery -):    <pre><code>Same process for BAT- pad\n\u26a0\ufe0f Don't let red and black wires touch!\n</code></pre></p> </li> <li> <p>Test:    <pre><code>Multimeter \u2192 DC Voltage mode\nRed probe \u2192 BAT+ pad\nBlack probe \u2192 BAT- pad\nReading: 3.7-4.2V \u2713\n</code></pre></p> </li> </ol> <p>Diagram: <pre><code>Battery (JST connector)\n  \u2193\n  Red (+) \u2500\u2500\u2192 TP4056 [BAT+]\n  Black (-) \u2500\u2500\u2192 TP4056 [BAT-]\n</code></pre></p>"},{"location":"assembly/soldering/#22-tp4056-to-ams1117-regulator","title":"2.2 TP4056 to AMS1117 Regulator","text":"<p>Connection: - TP4056 OUT+ \u2192 AMS1117 VIN - TP4056 OUT- \u2192 AMS1117 GND</p> <p>Steps:</p> <ol> <li>Cut two 8cm wires (red, black)</li> <li>Strip and tin all ends</li> <li>Solder red to TP4056 OUT+ pad</li> <li>Solder red to AMS1117 VIN pad</li> <li>Solder black to TP4056 OUT-/GND</li> <li>Solder black to AMS1117 GND</li> <li>Add heat shrink to all joints</li> </ol> <p>Diagram: <pre><code>TP4056         AMS1117\n[OUT+] \u2500\u2500Red\u2500\u2500\u2192 [VIN]\n[OUT-] \u2500\u2500Blk\u2500\u2500\u2192 [GND]\n</code></pre></p>"},{"location":"assembly/soldering/#23-ams1117-to-esp32-c3","title":"2.3 AMS1117 to ESP32-C3","text":"<p>Connection: - AMS1117 VOUT \u2192 ESP32 3V3 pin - AMS1117 GND \u2192 ESP32 GND pin</p> <p>Steps:</p> <ol> <li>Cut two 10cm wires (red, black)</li> <li>Strip and tin</li> <li>Solder to AMS1117 VOUT and GND</li> <li>Don't solder to ESP32 yet - we'll do this later</li> </ol> <p>Diagram: <pre><code>AMS1117        ESP32-C3\n[VOUT] \u2500\u2500Red\u2500\u2500\u2192 [3V3]  \u2190 Later\n[GND]  \u2500\u2500Blk\u2500\u2500\u2192 [GND]  \u2190 Later\n</code></pre></p> <p>Test Power Chain: <pre><code>1. Plug USB-C into TP4056\n2. Multimeter: Check AMS1117 VOUT\n   Should read: 3.3V \u00b1 0.1V\n3. If correct: \u2713 Power system works!\n4. If not: Check all connections with multimeter continuity\n</code></pre></p>"},{"location":"assembly/soldering/#step-3-solder-toggle-switch","title":"Step 3: Solder Toggle Switch","text":"<p>Objective: Connect switch to ESP32 GPIO2</p>"},{"location":"assembly/soldering/#31-identify-switch-terminals","title":"3.1 Identify Switch Terminals","text":"<p>SPDT switch has 3 terminals:</p> <pre><code>     [COM] \u2190 Common (middle terminal)\n       \u2193\n   \u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\n  \u2502    \u25cf    \u2502\n  \u2502  \u2571   \u2572  \u2502\n  \u2502 \u25cf     \u25cf \u2502\n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n    \u2191     \u2191\n   [NC]  [NO]\n    \u2191     \u2191\n  Not   Normally\n  Used   Open\n</code></pre> <p>Our wiring: - COM \u2192 ESP32 GPIO2 - NO \u2192 GND - NC \u2192 Not connected</p>"},{"location":"assembly/soldering/#32-solder-wires","title":"3.2 Solder Wires","text":"<ol> <li> <p>COM terminal:    <pre><code>- Cut 12cm white/yellow wire\n- Strip and tin\n- Solder to COM terminal\n- Add heat shrink\n</code></pre></p> </li> <li> <p>NO terminal:    <pre><code>- Cut 12cm black wire  \n- Strip and tin\n- Solder to NO terminal\n- Add heat shrink\n</code></pre></p> </li> <li> <p>Test:    <pre><code>Multimeter \u2192 Continuity mode\n- Switch UP: COM-NO should beep \u2713\n- Switch DOWN: COM-NO no beep \u2713\n</code></pre></p> </li> </ol> <p>Diagram: <pre><code>Switch         ESP32-C3\n[COM] \u2500\u2500Wht\u2500\u2500\u2192 [GPIO2]  \u2190 Later\n[NO]  \u2500\u2500Blk\u2500\u2500\u2192 [GND]    \u2190 Later\n[NC]  (empty)\n</code></pre></p>"},{"location":"assembly/soldering/#step-4-prepare-led-strip","title":"Step 4: Prepare LED Strip","text":"<p>Objective: Prepare 8 LEDs for connection</p>"},{"location":"assembly/soldering/#41-cut-led-strip","title":"4.1 Cut LED Strip","text":"<p>If you bought a 1-meter strip (60 LEDs):</p> <ol> <li> <p>Locate cut marks:    <pre><code>LED strip has copper pads every 3 LEDs:\n\n[LED][LED][LED] \u2702\ufe0f [LED][LED][LED] \u2702\ufe0f\n     \u2191\n  Cut here (copper pad)\n</code></pre></p> </li> <li> <p>Cut after 8<sup>th</sup> LED:</p> </li> <li>Use flush cutters</li> <li>Cut through middle of copper pad</li> <li> <p>Leave copper on both sides</p> </li> <li> <p>Identify connections:    <pre><code>First LED (input end):\n[+5V] [DIN] [GND]\n  \u2191     \u2191     \u2191\n Red  White  Black\n\nLast LED (output end):\n[+5V] [DOUT] [GND]  \u2190 Not used\n</code></pre></p> </li> </ol>"},{"location":"assembly/soldering/#42-solder-led-wires","title":"4.2 Solder LED Wires","text":"<p>Input end (where data enters):</p> <ol> <li> <p>Power wire (+5V):    <pre><code>- Cut 15cm RED wire\n- Strip 3mm, tin\n- Solder to +5V pad\n- Add heat shrink\n</code></pre></p> </li> <li> <p>Data wire (DIN):    <pre><code>- Cut 15cm WHITE/YELLOW wire\n- Strip 3mm, tin\n- Solder to DIN pad\n- Add heat shrink\n</code></pre></p> </li> <li> <p>Ground wire (GND):    <pre><code>- Cut 15cm BLACK wire\n- Strip 3mm, tin\n- Solder to GND pad\n- Add heat shrink\n</code></pre></p> </li> </ol> <p>Optional: Add capacitor (smooths power):</p> <p>If you have a 1000\u00b5F capacitor: <pre><code>- Solder capacitor between LED +5V and GND\n- Orientation matters! Negative stripe \u2192 GND\n- Helps prevent LED flickering\n</code></pre></p> <p>Optional: Add resistor (protects data line):</p> <p>If you have a 330\u03a9 resistor: <pre><code>- Solder resistor in series with DIN wire\n- Prevents data line damage\n- Not critical for 8 LEDs\n</code></pre></p> <p>Diagram: <pre><code>LED Strip (input)    ESP32-C3\n[+5V] \u2500\u2500Red\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192 [5V or 3.3V]  \u2190 Later\n[DIN] \u2500\u2500Wht\u2500[330\u03a9]\u2500\u2500\u2192 [GPIO3]       \u2190 Later\n[GND] \u2500\u2500Blk\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192 [GND]         \u2190 Later\n              \u2191\n         Optional resistor\n\n     [1000\u00b5F]  \u2190 Optional capacitor\n        \u2193\n      [GND]\n</code></pre></p>"},{"location":"assembly/soldering/#step-5-assemble-on-esp32-c3","title":"Step 5: Assemble on ESP32-C3","text":"<p>Objective: Connect everything to ESP32</p>"},{"location":"assembly/soldering/#51-esp32-c3-pinout-reference","title":"5.1 ESP32-C3 Pinout Reference","text":"<pre><code>ESP32-C3-DevKitM-1 (Top View)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  \u25cb USB-C Port          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 3V3  \u25cf\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25cf GND   \u2502 \u2190 Power\n\u2502 EN   \u25cf         \u25cf GPIO18\u2502\n\u2502 G04  \u25cf         \u25cf GPIO19\u2502\n\u2502 G05  \u25cf         \u25cf GPIO10\u2502\n\u2502 G06  \u25cf         \u25cf GPIO09\u2502 \u2190 USB D-\n\u2502 G07  \u25cf         \u25cf GPIO08\u2502 \u2190 USB D+\n\u2502 G21  \u25cf         \u25cf GPIO07\u2502\n\u2502 G20  \u25cf         \u25cf GPIO06\u2502\n\u2502 G10  \u25cf         \u25cf GPIO05\u2502\n\u2502 G03  \u25cf         \u25cf GPIO04\u2502 \u2190 LED Data\n\u2502 G02  \u25cf         \u25cf GPIO03\u2502 \u2190 Button\n\u2502 G01  \u25cf         \u25cf GPIO02\u2502\n\u2502 G00  \u25cf         \u25cf GPIO01\u2502\n\u2502 GND  \u25cf\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25cf 5V    \u2502 \u2190 Power (USB only)\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"assembly/soldering/#52-solder-power-wires","title":"5.2 Solder Power Wires","text":"<ol> <li> <p>3.3V Power (from AMS1117):    <pre><code>- Take red wire from AMS1117\n- Solder to ESP32 3V3 pin\n- This powers the ESP32\n</code></pre></p> </li> <li> <p>Ground (from AMS1117):    <pre><code>- Take black wire from AMS1117\n- Solder to ESP32 GND pin (left side)\n- Common ground for everything\n</code></pre></p> </li> </ol> <p>Alternative: USB Power</p> <p>If testing without battery: - Power ESP32 via USB-C port - No need to connect 3V3 from regulator yet</p>"},{"location":"assembly/soldering/#53-solder-switch-wires","title":"5.3 Solder Switch Wires","text":"<ol> <li> <p>Switch COM \u2192 GPIO2:    <pre><code>- Take white wire from switch COM\n- Solder to ESP32 GPIO2 pin\n- This is the input pin\n</code></pre></p> </li> <li> <p>Switch NO \u2192 GND:    <pre><code>- Take black wire from switch NO\n- Solder to ESP32 GND pin (right side)\n- Can share GND with power GND\n</code></pre></p> </li> </ol> <p>Enable internal pull-up (in firmware): <pre><code>pinMode(GPIO_NUM_2, INPUT_PULLUP);\n// Now GPIO2 reads HIGH when switch open\n//           reads LOW when switch closed\n</code></pre></p>"},{"location":"assembly/soldering/#54-solder-led-wires","title":"5.4 Solder LED Wires","text":"<ol> <li> <p>LED Data \u2192 GPIO3:    <pre><code>- Take white wire from LED DIN\n- Solder to ESP32 GPIO3 pin\n- Critical: Data signal must be clean\n</code></pre></p> </li> <li> <p>LED Power \u2192 5V:    <pre><code>- Take red wire from LED +5V\n- Option A: Solder to ESP32 5V pin (only works when USB connected!)\n- Option B: Connect to battery voltage (3.7V, LEDs dimmer)\n- Recommended: Use 5V pin, ensure USB connected\n</code></pre></p> </li> <li> <p>LED Ground \u2192 GND:    <pre><code>- Take black wire from LED GND\n- Solder to ESP32 GND pin\n- Share with other grounds\n</code></pre></p> </li> </ol> <p>LED Power Consideration</p> <ul> <li>5V option: LEDs full brightness, but only works with USB</li> <li>3.7V option: LEDs dimmer, works on battery</li> <li>Best: Use 5V and keep device plugged in, or use boost converter for 5V from battery</li> </ul>"},{"location":"assembly/soldering/#step-6-final-assembly","title":"Step 6: Final Assembly","text":""},{"location":"assembly/soldering/#61-check-all-connections","title":"6.1 Check All Connections","text":"<p>Use multimeter continuity mode:</p> Test Expected Result Battery + to AMS1117 VIN Beep \u2713 AMS1117 VOUT to ESP32 3V3 Beep \u2713 All GNDs together Beep \u2713 Switch COM to GPIO2 Beep \u2713 LED DIN to GPIO3 Beep \u2713 Battery + to GND NO beep \u2713 (no short!)"},{"location":"assembly/soldering/#62-visual-inspection","title":"6.2 Visual Inspection","text":"<p>Check each solder joint:</p> <ul> <li> Shiny, smooth surface</li> <li> No solder bridges between adjacent pins</li> <li> Wires secure (gentle tug test)</li> <li> Heat shrink covering all exposed metal</li> <li> No loose strands of wire</li> </ul>"},{"location":"assembly/soldering/#63-first-power-on-test","title":"6.3 First Power-On Test","text":"<p>Before uploading firmware:</p> <ol> <li>Connect USB-C to TP4056:</li> <li>Charger red LED should light (charging)</li> <li> <p>After 2-3 hours, blue/green LED (charged)</p> </li> <li> <p>Disconnect USB, wait 10 seconds</p> </li> <li> <p>Check voltages:    <pre><code>Multimeter DC voltage mode:\n\nBattery:  3.7-4.2V \u2713\nAMS1117:  3.3V \u00b10.1V \u2713\nESP32:    Should not be powered yet (no firmware)\n</code></pre></p> </li> </ol> <p>If voltages wrong: - Check connections with continuity mode - Look for cold solder joints (dull appearance) - Reflow suspicious joints</p>"},{"location":"assembly/soldering/#desoldering-fixing-mistakes","title":"Desoldering (Fixing Mistakes)","text":""},{"location":"assembly/soldering/#method-1-solder-wick","title":"Method 1: Solder Wick","text":"<ol> <li>Place copper braid over joint</li> <li>Press hot iron on top</li> <li>Solder wicks into braid</li> <li>Remove braid and iron together</li> </ol>"},{"location":"assembly/soldering/#method-2-solder-sucker","title":"Method 2: Solder Sucker","text":"<ol> <li>Melt solder joint</li> <li>Place sucker nozzle next to joint</li> <li>Press button - vacuum sucks solder</li> <li>Repeat if needed</li> </ol>"},{"location":"assembly/soldering/#method-3-add-more-solder","title":"Method 3: Add More Solder","text":"<p>Counterintuitive but works:</p> <ol> <li>Add fresh solder to joint</li> <li>Helps heat flow</li> <li>Remove with wick/sucker</li> <li>Cleaner than trying to desolder dry joint</li> </ol>"},{"location":"assembly/soldering/#soldering-tips-tricks","title":"Soldering Tips &amp; Tricks","text":""},{"location":"assembly/soldering/#for-beginners","title":"For Beginners","text":"<p>Practice first: - Buy practice PCB kit (CHF 5) - Or practice on old electronics - Master technique before your project</p> <p>Go slow: - Rush = mistakes - Each joint takes 5 seconds - Take breaks every 15 minutes</p> <p>Good lighting: - Use desk lamp - Magnifying glass helps - See what you're doing!</p>"},{"location":"assembly/soldering/#temperature-troubleshooting","title":"Temperature Troubleshooting","text":"Problem Too Cold Just Right Too Hot Solder flow Slow, lumpy Smooth, fast Too fast Joint appearance Dull, grainy Shiny, smooth Burnt, black Flux Doesn't activate Active, clean Burnt, smoking Components Lifted pads No damage Burnt, delaminated <p>Solution: - Too cold: Increase 10\u00b0C - Too hot: Decrease 20\u00b0C - Find sweet spot: Smooth flow, no burning</p>"},{"location":"assembly/soldering/#wire-management","title":"Wire Management","text":"<p>Color coding: - \ud83d\udd34 Red: Positive voltage - \u26ab Black: Ground - \ud83d\udfe1 Yellow/White: Signals - \ud83d\udd35 Blue: Optional/special</p> <p>Cable ties: - Group related wires - Prevents tangles - Looks professional</p> <p>Strain relief: - Add hot glue at solder joints - Prevents wire breakage - Especially for moving parts</p>"},{"location":"assembly/soldering/#testing-validation","title":"Testing &amp; Validation","text":""},{"location":"assembly/soldering/#continuity-tests","title":"Continuity Tests","text":"<p>What to test: <pre><code>\u2713 Power path: Battery \u2192 Regulator \u2192 ESP32\n\u2713 Ground continuity: All GND pins connected\n\u2713 Button circuit: Switch COM \u2192 GPIO2\n\u2713 LED circuit: ESP32 GPIO3 \u2192 LED DIN\n\u2717 NO shorts: Power to GND should NOT beep\n</code></pre></p>"},{"location":"assembly/soldering/#voltage-tests","title":"Voltage Tests","text":"<p>Expected readings: <pre><code>Battery:        3.7-4.2V\nRegulator IN:   3.7-4.2V (same as battery)\nRegulator OUT:  3.3V \u00b10.1V\nESP32 3V3 pin:  3.3V \u00b10.1V\nLED +5V:        5.0V (USB) or 3.7V (battery)\n</code></pre></p>"},{"location":"assembly/soldering/#resistance-tests","title":"Resistance Tests","text":"<p>Power off, check: <pre><code>Battery + to GND:    &gt;1M\u03a9 (no short)\nESP32 3V3 to GND:    &gt;10k\u03a9 (normal)\nGPIO2 to GND:        &gt;10k\u03a9 (pull-up enabled in firmware)\n</code></pre></p>"},{"location":"assembly/soldering/#common-issues","title":"Common Issues","text":""},{"location":"assembly/soldering/#solder-wont-stick","title":"Solder Won't Stick","text":"<p>Causes: - Oxidized components - Dirty soldering iron tip - Temperature too low - No flux</p> <p>Solutions: 1. Clean tip on damp sponge 2. Apply flux pen to joint 3. Increase temperature 10\u00b0C 4. Use fresh solder (has flux core)</p>"},{"location":"assembly/soldering/#cold-solder-joint","title":"Cold Solder Joint","text":"<p>Appearance: - Dull, grainy surface - Lumpy, irregular shape - Doesn't flow smoothly</p> <p>Fix: 1. Reheat joint with clean tip 2. Add tiny bit fresh solder 3. Let flow completely 4. Remove heat, don't move</p>"},{"location":"assembly/soldering/#solder-bridge","title":"Solder Bridge","text":"<p>Problem: Solder connects adjacent pins</p> <p>Fix: 1. Add flux to bridge 2. Heat with clean tip 3. Drag tip along pins 4. Surface tension separates solder 5. Or use solder wick</p>"},{"location":"assembly/soldering/#burnt-component","title":"Burnt Component","text":"<p>Signs: - Discoloration - Smoke during soldering - Component doesn't work</p> <p>Prevention: - Solder quickly (&lt;5 sec) - Lower temperature if smoking - Use heat sink (alligator clip on wire)</p> <p>If burnt: - Desolder and replace - Most modules are cheap (&lt;CHF 5)</p>"},{"location":"assembly/soldering/#next-steps","title":"Next Steps","text":"<p>Soldering complete! \u2713</p> <p>Continue to:</p> <ul> <li>Wiring Diagram - Visual reference</li> <li>Enclosure Assembly - Build the box</li> <li>Firmware Installation - Upload code</li> </ul> <p>Or if issues:</p> <ul> <li>Check Hardware Specifications for component details</li> <li>Review the Assembly Guide if you missed steps</li> </ul> <p>Questions? Ask in GitHub Discussions or visit FabLab EPFL for in-person help!</p>"},{"location":"assembly/testing/","title":"Component Testing","text":"<p>Verify each part works before final assembly.</p>"},{"location":"assembly/testing/#esp32-c3","title":"ESP32-C3","text":"<ul> <li>Upload blink sketch</li> <li>Open Serial Monitor @ 115200</li> <li>Verify reset and boot messages</li> </ul>"},{"location":"assembly/testing/#led-strip","title":"LED Strip","text":"<ul> <li>Connect 5V/GND and DIN via 330\u03a9</li> <li>Run simple Rust LED test (smart-leds example)</li> <li>Check all 8 pixels light in order</li> </ul>"},{"location":"assembly/testing/#button","title":"Button","text":"<ul> <li>Wire to GPIO with pull-up</li> <li>Read pin state while toggling</li> <li>Debounce: verify stable transitions</li> </ul>"},{"location":"assembly/testing/#charger-battery","title":"Charger &amp; Battery","text":"<ul> <li>Check TP4056 LEDs: red (charging) \u2192 green (full)</li> <li>Measure battery voltage: 3.7\u20134.2V</li> </ul>"},{"location":"assembly/testing/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>No serial? Try different cable/port</li> <li>Random LED colors? Ground/data integrity; add large cap</li> <li>Button bounces? Increase debounce ms in firmware</li> </ul> <p>Next: Breadboard Prototype</p>"},{"location":"deployment/quick-start/","title":"Deployment Quick Start","text":"<p>Fast reference guide for getting your documentation online.</p>"},{"location":"deployment/quick-start/#github-pages-setup","title":"GitHub Pages Setup","text":""},{"location":"deployment/quick-start/#5-minute-deployment","title":"5-Minute Deployment","text":"<pre><code># 1. Enable GitHub Pages\n# Go to: https://github.com/lanterno/office-wall-clock/settings/pages\n# Source: Deploy from a branch \u2192 gh-pages \u2192 / (root) \u2192 Save\n\n# 2. Push to GitHub\ngit add .\ngit commit -m \"Add documentation and auto-deployment\"\ngit push origin main\n\n# 3. Monitor deployment\n# https://github.com/lanterno/office-wall-clock/actions\n\n# 4. Visit your site (2-3 minutes)\n# https://lanterno.github.io/office-wall-clock/\n</code></pre>"},{"location":"deployment/quick-start/#what-was-already-configured","title":"What Was Already Configured","text":"<p>\u2705 GitHub Action - <code>.github/workflows/deploy-docs.yml</code> \u2705 MkDocs Config - <code>mkdocs.yml</code> \u2705 Dependencies - <code>requirements-docs.txt</code> \u2705 Content - All documentation in <code>docs-site/</code></p>"},{"location":"deployment/quick-start/#auto-deploy-triggers","title":"Auto-Deploy Triggers","text":"<p>Deployment happens automatically when: - \u2705 You push to <code>main</code> branch - \u2705 Any file in <code>docs-site/</code> changes - \u2705 <code>mkdocs.yml</code> is modified - \u2705 <code>requirements-docs.txt</code> is updated</p>"},{"location":"deployment/quick-start/#local-testing","title":"Local Testing","text":"<p>Before deploying, test locally:</p> <pre><code># Install dependencies\npip install -r requirements-docs.txt\n\n# Start development server\nmkdocs serve\n\n# Visit http://localhost:8000\n# Changes auto-reload!\n</code></pre>"},{"location":"deployment/quick-start/#monitoring","title":"Monitoring","text":""},{"location":"deployment/quick-start/#check-build-status","title":"Check Build Status","text":"<p>In GitHub: - Go to \"Actions\" tab - Click latest workflow run - Green \u2713 = success - Red \u2717 = check logs</p> <p>Add Badge to README: <pre><code>![Documentation](https://github.com/lanterno/office-wall-clock/actions/workflows/deploy-docs.yml/badge.svg)\n</code></pre></p>"},{"location":"deployment/quick-start/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/quick-start/#workflow-permission-error","title":"Workflow Permission Error","text":"<p>Settings \u2192 Actions \u2192 General - Workflow permissions: \u2705 Read and write permissions - Save and re-run workflow</p>"},{"location":"deployment/quick-start/#site-shows-404","title":"Site Shows 404","text":"<p>Wait 2-3 minutes after first deploy Check Settings \u2192 Pages \u2192 Branch = <code>gh-pages</code> Clear Browser cache (Ctrl+Shift+R)</p>"},{"location":"deployment/quick-start/#build-fails","title":"Build Fails","text":"<p>Test locally first: <pre><code>mkdocs build --strict\n</code></pre></p> <p>Check logs: <pre><code>gh run view --log-failed\n</code></pre></p>"},{"location":"deployment/quick-start/#next-steps","title":"Next Steps","text":"<p>\ud83d\ude80 Site URL: <code>https://lanterno.github.io/office-wall-clock/</code></p> <p>Your documentation is now live! Share the link! \ud83c\udf89</p>"},{"location":"firmware/api-integration/","title":"API Integration","text":"<p>The Wall Clock In Machine is designed to work with your existing timer API. This guide explains how to configure the device to communicate with your backend service.</p>"},{"location":"firmware/api-integration/#api-requirements","title":"API Requirements","text":"<p>Your timer API must provide HTTP/HTTPS endpoints for:</p> <ol> <li>Starting a timer (clock in)</li> <li>Stopping a timer (clock out)</li> <li>Getting current status (optional, for recovery)</li> </ol> <p>External Dependency</p> <p>The Wall Clock In Machine does not include a backend API. You must have your own timer tracking service running. The device acts as a physical interface to your existing API.</p>"},{"location":"firmware/api-integration/#default-api-format","title":"Default API Format","text":"<p>The firmware is pre-configured to work with the following API structure:</p>"},{"location":"firmware/api-integration/#clock-in-endpoint","title":"Clock In Endpoint","text":"<pre><code>POST /api/timer/start\nContent-Type: application/json\nAuthorization: Bearer {your_token}\n\n{\n  \"project_id\": \"office-time\"\n}\n</code></pre> <p>Expected Response (200 OK): <pre><code>{\n  \"beat_id\": \"12345\",\n  \"started_at\": \"2025-10-29T08:00:00Z\"\n}\n</code></pre></p>"},{"location":"firmware/api-integration/#clock-out-endpoint","title":"Clock Out Endpoint","text":"<pre><code>POST /api/timer/stop\nContent-Type: application/json\nAuthorization: Bearer {your_token}\n\n{\n  \"beat_id\": \"12345\"\n}\n</code></pre> <p>Expected Response (200 OK): <pre><code>{\n  \"beat_id\": \"12345\",\n  \"stopped_at\": \"2025-10-29T17:00:00Z\",\n  \"duration\": 28800\n}\n</code></pre></p>"},{"location":"firmware/api-integration/#get-status-endpoint-optional","title":"Get Status Endpoint (Optional)","text":"<pre><code>GET /api/timer/current\nAuthorization: Bearer {your_token}\n</code></pre> <p>Expected Response (200 OK): <pre><code>{\n  \"is_running\": true,\n  \"beat_id\": \"12345\",\n  \"started_at\": \"2025-10-29T08:00:00Z\",\n  \"elapsed\": 3600\n}\n</code></pre></p>"},{"location":"firmware/api-integration/#configuration","title":"Configuration","text":""},{"location":"firmware/api-integration/#environment-variables","title":"Environment Variables","text":"<p>Set these environment variables for configuration:</p> <pre><code># API endpoint (base URL without paths)\nexport TIMER_API_ENDPOINT=\"https://your-api-domain.com\"\n\n# API authentication token (optional)\nexport TIMER_API_TOKEN=\"your_bearer_token_here\"\n\n# Project ID for time entries (optional, default: \"office-time\")\nexport TIMER_PROJECT_ID=\"office-time\"\n</code></pre>"},{"location":"firmware/api-integration/#device-configuration","title":"Device Configuration","text":"<p>When you first power on the device, it will create a WiFi hotspot for configuration:</p> <ol> <li>Connect to WiFi network: WallClockIn-Setup</li> <li>Browser opens automatically (or go to http://192.168.4.1)</li> <li>Enter configuration:</li> <li>WiFi SSID: Your office/home WiFi</li> <li>WiFi Password: Your WiFi password</li> <li>API Endpoint: <code>https://your-api-domain.com</code></li> <li>API Token: Your authentication token (optional)</li> <li>Click Save</li> </ol> <p>The device will reboot and connect to your WiFi.</p> <p>HTTPS Recommended</p> <p>For security, use HTTPS for your API endpoint. The device supports both HTTP and HTTPS, but HTTP sends your token in plain text over WiFi.</p>"},{"location":"firmware/api-integration/#adapting-to-your-api","title":"Adapting to Your API","text":"<p>If your API uses different endpoint paths or request formats, you can modify the firmware.</p>"},{"location":"firmware/api-integration/#changing-endpoint-paths","title":"Changing Endpoint Paths","text":"<p>Edit <code>firmware/src/api.rs</code>:</p> <pre><code>ApiResponse ApiClient::clockIn(const char* project_id) {\n  // Change the path here:\n  return sendRequest(\"POST\", \"/your/custom/start/path\", payload.c_str());\n}\n\nApiResponse ApiClient::clockOut(const char* beat_id) {\n  // Change the path here:\n  return sendRequest(\"POST\", \"/your/custom/stop/path\", payload.c_str());\n}\n</code></pre>"},{"location":"firmware/api-integration/#changing-request-format","title":"Changing Request Format","text":"<p>Edit <code>firmware/src/api_client.cpp</code>:</p> <pre><code>ApiResponse ApiClient::clockIn(const char* project_id) {\n  StaticJsonDocument&lt;256&gt; doc;\n\n  // Modify the JSON structure:\n  doc[\"your_field_name\"] = project_id;\n  doc[\"another_field\"] = \"value\";\n\n  String payload;\n  serializeJson(doc, payload);\n\n  return sendRequest(\"POST\", \"/api/timer/start\", payload.c_str());\n}\n</code></pre>"},{"location":"firmware/api-integration/#changing-response-parsing","title":"Changing Response Parsing","text":"<p>Edit <code>firmware/src/api_client.cpp</code> in the <code>sendRequest</code> method:</p> <pre><code>if (doc.containsKey(\"your_beat_id_field\")) {\n  response.beat_id = doc[\"your_beat_id_field\"].as&lt;String&gt;();\n}\n</code></pre>"},{"location":"firmware/api-integration/#adding-custom-headers","title":"Adding Custom Headers","text":"<p>Edit <code>firmware/src/api_client.cpp</code>:</p> <pre><code>ApiResponse ApiClient::sendRequest(const char* method, const char* path, const char* payload) {\n  // ... existing code ...\n\n  http.addHeader(\"Content-Type\", \"application/json\");\n  http.addHeader(\"Authorization\", \"Bearer \" + api_token);\n\n  // Add your custom headers:\n  http.addHeader(\"X-Custom-Header\", \"value\");\n  http.addHeader(\"X-Device-ID\", \"wall-clock-in-machine\");\n\n  // ... rest of code ...\n}\n</code></pre>"},{"location":"firmware/api-integration/#testing-your-api","title":"Testing Your API","text":"<p>Before using the device, test your API manually:</p>"},{"location":"firmware/api-integration/#test-clock-in","title":"Test Clock In","text":"<pre><code>curl -X POST https://your-api.com/api/timer/start \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  -d '{\"project_id\": \"office-time\"}'\n</code></pre> <p>Expected: 200 OK with <code>beat_id</code> in response</p>"},{"location":"firmware/api-integration/#test-clock-out","title":"Test Clock Out","text":"<pre><code>curl -X POST https://your-api.com/api/timer/stop \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  -d '{\"beat_id\": \"12345\"}'\n</code></pre> <p>Expected: 200 OK confirming stop</p>"},{"location":"firmware/api-integration/#test-from-device-network","title":"Test from Device Network","text":"<p>Test from same network as device:</p> <pre><code># SSH into a device on same network or test from laptop on WiFi\ncurl -v https://your-api.com/api/timer/start \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer YOUR_TOKEN\" \\\n  -d '{\"project_id\": \"office-time\"}'\n</code></pre> <p>Check: - \u2705 DNS resolves correctly - \u2705 SSL certificate valid - \u2705 Firewall allows connection - \u2705 API responds with 200 OK</p>"},{"location":"firmware/api-integration/#authentication-methods","title":"Authentication Methods","text":""},{"location":"firmware/api-integration/#bearer-token-recommended","title":"Bearer Token (Recommended)","text":"<pre><code>// In api_client.cpp:\nhttp.addHeader(\"Authorization\", \"Bearer \" + api_token);\n</code></pre> <p>Set token in device configuration portal.</p>"},{"location":"firmware/api-integration/#api-key","title":"API Key","text":"<pre><code>// In api_client.cpp:\nhttp.addHeader(\"X-API-Key\", api_token);\n</code></pre>"},{"location":"firmware/api-integration/#basic-auth","title":"Basic Auth","text":"<pre><code>// In api_client.cpp:\nString auth = base64::encode(api_token + \":\" + api_password);\nhttp.addHeader(\"Authorization\", \"Basic \" + auth);\n</code></pre>"},{"location":"firmware/api-integration/#oauth2","title":"OAuth2","text":"<p>For OAuth2, you'll need to implement token refresh logic. This is advanced - see the firmware source code in the repository.</p>"},{"location":"firmware/api-integration/#network-requirements","title":"Network Requirements","text":""},{"location":"firmware/api-integration/#firewall-configuration","title":"Firewall Configuration","text":"<p>Ensure your API is accessible:</p> <ul> <li>\u2705 Allow incoming HTTPS (port 443) from your network</li> <li>\u2705 If using HTTP, allow port 80</li> <li>\u2705 If API is on local network, ensure ESP32 can reach it</li> </ul>"},{"location":"firmware/api-integration/#dns","title":"DNS","text":"<p>If using a domain name:</p> <ul> <li>\u2705 Ensure DNS resolves from your WiFi network</li> <li>\u2705 Test: <code>nslookup your-api-domain.com</code></li> </ul>"},{"location":"firmware/api-integration/#ssltls","title":"SSL/TLS","text":"<p>The device uses <code>WiFiClientSecure</code> with insecure mode by default:</p> <pre><code>secure_client-&gt;setInsecure();  // Skips certificate validation\n</code></pre> <p>For production, add certificate validation:</p> <pre><code>// In api_client.cpp:\nconst char* rootCA = R\"EOF(\n-----BEGIN CERTIFICATE-----\nYOUR_CERTIFICATE_HERE\n-----END CERTIFICATE-----\n)EOF\";\n\nsecure_client-&gt;setCACert(rootCA);\n</code></pre>"},{"location":"firmware/api-integration/#error-handling","title":"Error Handling","text":"<p>The device handles common errors:</p>"},{"location":"firmware/api-integration/#network-errors","title":"Network Errors","text":"<ul> <li>Connection Failed: Retries 3 times with exponential backoff</li> <li>Timeout: 10-second timeout per request</li> <li>DNS Failure: Shows yellow LED, retries on next button press</li> </ul>"},{"location":"firmware/api-integration/#http-errors","title":"HTTP Errors","text":"Code Meaning Device Behavior 200-299 Success Green LED, normal operation 401 Unauthorized Yellow LED, check token 403 Forbidden Yellow LED, check permissions 404 Not Found Yellow LED, check endpoint path 429 Rate Limited Yellow LED, waits 1 minute 500 Server Error Yellow LED, retries 502/503 Unavailable Yellow LED, retries"},{"location":"firmware/api-integration/#offline-mode","title":"Offline Mode","text":"<p>If API is unreachable:</p> <ol> <li>Device stores state locally (beat_id, timestamp)</li> <li>Shows yellow LED to indicate offline</li> <li>Retries periodically when button pressed</li> <li>Syncs when connection restored</li> </ol>"},{"location":"firmware/api-integration/#api-integration-examples","title":"API Integration Examples","text":""},{"location":"firmware/api-integration/#example-1-toggl-api","title":"Example 1: Toggl API","text":"<pre><code>// firmware/src/api_client.cpp\n\nApiResponse ApiClient::clockIn(const char* project_id) {\n  StaticJsonDocument&lt;256&gt; doc;\n  doc[\"time_entry\"][\"description\"] = \"Office time\";\n  doc[\"time_entry\"][\"created_with\"] = \"Wall Clock In Machine\";\n\n  String payload;\n  serializeJson(doc, payload);\n\n  return sendRequest(\"POST\", \"/api/v9/time_entries\", payload.c_str());\n}\n</code></pre>"},{"location":"firmware/api-integration/#example-2-harvest-api","title":"Example 2: Harvest API","text":"<pre><code>// firmware/src/api_client.cpp\n\nApiResponse ApiClient::clockIn(const char* project_id) {\n  StaticJsonDocument&lt;256&gt; doc;\n  doc[\"project_id\"] = 12345;  // Your Harvest project ID\n  doc[\"task_id\"] = 67890;     // Your task ID\n\n  String payload;\n  serializeJson(doc, payload);\n\n  return sendRequest(\"POST\", \"/api/v2/time_entries\", payload.c_str());\n}\n</code></pre>"},{"location":"firmware/api-integration/#example-3-custom-json-structure","title":"Example 3: Custom JSON Structure","text":"<pre><code>// If your API expects:\n// {\"action\": \"start\", \"user_id\": \"abc\", \"timestamp\": 12345}\n\npub fn clock_in(user_id: &amp;str) -&gt; anyhow::Result&lt;ApiResponse&gt; {\n  #[derive(serde::Serialize)]\n  struct Payload&lt;'a&gt; {\n    action: &amp;'static str,\n    user_id: &amp;'a str,\n    timestamp: u64,\n  }\n\n  let payload = Payload {\n    action: \"start\",\n    user_id,\n    timestamp: epoch_seconds(),\n  };\n\n  let body = serde_json::to_vec(&amp;payload)?;\n  http_post(\"/api/timelog\", &amp;body)\n}\n</code></pre>"},{"location":"firmware/api-integration/#monitoring-api-calls","title":"Monitoring API Calls","text":""},{"location":"firmware/api-integration/#serial-monitor","title":"Serial Monitor","text":"<p>Connect device via USB to see API calls:</p> <pre><code>espflash monitor --speed 115200\n</code></pre> <p>Output: <pre><code>[INFO] Button pressed: Clock In\n[API] POST /api/timer/start\n[API] Response: 200 OK\n[INFO] Clocked in successfully! Beat ID: 12345\n</code></pre></p>"},{"location":"firmware/api-integration/#api-logs","title":"API Logs","text":"<p>Check your API server logs to verify:</p> <ul> <li>Requests are reaching the server</li> <li>Authentication is working</li> <li>Correct response format</li> <li>Response time &lt; 10 seconds</li> </ul>"},{"location":"firmware/api-integration/#security-best-practices","title":"Security Best Practices","text":"<p>Security Considerations</p> <ol> <li>Use HTTPS - Encrypts traffic including tokens</li> <li>Rotate Tokens - Change API tokens periodically</li> <li>Limit Scope - Use tokens with minimal permissions</li> <li>Network Security - Use WPA2/WPA3 for WiFi</li> <li>Device Physical Security - Device stores token in flash memory</li> </ol>"},{"location":"firmware/api-integration/#token-storage","title":"Token Storage","text":"<p>Tokens are stored in ESP32 non-volatile storage:</p> <ul> <li>Encrypted by ESP32 hardware (flash encryption)</li> <li>Persists across reboots</li> <li>Can be wiped with factory reset</li> </ul>"},{"location":"firmware/api-integration/#troubleshooting","title":"Troubleshooting","text":""},{"location":"firmware/api-integration/#connection-failed-error","title":"\"Connection Failed\" Error","text":"<p>Possible Causes: - API server is down - DNS not resolving - Firewall blocking ESP32 - Network connectivity issue</p> <p>Solutions: 1. Test API with curl from same network 2. Check API server status 3. Verify firewall rules 4. Check WiFi connection</p>"},{"location":"firmware/api-integration/#http-401-unauthorized","title":"\"HTTP 401 Unauthorized\"","text":"<p>Cause: Invalid or missing API token</p> <p>Solution: 1. Verify token is correct 2. Check token hasn't expired 3. Ensure token has required permissions 4. Update token in device configuration</p>"},{"location":"firmware/api-integration/#http-404-not-found","title":"\"HTTP 404 Not Found\"","text":"<p>Cause: Wrong API endpoint path</p> <p>Solution: 1. Verify API endpoint URL in configuration 2. Check API documentation for correct paths 3. Modify firmware if paths are different</p>"},{"location":"firmware/api-integration/#timeout-error","title":"\"Timeout\" Error","text":"<p>Cause: API response time &gt; 10 seconds</p> <p>Solutions: 1. Optimize API performance 2. Increase timeout in <code>firmware/src/config.h</code>:    <pre><code>#define API_TIMEOUT_MS  20000  // 20 seconds\n</code></pre> 3. Check for slow database queries</p>"},{"location":"firmware/api-integration/#next-steps","title":"Next Steps","text":"<ul> <li>Configure Device: Configuration Guide</li> <li>Test Setup: Testing Guide</li> <li>Daily Use: Usage Guide</li> </ul> <p>Need Help? Check the Configuration Guide or open an issue on GitHub.</p>"},{"location":"firmware/architecture/","title":"Firmware Architecture","text":"<p>Overview of the async task-based architecture using Embassy.</p>"},{"location":"firmware/architecture/#async-task-architecture","title":"Async Task Architecture","text":"<p>The firmware uses Embassy's async executor to run concurrent tasks:</p> <pre><code>Embassy Executor\n\u251c\u2500\u2500 Button Task (tasks/button.rs)\n\u2502   \u251c\u2500\u2500 Async debouncing\n\u2502   \u251c\u2500\u2500 Long-press detection\n\u2502   \u2514\u2500\u2500 Event signaling\n\u251c\u2500\u2500 LED Task (tasks/led.rs)\n\u2502   \u251c\u2500\u2500 WS2812B control via RMT\n\u2502   \u251c\u2500\u2500 Status indication\n\u2502   \u2514\u2500\u2500 Energy meter display\n\u2514\u2500\u2500 WiFi Task (tasks/wifi.rs)\n    \u251c\u2500\u2500 Network management\n    \u251c\u2500\u2500 API communication\n    \u2514\u2500\u2500 State synchronization\n</code></pre>"},{"location":"firmware/architecture/#task-communication","title":"Task Communication","text":"<p>Tasks communicate via Embassy's <code>Signal</code> primitive: - Button Task \u2192 WiFi Task (button events) - WiFi Task \u2192 LED Task (status updates) - Type-safe, lock-free message passing</p>"},{"location":"firmware/architecture/#modules","title":"Modules","text":"<ul> <li>main.rs: Embassy executor initialization</li> <li>config.rs: Hardware constants and configuration</li> <li>tasks/button.rs: Async button handling with debouncing</li> <li>tasks/led.rs: WS2812B LED control (status + energy meter)</li> <li>tasks/wifi.rs: WiFi connection and API integration</li> </ul>"},{"location":"firmware/architecture/#data-flow","title":"Data Flow","text":"<ul> <li>Main loop polls/debounces button \u2192 state change</li> <li>Timer (5 min) \u2192 api \u2192 backend sync</li> <li>NTP sync at boot for accurate timestamps</li> </ul>"},{"location":"firmware/architecture/#storage","title":"Storage","text":"<ul> <li>NVS (non-volatile storage) for WiFi and API settings</li> <li>Optional offline session cache (future)</li> </ul>"},{"location":"firmware/architecture/#error-handling","title":"Error Handling","text":"<ul> <li>Network: exponential backoff (1s, 5s, 15s)</li> <li>API 5xx: retry; 4xx: surface to user</li> <li>Brownout: reduce brightness; pause sync</li> </ul>"},{"location":"firmware/architecture/#extensibility","title":"Extensibility","text":"<ul> <li>Project selection via DIP or long-press menu</li> <li>Additional sensors can publish metrics via API</li> </ul> <p>See: Installation, Configuration, API Integration</p>"},{"location":"firmware/configuration/","title":"Configuration","text":"<p>Configure WiFi, API endpoint, and device options in Rust firmware.</p>"},{"location":"firmware/configuration/#wifi-setup","title":"WiFi Setup","text":"<p>On first boot or after reset (coming soon in Rust): 1. Device exposes AP: <code>WALL-CLOCK-SETUP</code> (planned) 2. Connect with phone or laptop 3. Open <code>http://192.168.4.1/</code> (planned) 4. Enter WiFi SSID and password</p>"},{"location":"firmware/configuration/#api-settings","title":"API Settings","text":"<ul> <li>API Base URL: e.g., <code>https://api.example.com</code></li> <li>Start endpoint: <code>/api/beats/start</code></li> <li>End endpoint: <code>/api/beats/end</code></li> <li>Optional auth token header</li> </ul>"},{"location":"firmware/configuration/#device-options","title":"Device Options","text":"<ul> <li>LED Brightness: 10-255 (default 64)</li> <li>Update Interval: 5 min</li> <li>Low Battery Threshold: 20%</li> <li>Timezone/NTP server</li> <li>All options are managed in Rust via <code>firmware/src/config.rs</code> and <code>DeviceConfig</code> struct.</li> </ul>"},{"location":"firmware/configuration/#resetting-config","title":"Resetting Config","text":"<ul> <li>Hold button for 10 seconds at boot \u2192 clears WiFi and settings (implemented in Rust)</li> <li>Or expose settings page via admin long-press menu (planned)</li> </ul>"},{"location":"firmware/configuration/#environment-variables-for-api-docs-site","title":"Environment Variables (for API docs site)","text":"<ul> <li>BACKEND_API_BASE_URL</li> <li>BACKEND_API_TOKEN (optional)</li> </ul> <p>See: API Integration, Daily Operation</p>"},{"location":"firmware/installation/","title":"Installation","text":"<p>Set up your development environment and flash the firmware.</p>"},{"location":"firmware/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Rust toolchain via rustup (stable)</li> <li>Target: <code>riscv32imc-unknown-none-elf</code> (no_std embedded)</li> <li><code>espflash</code> CLI for flashing and serial monitor</li> </ul>"},{"location":"firmware/installation/#steps","title":"Steps","text":"<ol> <li>Install Rust toolchain:     <pre><code>curl -fsSL https://sh.rustup.rs | sh\n</code></pre></li> <li>Add ESP32-C3 target (no_std):     <pre><code>rustup target add riscv32imc-unknown-none-elf\n</code></pre></li> <li>Install espflash:     <pre><code>cargo install espflash --locked\n</code></pre></li> <li>Connect ESP32-C3 via USB-C</li> <li>Build and flash firmware:     <pre><code>cd firmware\ncargo build --release\ncargo run --release\n# Or use make commands:\nmake rust-build\nmake rust-flash\n</code></pre></li> </ol>"},{"location":"firmware/installation/#first-boot","title":"First Boot","text":"<ul> <li>Device will enter WiFi setup mode (coming soon in Rust)</li> <li>Connect to AP: <code>WALL-CLOCK-SETUP</code> (planned)</li> <li>Configure WiFi and API URL (see Configuration)</li> </ul>"},{"location":"firmware/installation/#rust-workflow-recommended","title":"Rust Workflow (Recommended)","text":"<ul> <li>Open project folder in VS Code</li> <li>Edit Rust source files in <code>firmware/src/</code></li> <li>Build and flash using the commands above</li> </ul>"},{"location":"firmware/installation/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Unknown serial port \u2192 try different USB cable or driver</li> <li>Compile error \u2192 check Rust toolchain and target</li> <li>Boot loop \u2192 press reset; lower LED brightness</li> </ul> <p>Next: Configuration</p>"},{"location":"firmware/overview/","title":"Firmware Overview","text":"<p>The Wall Clock In Machine firmware is built in pure Rust for ESP32-C3, using state-of-the-art embedded tools. This provides a modern, safe, and efficient solution for time tracking.</p>"},{"location":"firmware/overview/#technology-stack","title":"Technology Stack","text":"<ul> <li>esp-hal 0.20: Pure Rust hardware abstraction (no C!)</li> <li>Embassy 0.6: Modern async/await runtime for embedded</li> <li>defmt: Zero-cost structured logging</li> <li>Stable Rust: No nightly toolchain required</li> </ul>"},{"location":"firmware/overview/#architecture","title":"Architecture","text":"<p>The firmware uses a task-based async architecture with Embassy executor:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         Embassy Executor                \u2502\n\u2502         (Async Runtime)                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502        \u2502        \u2502\n    \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2510  \u250c\u25bc\u2500\u2500\u2500\u2500\u2510  \u250c\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502 Button \u2502  \u2502 LED \u2502  \u2502   WiFi   \u2502\n    \u2502  Task  \u2502  \u2502Task \u2502  \u2502   Task   \u2502\n    \u2502 (Async)\u2502  \u2502(Async)\u2502 \u2502 (Async) \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502        \u2502        \u2502\n    \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502       esp-hal (Pure Rust)        \u2502\n    \u2502      Hardware Abstraction        \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"firmware/overview/#state-machine","title":"State Machine","text":"<p>The device operates as a finite state machine with 5 distinct states:</p> <pre><code>stateDiagram-v2\n    [*] --&gt; STARTUP\n    STARTUP --&gt; WIFI_CONNECTING\n    WIFI_CONNECTING --&gt; IDLE_CLOCKED_OUT: Connected\n    WIFI_CONNECTING --&gt; WIFI_CONNECTING: Retry\n\n    IDLE_CLOCKED_OUT --&gt; WORKING_CLOCKED_IN: Button DOWN\n    WORKING_CLOCKED_IN --&gt; IDLE_CLOCKED_OUT: Button UP\n\n    IDLE_CLOCKED_OUT --&gt; ERROR: API Failed\n    WORKING_CLOCKED_IN --&gt; ERROR: API Failed\n    ERROR --&gt; IDLE_CLOCKED_OUT: Retry Success\n    ERROR --&gt; WORKING_CLOCKED_IN: Retry Success</code></pre>"},{"location":"firmware/overview/#state-descriptions","title":"State Descriptions","text":"State LED Color Description Transitions STARTUP \ud83d\udd35 Blue pulse Initial boot, loading config \u2192 WIFI_CONNECTING WIFI_CONNECTING \ud83d\udd35 Blue pulse Connecting to WiFi \u2192 IDLE or keep trying IDLE_CLOCKED_OUT \ud83d\udd34 Red solid Not working, idle \u2192 WORKING (button down) WORKING_CLOCKED_IN \ud83d\udfe2 Green solid Currently working \u2192 IDLE (button up) ERROR \ud83d\udfe1 Yellow flash API/WiFi error \u2192 IDLE/WORKING (retry)"},{"location":"firmware/overview/#code-structure","title":"Code Structure","text":""},{"location":"firmware/overview/#file-organization","title":"File Organization","text":"<pre><code>firmware/\n\u251c\u2500\u2500 Cargo.toml             # Rust dependencies and config\n\u251c\u2500\u2500 rust-toolchain.toml    # Rust toolchain config\n\u251c\u2500\u2500 .cargo/config.toml     # Cargo target and runner\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main.rs            # Main state machine\n\u2502   \u251c\u2500\u2500 config.rs          # Configuration constants\n\u2502   \u251c\u2500\u2500 types.rs           # Data structures &amp; enums\n\u2502   \u251c\u2500\u2500 button.rs          # Button interface and debouncing\n\u2502   \u251c\u2500\u2500 led.rs             # LED interface and animations\n\u2502   \u251c\u2500\u2500 api.rs             # API interface and HTTP client\n\u2514\u2500\u2500 README.md              # Firmware overview\n</code></pre>"},{"location":"firmware/overview/#module-responsibilities","title":"Module Responsibilities","text":""},{"location":"firmware/overview/#1-mainrs-application-core","title":"1. main.rs - Application Core","text":"<p>Responsibilities: - Initialize all subsystems - Run main state machine loop - Handle button events - Coordinate LED updates - Manage deep sleep</p> <p>Key Functions (Rust): <pre><code>fn main()                // One-time initialization and main event loop\nfn handle_button_press() // React to button state changes\nfn update_energy_meter() // Update work duration display\nfn go_to_sleep()         // Enter deep sleep mode\n</code></pre></p> <p>Main Loop Flow (Rust): <pre><code>loop {\n    // 1. Read button state\n    // 2. Check for state changes\n    // 3. Update LEDs\n    // 4. Handle API calls\n    // 5. Check for sleep conditions\n    // 6. Repeat every 100ms\n}\n</code></pre></p>"},{"location":"firmware/overview/#2-buttonrs-input-processing","title":"2. button.rs - Input Processing","text":"<p>Responsibilities: - Debounce mechanical switch - Detect state changes - Track button timing - Detect long press (3 seconds)</p> <p>Key Functions (Rust): <pre><code>fn begin(pin: i32)                  // Initialize GPIO\nfn update(&amp;mut self)                // Call every loop\nfn is_pressed(&amp;self) -&gt; bool        // Current state\nfn event(&amp;mut self) -&gt; ButtonEvent  // Returns None/Pressed/Released/LongPress\n</code></pre></p> <p>Debouncing Algorithm: <pre><code>// Read switch 50ms apart\nif current_state != last_state {\n    debounce_timer = now();\n}\nif now() - debounce_timer &gt; DEBOUNCE_TIME {\n    stable_state = current_state;\n    if stable_state != previous_state {\n        return Pressed or Released;\n    }\n}\n</code></pre></p>"},{"location":"firmware/overview/#3-led_controller-visual-feedback","title":"3. led_controller - Visual Feedback","text":"<p>Responsibilities: - Control 8 WS2812B LEDs - Status indicator (LED 0) - Energy meter (LEDs 1-7) - Animations (pulse, rainbow)</p> <p>Key Functions (Rust): <pre><code>fn begin(pin: i32, num_leds: usize)        // Initialize LED strip\nfn set_status(color: Rgb)                  // Set status LED color\nfn set_energy_meter(hours: f32)            // Display work duration\nfn pulse_status(color: Rgb)                // Breathing animation\nfn rainbow_celebration()                   // Completed workday animation\nfn clear()                                 // Turn all LEDs off\n</code></pre></p> <p>Energy Meter Algorithm: <pre><code>// Map 0-8 hours to 7 LEDs with thermal gradient\nlet hours = clamp(work_hours, 0.0, 8.0);\nlet led_count = (hours / 8.0) * 7.0;\n\nfor i in 0..7 {\n    if (i as f32) &lt; led_count {\n        // Gradient: Green \u2192 Yellow \u2192 Orange \u2192 Red\n        let hue = map(i, 0, 7, 96, 0);  // HSV hue\n        leds[i+1] = hsv_to_rgb(hue, 255, brightness);\n    }\n}\n</code></pre></p>"},{"location":"firmware/overview/#4-api_client-network-communication","title":"4. api_client - Network Communication","text":"<p>Responsibilities: - HTTPS communication with API - Request retry logic - JSON parsing - Error handling</p> <p>Key Functions: <pre><code>bool begin(endpoint, token)   // Initialize with credentials\nbool clockIn()               // POST /api/timer/start\nbool clockOut()              // POST /api/timer/stop\nbool getCurrentStatus()      // GET /api/timer/current\n</code></pre></p> <p>Retry Logic: <pre><code>for (attempt = 1; attempt &lt;= 3; attempt++) {\n    result = sendRequest();\n    if (result.success) {\n        return true;\n    }\n    delay(attempt * 1000);  // Exponential backoff\n}\nreturn false;  // All retries failed\n</code></pre></p> <p>Error Handling: <pre><code>if (httpCode == 200) {\n    parseJSON(response);\n    return SUCCESS;\n} else if (httpCode == 401) {\n    return AUTH_ERROR;\n} else if (httpCode &gt;= 500) {\n    return SERVER_ERROR;\n} else {\n    return NETWORK_ERROR;\n}\n</code></pre></p>"},{"location":"firmware/overview/#configuration","title":"Configuration","text":"<p>All configurable parameters are in <code>config.rs</code>:</p>"},{"location":"firmware/overview/#wifi-settings","title":"WiFi Settings","text":"<pre><code>pub const WIFI_TIMEOUT_MS: u64 = 30_000; // 30 seconds to connect\n</code></pre> <p>WiFi credentials are provided via the configuration portal and stored in NVS.</p>"},{"location":"firmware/overview/#api-settings","title":"API Settings","text":"<pre><code>pub const API_ENDPOINT: &amp;str = \"https://api.example.com\";\npub const API_TIMEOUT_MS: u64 = 10_000;      // 10 seconds per request\npub const API_RETRY_COUNT: u8 = 3;           // Retry 3 times\n</code></pre>"},{"location":"firmware/overview/#hardware-pins","title":"Hardware Pins","text":"<pre><code>pub const BUTTON_PIN: i32 = 2;    // Toggle switch GPIO\npub const LED_PIN: i32 = 3;       // WS2812B data GPIO\npub const NUM_LEDS: usize = 8;    // Total LED count\n</code></pre>"},{"location":"firmware/overview/#timing","title":"Timing","text":"<pre><code>pub const DEBOUNCE_TIME_MS: u64 = 50;        // Button debounce\npub const LONG_PRESS_TIME_MS: u64 = 3_000;   // Long press = 3 seconds\npub const SLEEP_TIMEOUT_MS: u64 = 300_000;   // Sleep after 5 minutes\npub const ENERGY_UPDATE_MS: u64 = 300_000;   // Update meter every 5 min\n</code></pre>"},{"location":"firmware/overview/#power-management","title":"Power Management","text":"<pre><code>pub const ENABLE_DEEP_SLEEP: bool = true;     // Battery saving\npub const DEEP_SLEEP_TIME_US: u64 = 3_600_000_000; // Wake every hour\npub const LED_BRIGHTNESS: u8 = 64;            // 0-255 (25% = longer battery)\n</code></pre>"},{"location":"firmware/overview/#data-structures","title":"Data Structures","text":""},{"location":"firmware/overview/#enums","title":"Enums","text":"<pre><code>// Device operational states\npub enum DeviceState {\n    Startup,\n    WifiConnecting,\n    IdleClockedOut,\n    WorkingClockedIn,\n    Error,\n}\n\n// Button events\npub enum ButtonEvent {\n    None,           // No change\n    Pressed,        // Button just pressed\n    Released,       // Button just released\n    LongPress,      // Held for 3+ seconds\n}\n\n// API response codes\npub enum ApiResult {\n    Success,\n    AuthError,\n    NetworkError,\n    ServerError,\n    TimeoutError,\n}\n</code></pre>"},{"location":"firmware/overview/#structures","title":"Structures","text":"<pre><code>// Work session tracking\npub struct WorkSession {\n    pub start_time: u64,    // Unix timestamp\n    pub duration: u32,      // Seconds elapsed\n    pub active: bool,       // Currently working?\n}\n\n// WiFi configuration (stored in NVS)\npub struct WifiConfig {\n    pub ssid: heapless::String&lt;32&gt;,\n    pub password: heapless::String&lt;64&gt;,\n    pub configured: bool,\n}\n\n// API configuration (stored in NVS)\npub struct ApiConfig {\n    pub endpoint: heapless::String&lt;128&gt;,\n    pub token: heapless::String&lt;256&gt;,\n    pub configured: bool,\n}\n</code></pre>"},{"location":"firmware/overview/#libraries-dependencies","title":"Libraries &amp; Dependencies","text":"<p>The firmware uses these crates (managed by Cargo):</p> Crate Purpose esp-idf-svc WiFi, HTTP client, NVS (non-volatile storage), system services esp-idf-hal Hardware abstraction (GPIO, timers, RMT, etc.) embedded-hal Common traits for embedded drivers smart-leds High-level WS2812/NeoPixel color types and patterns serde/serde_json Data serialization and JSON handling heapless Fixed-size data structures (no_std-friendly) anyhow/thiserror Ergonomic error handling <p>Built with Rust for ESP-IDF. Fits comfortably within 4MB flash on ESP32-C3.</p>"},{"location":"firmware/overview/#memory-usage","title":"Memory Usage","text":""},{"location":"firmware/overview/#flash-memory-program-storage","title":"Flash Memory (Program Storage)","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 4MB\n\u2502 Bootloader (64KB)        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Partition Table (4KB)    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 NVS (20KB)              \u2502 \u2190 WiFi, API config stored here\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 OTA Updates (1.8MB)     \u2502 \u2190 Reserved for firmware updates\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 App Firmware (800KB)    \u2502 \u2190 Our code\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 SPIFFS (1.3MB)          \u2502 \u2190 File system (unused)\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Usage: 800KB / 4MB = 20%</p>"},{"location":"firmware/overview/#sram-runtime-memory","title":"SRAM (Runtime Memory)","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 400KB\n\u2502 Heap (240KB)            \u2502 \u2190 Dynamic allocation\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Stack (16KB)            \u2502 \u2190 Function calls\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Global vars (8KB)       \u2502 \u2190 Our variables\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 WiFi buffers (80KB)     \u2502 \u2190 WiFi stack\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 System reserved (56KB)   \u2502 \u2190 ESP32 system\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Peak usage: ~180KB / 400KB = 45%</p>"},{"location":"firmware/overview/#boot-sequence","title":"Boot Sequence","text":"<p>The device follows this startup sequence:</p> <pre><code>0ms    Power On / Reset\n\u2502\n\u251c\u2500 100ms   ESP32 bootloader starts\n\u2502\n\u251c\u2500 500ms   esp-idf initializes\n\u2502          - Setup serial communication\n\u2502          - Initialize GPIO pins\n\u2502          - Load config from NVS\n\u2502\n\u251c\u2500 1000ms  Rust main initializes subsystems\n\u2502          - Initialize button handler\n\u2502          - Initialize LED controller\n\u2502          - Show blue pulse (STARTUP state)\n\u2502\n\u251c\u2500 1500ms  WiFi connection starts\n\u2502          - Load WiFi credentials\n\u2502          - Attempt connection\n\u2502          - OR start configuration portal\n\u2502\n\u251c\u2500 2000ms  WiFi connected (if successful)\n\u2502          - Get current time from NTP\n\u2502          - Load API configuration\n\u2502          - Query current work status\n\u2502\n\u251c\u2500 2500ms  Ready for operation\n\u2502          - Show status LED (red or green)\n\u2502          - Update energy meter\n\u2502          - Enter main event loop\n\u2502\n\u25bc          Main loop runs every 100ms\n</code></pre> <p>Typical boot time: 2-3 seconds</p>"},{"location":"firmware/overview/#power-management_1","title":"Power Management","text":""},{"location":"firmware/overview/#sleep-strategy","title":"Sleep Strategy","text":"<p>The firmware aggressively uses deep sleep to maximize battery life:</p> <pre><code>// Check for inactivity\nif idle_clocked_out &amp;&amp; now.since(last_activity) &gt; SLEEP_TIMEOUT {\n    // Persist state (NVS via esp-idf-svc)\n    nvs.set_bool(\"clocked_in\", false)?;\n\n    // Configure wake-up sources\n    wake_on_gpio(button_pin, Level::Low)?;     // Button press\n    wake_on_timer(DEEP_SLEEP_TIME)?;           // Periodic wake\n\n    // Turn off LEDs and sleep\n    leds.clear();\n    deep_sleep_start()?;                       // ~5\u00b5A current draw\n}\n</code></pre> <p>Wake sources: 1. Button press - Immediate wake 2. Timer - Wake every hour to check status 3. Reset button - Manual wake</p>"},{"location":"firmware/overview/#power-consumption-timeline","title":"Power Consumption Timeline","text":"<pre><code>Typical Day (Clocked Out):\n\n00:00 \u2500\u2500\u2500\u2500\u2510                                    5\u00b5A (sleeping)\n          \u2502 Button press\n07:30     \u251c\u2500\u2510                                  80mA (5 sec)\n          \u2502 \u2514\u2500\u2500 API call complete\n          \u2502                                    5\u00b5A (sleeping)\n          \u2502\n12:00     \u251c\u2500\u2510 Periodic wake                   80mA (2 sec)\n          \u2502 \u2514\u2500\u2500                                5\u00b5A\n          \u2502\n18:00     \u251c\u2500\u2510 Button press                    80mA (5 sec)\n          \u2502 \u2514\u2500\u2500\n          \u2502                                    5\u00b5A\n23:59 \u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Average: ~15mA over 24 hours</p>"},{"location":"firmware/overview/#error-handling","title":"Error Handling","text":"<p>The firmware includes comprehensive error handling:</p>"},{"location":"firmware/overview/#wifi-errors","title":"WiFi Errors","text":"<pre><code>if (!WiFi.begin(ssid, password)) {\n    // Credentials missing \u2192 Start config portal\n    startConfigPortal();\n}\n\nif (WiFi.status() != WL_CONNECTED) {\n    retryCount++;\n    if (retryCount &gt; MAX_RETRIES) {\n        // Show error LED\n        ledController.setStatus(COLOR_YELLOW);\n        // Wait and retry\n        delay(5000);\n        retryCount = 0;\n    }\n}\n</code></pre>"},{"location":"firmware/overview/#api-errors","title":"API Errors","text":"<pre><code>ApiResult result = apiClient.clockIn();\n\nswitch (result) {\n    case SUCCESS:\n        currentState = WORKING_CLOCKED_IN;\n        ledController.setStatus(COLOR_GREEN);\n        break;\n\n    case AUTH_ERROR:\n        // Invalid token \u2192 Show config portal\n        startConfigPortal();\n        break;\n\n    case NETWORK_ERROR:\n    case TIMEOUT_ERROR:\n        // Retry with backoff\n        ledController.pulseStatus(COLOR_YELLOW);\n        delay(retryDelay);\n        break;\n\n    case SERVER_ERROR:\n        // Server problem \u2192 Wait longer\n        ledController.setStatus(COLOR_RED);\n        delay(30000);\n        break;\n}\n</code></pre>"},{"location":"firmware/overview/#hardware-errors","title":"Hardware Errors","text":"<pre><code>// Watchdog timer catches firmware hangs\nesp_task_wdt_init(10, true);  // 10 second timeout\nesp_task_wdt_add(NULL);\n\n// Check for low battery\nfloat voltage = analogRead(BATTERY_PIN) * (3.3 / 4095.0) * 2;\nif (voltage &lt; 3.2) {\n    ledController.pulseStatus(COLOR_RED);\n    // Show low battery warning\n}\n\n// Check LED strip connection (visual validation)\n// Optionally send a test frame and verify expected colors\n</code></pre>"},{"location":"firmware/overview/#testing","title":"Testing","text":""},{"location":"firmware/overview/#unit-tests","title":"Unit Tests","text":"<p>The firmware's pure logic can be tested on the host using Rust's testing framework:</p> <pre><code>// Example (host-side)\n#[test]\nfn button_long_press_detection() {\n    // arrange inputs, simulate timing, assert events\n}\n</code></pre> <p>Running tests locally: <pre><code>cargo test\n</code></pre></p>"},{"location":"firmware/overview/#manual-testing-checklist","title":"Manual Testing Checklist","text":"<p>Before deploying firmware:</p> <ul> <li> Button press \u2192 Green LED + API call</li> <li> Button release \u2192 Red LED + API call</li> <li> Long press (3s) \u2192 Config portal starts</li> <li> WiFi disconnect \u2192 Reconnects automatically</li> <li> API timeout \u2192 Retries with backoff</li> <li> Deep sleep \u2192 Wakes on button press</li> <li> Battery low \u2192 Shows warning</li> <li> Energy meter \u2192 Updates every 5 minutes</li> <li> 8 hour work \u2192 Rainbow celebration</li> </ul>"},{"location":"firmware/overview/#performance","title":"Performance","text":""},{"location":"firmware/overview/#response-times","title":"Response Times","text":"Action Time Notes Button press to LED &lt;50ms Instant feedback Button press to API call 200-500ms Network latency WiFi reconnect 2-5 seconds After disconnect Deep sleep wake 100ms Fast resume Config portal start 3 seconds On long press"},{"location":"firmware/overview/#network-usage","title":"Network Usage","text":"Operation Data Transfer Frequency Clock In ~200 bytes Once per day Clock Out ~200 bytes Once per day Status Check ~150 bytes Once per hour NTP sync ~100 bytes Once per day <p>Daily total: &lt;2KB</p> <p>Monthly total: &lt;60KB (negligible for any data plan)</p>"},{"location":"firmware/overview/#firmware-updates","title":"Firmware Updates","text":""},{"location":"firmware/overview/#ota-over-the-air-updates","title":"OTA (Over-The-Air) Updates","text":"<p>OTA updates can be implemented using esp-idf's OTA APIs from Rust. This project focuses on USB flashing via espflash; OTA is an optional enhancement.</p>"},{"location":"firmware/overview/#usb-updates","title":"USB Updates","text":"<p>Connect USB-C cable and flash directly:</p> <pre><code># Flash via USB using espflash\nespflash flash target/riscv32imc-esp-espidf/release/firmware\n</code></pre> <p>No bootloader button needed - ESP32-C3 has native USB!</p>"},{"location":"firmware/overview/#customization","title":"Customization","text":""},{"location":"firmware/overview/#adding-new-features","title":"Adding New Features","text":"<p>Want to add a buzzer for audio feedback?</p> <pre><code>// 1. Add to config.h\n#define BUZZER_PIN GPIO_NUM_4\n\n// 2. Initialize in setup()\npinMode(BUZZER_PIN, OUTPUT);\n\n// 3. Add beep function\nvoid beep(int duration) {\n    digitalWrite(BUZZER_PIN, HIGH);\n    delay(duration);\n    digitalWrite(BUZZER_PIN, LOW);\n}\n\n// 4. Call in main loop\nif (buttonEvent == PRESSED) {\n    beep(100);  // 100ms beep\n}\n</code></pre>"},{"location":"firmware/overview/#changing-led-colors","title":"Changing LED Colors","text":"<p>Edit <code>led_controller.cpp</code>:</p> <pre><code>// Change color scheme\n#define COLOR_IDLE      CRGB::Blue     // Instead of Red\n#define COLOR_WORKING   CRGB::Purple   // Instead of Green\n#define COLOR_ERROR     CRGB::Orange   // Instead of Yellow\n</code></pre>"},{"location":"firmware/overview/#adjusting-timings","title":"Adjusting Timings","text":"<p>Edit <code>config.h</code>:</p> <pre><code>// More aggressive sleep (shorter timeout)\n#define SLEEP_TIMEOUT_MS 60000        // 1 minute instead of 5\n\n// More frequent energy meter updates\n#define ENERGY_UPDATE_MS 60000        // 1 minute instead of 5\n\n// Faster WiFi connection\n#define WIFI_TIMEOUT_MS 10000         // 10 seconds instead of 30\n</code></pre>"},{"location":"firmware/overview/#next-steps","title":"Next Steps","text":"<p>Ready to install the firmware?</p> <ul> <li>Installation Guide - Flash firmware to ESP32</li> <li>Configuration Guide - Setup WiFi and API</li> <li>API Integration - Connect to your backend</li> </ul> <p>Or dive deeper:</p> <ul> <li>Source Code - Browse on GitHub</li> <li>Architecture Guide - Understand the codebase</li> </ul>"},{"location":"getting-started/overview/","title":"Overview","text":"<p>Welcome to the Wall Clock In Machine project! This guide will help you understand what this project is about and whether it's right for you.</p>"},{"location":"getting-started/overview/#what-is-this","title":"What Is This?","text":"<p>The Wall Clock In Machine is a physical IoT device that automates time tracking for office workers. Instead of typing terminal commands to start/stop your work timer, you simply press a button on your desk.</p>"},{"location":"getting-started/overview/#the-problem-it-solves","title":"The Problem It Solves","text":"<p>If you use a timer API to track your work hours, you probably do this every day:</p> <pre><code># When arriving at office\ncurl -X POST https://your-api.com/api/timer/start \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"project_id\": \"office-time\"}'\n\n# When leaving office  \ncurl -X POST https://your-api.com/api/timer/stop \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"beat_id\": \"12345\"}'\n</code></pre> <p>This process:</p> <ul> <li>\u274c Takes 15 seconds (twice a day)</li> <li>\u274c Interrupts your workflow</li> <li>\u274c Easy to forget</li> <li>\u274c Requires opening terminal</li> <li>\u274c Frustrating on busy days</li> </ul>"},{"location":"getting-started/overview/#the-solution","title":"The Solution","text":"<p>With the Wall Clock In Machine:</p> <ul> <li>\u2705 Press button (2 seconds)</li> <li>\u2705 Device calls API automatically</li> <li>\u2705 LED feedback confirms action</li> <li>\u2705 Never forget - button is on your desk</li> <li>\u2705 Battery powered - weeks between charges</li> </ul> <p>Time Savings</p> <p>Daily: 26 seconds saved Yearly: ~2.6 hours saved Plus: No context switching, no forgetting!</p>"},{"location":"getting-started/overview/#who-is-this-for","title":"Who Is This For?","text":"<p>This project is perfect for you if:</p> <ul> <li>\u2705 You track work time using an API/service</li> <li>\u2705 You're tired of typing terminal commands</li> <li>\u2705 You like physical buttons and tactile feedback</li> <li>\u2705 You enjoy DIY electronics projects</li> <li>\u2705 You want to learn IoT development</li> <li>\u2705 You have basic soldering skills (or want to learn)</li> </ul>"},{"location":"getting-started/overview/#skill-level","title":"Skill Level","text":"<p>Beginner to Intermediate</p> <ul> <li>Basic electronics knowledge helpful but not required</li> <li>Never soldered before? Our guides teach you!</li> <li>Comfortable with command line is useful</li> <li>No programming required (Rust firmware is ready to flash)</li> </ul>"},{"location":"getting-started/overview/#time-investment","title":"Time Investment","text":"Phase Time Required Reading Documentation 2-3 hours Ordering Components 1 hour Waiting for Delivery 1-4 weeks Assembly 2-3 hours Firmware Setup 30 minutes Configuration 15 minutes Total Active Time ~5 hours"},{"location":"getting-started/overview/#project-features","title":"Project Features","text":""},{"location":"getting-started/overview/#hardware","title":"Hardware","text":"<ul> <li> <p>ESP32-C3 Microcontroller</p> <p>WiFi enabled, low power, USB-C programming</p> </li> <li> <p>8 RGB LEDs</p> <p>Status indicator + energy meter display</p> </li> <li> <p>Toggle Switch</p> <p>Satisfying mechanical button with tactile feedback</p> </li> <li> <p>2000mAh Battery</p> <p>10-14 days runtime, USB-C rechargeable</p> </li> </ul>"},{"location":"getting-started/overview/#firmware","title":"Firmware","text":"<ul> <li>WiFi Connectivity - Automatic reconnection</li> <li>Web Configuration - Easy setup portal</li> <li>API Integration - Works with any HTTP/HTTPS endpoint</li> <li>Deep Sleep - Ultra-low power consumption</li> <li>OTA Updates - Wireless firmware updates</li> <li>Error Handling - Robust retry logic</li> </ul>"},{"location":"getting-started/overview/#design","title":"Design","text":"<ul> <li>Professional Appearance - Looks good on any desk</li> <li>Compact Size - 100\u00d760\u00d735mm (about size of deck of cards)</li> <li>3D Printable - STL files included</li> <li>Open Source - Modify as you like</li> <li>Well Documented - Step-by-step guides for everything</li> </ul>"},{"location":"getting-started/overview/#what-youll-need","title":"What You'll Need","text":""},{"location":"getting-started/overview/#tools-required","title":"Tools Required","text":"Tool Cost Where to Buy Soldering Iron $15-25 Amazon Solder $8 Amazon Wire Strippers $10 Amazon Multimeter $15 Amazon Screwdriver Set $10 Amazon USB-C Cable $5 Amazon Total ~$70 One-time investment <p>Already Have Tools?</p> <p>If you have basic electronics tools, you're all set! If not, this is a great starter kit that you'll use for many projects.</p>"},{"location":"getting-started/overview/#components-required","title":"Components Required","text":"<p>Total Cost: ~$35</p> <p>See Bill of Materials for complete shopping list with links.</p>"},{"location":"getting-started/overview/#software-required-free","title":"Software Required (Free!)","text":"<ul> <li>Code Editor: VS Code (recommended)</li> <li>Rust toolchain: For firmware development</li> <li>espflash: For flashing and serial monitor</li> </ul> <p>All software is free and open source!</p>"},{"location":"getting-started/overview/#prerequisites","title":"Prerequisites","text":""},{"location":"getting-started/overview/#technical-requirements","title":"Technical Requirements","text":"<p>Your Timer API Must Have:</p> <ul> <li>\u2705 HTTP/HTTPS endpoint for starting timer</li> <li>\u2705 HTTP/HTTPS endpoint for stopping timer</li> <li>\u2705 JSON API (or be willing to modify firmware)</li> <li>\u2705 Accessible from your WiFi network</li> </ul> <p>Example API Format: <pre><code>POST /api/timer/start\n{\n  \"project_id\": \"office-time\"\n}\n\nPOST /api/timer/stop\n{\n  \"beat_id\": \"12345\"\n}\n</code></pre></p> <p>API Flexibility</p> <p>The firmware is designed to work with the API structure shown above, but you can easily modify it to match your specific API. See API Integration for details.</p>"},{"location":"getting-started/overview/#knowledge-requirements","title":"Knowledge Requirements","text":"<p>Helpful to Know (but not required):</p> <ul> <li>Basic electronics (what is voltage, current, ground)</li> <li>Soldering (or watch a YouTube tutorial first)</li> <li>Command line basics (cd, ls, running commands)</li> <li>ESP-IDF + Rust basics (helpful for troubleshooting)</li> </ul> <p>Don't Worry If You Don't Know:</p> <p>Our documentation explains everything step-by-step with:</p> <ul> <li>Clear instructions with photos/diagrams</li> <li>Troubleshooting for common issues</li> <li>Beginner-friendly explanations</li> <li>No assumptions about prior knowledge</li> </ul>"},{"location":"getting-started/overview/#project-structure","title":"Project Structure","text":"<p>The complete project includes:</p> <pre><code>office-wall-clock/\n\u251c\u2500\u2500 hardware/           # Component specs and BOM\n\u251c\u2500\u2500 firmware/           # Complete Rust source code\n\u251c\u2500\u2500 docs-site/          # This documentation website\n\u251c\u2500\u2500 tools/              # Helper scripts and utilities\n\u2514\u2500\u2500 README.md           # Quick overview\n</code></pre>"},{"location":"getting-started/overview/#what-makes-this-special","title":"What Makes This Special?","text":""},{"location":"getting-started/overview/#1-complete-documentation","title":"1. Complete Documentation","text":"<p>Unlike many DIY projects, this includes:</p> <ul> <li>\u2705 Full hardware specifications</li> <li>\u2705 Complete firmware source code</li> <li>\u2705 Step-by-step assembly guide</li> <li>\u2705 Comprehensive troubleshooting</li> <li>\u2705 API integration examples</li> </ul>"},{"location":"getting-started/overview/#2-production-quality","title":"2. Production Quality","text":"<p>This isn't a proof-of-concept - it's a fully working device:</p> <ul> <li>\u2705 Error handling and retries</li> <li>\u2705 Battery monitoring</li> <li>\u2705 Deep sleep for power saving</li> <li>\u2705 OTA updates</li> <li>\u2705 Configuration portal</li> </ul>"},{"location":"getting-started/overview/#3-beginner-friendly","title":"3. Beginner Friendly","text":"<p>Even if you've never built anything before:</p> <ul> <li>\u2705 Clear explanations</li> <li>\u2705 Photos and diagrams</li> <li>\u2705 Troubleshooting guides</li> <li>\u2705 Community support</li> </ul>"},{"location":"getting-started/overview/#4-customizable","title":"4. Customizable","text":"<p>Open source means you can:</p> <ul> <li>\u2705 Modify for your specific needs</li> <li>\u2705 Add features</li> <li>\u2705 Change the design</li> <li>\u2705 Share improvements</li> </ul>"},{"location":"getting-started/overview/#success-stories","title":"Success Stories","text":"<p>Time Saver</p> <p>\"I used to forget to log my time at least once a week. Now I never forget - the button is right there on my desk. Plus it looks cool!\" - Alex, Software Engineer</p> <p>Gateway Project</p> <p>\"This was my first IoT project. The documentation made it easy to follow, and now I'm hooked on building things!\" - Sam, Designer</p> <p>Productivity Boost</p> <p>\"The LED energy meter is surprisingly motivating. Watching it count down makes me more aware of my work hours.\" - Jordan, Product Manager</p>"},{"location":"getting-started/overview/#next-steps","title":"Next Steps","text":"<p>Ready to get started?</p> <ol> <li>Read the Quick Start Guide - 5-minute overview</li> <li>Review Project Timeline - Plan your build</li> <li>Check Bill of Materials - See what to buy</li> <li>Order Components - Get parts on the way</li> <li>Start Building! - Follow assembly guides</li> </ol> <p>Quick Start Guide View Project on GitHub</p>"},{"location":"getting-started/overview/#questions","title":"Questions?","text":"<ul> <li>Check the documentation for common issues</li> <li>Open an issue on GitHub</li> </ul> <p>Ready to stop typing curl commands? Let's build this! \ud83d\ude80</p>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>Get your Wall Clock In Machine up and running in under 2 hours! This guide assumes you have all components ready.</p>"},{"location":"getting-started/quick-start/#for-lausanne-residents","title":"\ud83c\udde8\ud83c\udded For Lausanne Residents","text":"<p>Fastest path to success:</p> <ol> <li>Order components: CHF 90, 2-3 day delivery</li> <li>Digitec Galaxus - Electronics</li> <li> <p>Conrad.ch - Components</p> </li> <li> <p>Get tools: Free at FabLab EPFL or CHF 80 one-time</p> </li> <li>FabLab EPFL: B\u00e2timent MX, EPFL Campus</li> <li> <p>Open hours: Check EPFL FabLab website or contact EPFL directly</p> </li> <li> <p>Build time: 2-3 hours at FabLab (help available!)</p> </li> </ol>"},{"location":"getting-started/quick-start/#timeline-overview","title":"Timeline Overview","text":"<pre><code>Week 1: Order &amp; Wait\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Day 1: Order parts     \u2502 30 min\n\u2502 Day 2-3: Wait          \u2502 \u23f3\n\u2502 Day 3: Parts arrive! \u2713 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nWeek 2: Build\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Hour 1: Solder         \u2502 \ud83d\udd25\n\u2502 Hour 2: Assemble       \u2502 \ud83d\udd27\n\u2502 Hour 3: Program        \u2502 \ud83d\udcbb\n\u2502 Done! Working device \u2713 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Total active time: ~3 hours Total calendar time: 3-4 days (with fast shipping)</p>"},{"location":"getting-started/quick-start/#step-by-step-the-express-route","title":"Step-by-Step: The Express Route","text":""},{"location":"getting-started/quick-start/#step-1-order-components-30-minutes","title":"Step 1: Order Components (30 minutes)","text":"<p>Shopping List (CHF 90 total):</p> <p>From Digitec Galaxus: - [ ] ESP32-C3 DevKit (~CHF 15) - [ ] WS2812B LED Strip 1m (~CHF 12) - [ ] 2000mAh LiPo Battery (~CHF 18) - [ ] USB-C cable (~CHF 5)</p> <p>Search terms: \"ESP32-C3\", \"WS2812B LED\", \"LiPo battery 2000mah\"</p> <p>From Conrad.ch: - [ ] TP4056 Charger Module (~CHF 8) - [ ] AMS1117 3.3V Regulator (~CHF 3) - [ ] SPDT Toggle Switch (~CHF 5) - [ ] Wire kit 22AWG (~CHF 12) - [ ] Component kit (resistors, caps) (~CHF 8) - [ ] Project box or 3D print material (~CHF 10)</p> <p>Delivery: 1-3 days to Lausanne</p> <p>Student Discount</p> <p>EPFL students: Check if you have access to components through your lab or FabLab!</p>"},{"location":"getting-started/quick-start/#step-2-prepare-15-minutes","title":"Step 2: Prepare (15 minutes)","text":"<p>While waiting for parts:</p> <ol> <li> <p>Download firmware:    <pre><code>git clone https://github.com/lanterno/office-wall-clock.git\ncd office-wall-clock/firmware\n</code></pre></p> </li> <li> <p>Install Rust toolchain and espflash:    <pre><code>curl -fsSL https://sh.rustup.rs | sh\nrustup target add riscv32imc-unknown-none-elf\ncargo install espflash --locked\n</code></pre>    rustup target add riscv32imc-esp-espidf    cargo install espflash --locked    ```</p> </li> <li> <p>Configure API endpoint:    Edit <code>firmware/src/config.rs</code>:    <pre><code>pub const API_ENDPOINT: &amp;str = \"https://your-api.com\";\npub const API_TOKEN: &amp;str = \"your_token_here\";\n</code></pre></p> </li> <li> <p>Read assembly guide (you are here!)</p> </li> </ol>"},{"location":"getting-started/quick-start/#step-3-solder-components-60-90-minutes","title":"Step 3: Solder Components (60-90 minutes)","text":"<p>Location: FabLab EPFL or home workshop</p> <p>Tools needed: All available at FabLab</p> <p>Process:</p> <ol> <li>\u2611\ufe0f Power chain (20 min):</li> <li>Battery \u2192 TP4056 charger</li> <li>TP4056 \u2192 AMS1117 regulator</li> <li> <p>AMS1117 \u2192 ESP32 3.3V</p> </li> <li> <p>\u2611\ufe0f Toggle switch (10 min):</p> </li> <li>COM terminal \u2192 ESP32 GPIO2</li> <li> <p>NO terminal \u2192 GND</p> </li> <li> <p>\u2611\ufe0f LED strip (20 min):</p> </li> <li>Cut to 8 LEDs</li> <li>Solder wires: +5V, DIN, GND</li> <li> <p>Connect to ESP32</p> </li> <li> <p>\u2611\ufe0f Test continuity (10 min):</p> </li> <li>All grounds connected</li> <li>No shorts</li> <li>Voltage readings correct</li> </ol> <p>Detailed instructions: Soldering Guide</p>"},{"location":"getting-started/quick-start/#step-4-flash-firmware-15-minutes","title":"Step 4: Flash Firmware (15 minutes)","text":"<p>Connect ESP32 via USB-C to computer:</p> <pre><code># Navigate to firmware directory\ncd firmware/\n\n# Build and flash (opens monitor automatically via espflash)\ncargo run --release\n\n# Only monitor serial output (if already flashed)\nespflash monitor\n</code></pre> <p>Expected output: <pre><code>Connecting to WiFi...\nConnected! IP: 192.168.1.100\nStarting main loop...\nDevice ready.\n</code></pre></p> <p>Troubleshooting: Firmware Installation Guide</p>"},{"location":"getting-started/quick-start/#step-5-configure-wifi-5-minutes","title":"Step 5: Configure WiFi (5 minutes)","text":"<p>Two methods:</p>"},{"location":"getting-started/quick-start/#method-a-configuration-portal-easiest","title":"Method A: Configuration Portal (Easiest)","text":"<ol> <li>Long press toggle switch (3 seconds)</li> <li>Connect to WiFi network: <code>WallClockIn_XXXXXX</code></li> <li>Browser opens automatically to http://192.168.4.1</li> <li>Enter your WiFi credentials and API endpoint</li> <li>Save - device restarts and connects</li> </ol>"},{"location":"getting-started/quick-start/#method-b-hard-code-in-firmware","title":"Method B: Hard-code in firmware","text":"<p>Edit <code>firmware/src/config.rs</code>: <pre><code>pub const WIFI_SSID: &amp;str = \"YourNetworkName\";\npub const WIFI_PASSWORD: &amp;str = \"YourPassword\";\npub const API_ENDPOINT: &amp;str = \"https://your-api.com\";\npub const API_TOKEN: &amp;str = \"your_bearer_token\";\n</code></pre></p> <p>Re-upload firmware.</p> <p>Detailed instructions: Configuration Guide</p>"},{"location":"getting-started/quick-start/#step-6-test-verify-10-minutes","title":"Step 6: Test &amp; Verify (10 minutes)","text":"<p>Test checklist:</p> <ol> <li>\u2611\ufe0f Power on - Blue LED pulses (connecting)</li> <li>\u2611\ufe0f WiFi connects - LED turns red (idle)</li> <li>\u2611\ufe0f Toggle down - LED turns green, API called</li> <li>\u2611\ufe0f Toggle up - LED turns red, API called</li> <li>\u2611\ufe0f Energy meter - LEDs 2-8 show work duration</li> <li>\u2611\ufe0f Battery - Disconnect USB, still works</li> </ol> <p>If any step fails: Check the component specifications and wiring connections in the Hardware Guide.</p>"},{"location":"getting-started/quick-start/#step-7-enclosure-30-60-minutes","title":"Step 7: Enclosure (30-60 minutes)","text":"<p>Option A: 3D Print (if you have access to printer): - Files in <code>/hardware/enclosure/</code> - Print time: 5-6 hours - Material: CHF 5 of PLA - FabLab EPFL has 3D printers!</p> <p>Option B: Project Box: - Buy from Conrad or Brack (CHF 10) - Drill holes for switch, USB, LEDs - Time: 30 minutes</p> <p>Option C: Laser Cut Acrylic: - Files in <code>/hardware/enclosure/</code> - FabLab EPFL has laser cutter! - Material: CHF 8 of 3mm acrylic - Cut time: 15 minutes</p> <p>Assembly: 1. Mount ESP32 with standoffs 2. Mount switch in front panel 3. Position LED strip at top 4. Secure battery with double-sided tape 5. Close enclosure</p> <p>Detailed instructions: Enclosure Assembly</p>"},{"location":"getting-started/quick-start/#step-8-done","title":"Step 8: Done! \ud83c\udf89","text":"<p>Your device is ready!</p> <p>Daily use: - Toggle DOWN = Clock in (start work) - Toggle UP = Clock out (stop work) - LEDs = Energy meter shows hours worked - Battery = Lasts 10-14 days per charge</p> <p>Next steps: - Usage Guide - Daily workflow - Configuration Guide - Customize settings</p>"},{"location":"getting-started/quick-start/#estimated-costs","title":"Estimated Costs","text":""},{"location":"getting-started/quick-start/#budget-build-chf-40-4-weeks","title":"Budget Build (CHF 40, 4 weeks)","text":"Item Source Price ESP32-C3 kit AliExpress CHF 15 LiPo + charger AliExpress CHF 10 Components AliExpress CHF 8 Enclosure DIY/3D print CHF 5 Total CHF 38 Time 3-4 weeks"},{"location":"getting-started/quick-start/#standard-build-chf-90-3-days","title":"Standard Build (CHF 90, 3 days)","text":"Item Source Price ESP32-C3 Digitec CHF 15 LEDs Digitec CHF 12 Battery Digitec CHF 18 Components Conrad CHF 30 Enclosure Conrad/Print CHF 10 USB cable Digitec CHF 5 Total CHF 90 Time 2-3 days"},{"location":"getting-started/quick-start/#premium-build-chf-150-same-day","title":"Premium Build (CHF 150, same day)","text":"Item Source Price Quality components Adafruit imports CHF 100 Professional tools Conrad CHF 30 Custom enclosure Laser cut acrylic CHF 20 Total CHF 150 Time Same day at FabLab <p>Note: Tool costs are one-time investment, reusable for all future projects!</p>"},{"location":"getting-started/quick-start/#skill-requirements","title":"Skill Requirements","text":""},{"location":"getting-started/quick-start/#minimum-requirements","title":"Minimum Requirements","text":"<p>You can do this if you: - \u2705 Can use a soldering iron (or willing to learn - 30 min) - \u2705 Can copy/paste commands in terminal - \u2705 Can edit text files - \u2705 Have patience for troubleshooting</p> <p>No experience needed: - \u274c Programming (firmware is ready) - \u274c Electronics theory (guide explains everything) - \u274c 3D modeling (files provided)</p>"},{"location":"getting-started/quick-start/#learning-curve","title":"Learning Curve","text":"<pre><code>Hour 0-1:   Steep (first time soldering)\n            \u2514\u2500 FabLab has instructors!\n\nHour 1-2:   Moderate (assembly)\n            \u2514\u2500 Follow step-by-step guide\n\nHour 2-3:   Easy (programming)\n            \u2514\u2500 Copy/paste commands\n\nHour 3+:    Using it! (daily operation)\n            \u2514\u2500 Push button, done!\n</code></pre>"},{"location":"getting-started/quick-start/#common-pitfalls","title":"Common Pitfalls","text":""},{"location":"getting-started/quick-start/#ordering-wrong-components","title":"\u274c Ordering Wrong Components","text":"<p>Problem: \"I bought ESP8266, not ESP32-C3\"</p> <p>Prevention: - Use exact model numbers from BOM - Check pinout matches guide - When in doubt, ask in Discussions</p> <p>Solution: - Return and reorder (Switzerland has good return policies!) - Or adapt firmware (advanced)</p>"},{"location":"getting-started/quick-start/#soldering-shorts","title":"\u274c Soldering Shorts","text":"<p>Problem: \"Device won't turn on, gets hot\"</p> <p>Prevention: - Test with multimeter after each connection - Use proper amount of solder - Check for bridges with magnifying glass</p> <p>Solution: - Find short with multimeter continuity - Desolder and redo joint - Visit FabLab for help</p>"},{"location":"getting-started/quick-start/#wifi-wont-connect","title":"\u274c WiFi Won't Connect","text":"<p>Problem: \"Blue LED keeps pulsing\"</p> <p>Prevention: - Double-check SSID (case sensitive!) - Ensure 2.4GHz network (not 5GHz) - Check WiFi password carefully</p> <p>Solution: - Long press to enter config portal - Reconfigure credentials - Check Configuration Guide</p>"},{"location":"getting-started/quick-start/#api-calls-fail","title":"\u274c API Calls Fail","text":"<p>Problem: \"Yellow LED flashing\"</p> <p>Prevention: - Verify API endpoint URL (https://) - Test API with curl first - Check authentication token</p> <p>Solution: - Monitor serial output for errors - Test API endpoint manually - Check API Integration Guide</p>"},{"location":"getting-started/quick-start/#time-investment","title":"Time Investment","text":""},{"location":"getting-started/quick-start/#first-build","title":"First Build","text":"Phase Time Can Skip? Planning 30 min No Ordering 30 min No Waiting for parts 2-3 days No Reading docs 1 hour Partially Soldering 90 min No Programming 30 min No Testing 30 min No Enclosure 60 min Yes (temp) Troubleshooting 0-120 min Hopefully! Total active 5-7 hours Total calendar 3-4 days"},{"location":"getting-started/quick-start/#second-build-experience","title":"Second Build (Experience)","text":"<p>With experience, you can build in 2 hours:</p> <ul> <li>Soldering: 45 min (know what you're doing)</li> <li>Programming: 10 min (reuse config)</li> <li>Testing: 15 min (know what to check)</li> <li>Enclosure: 30 min (have process down)</li> </ul>"},{"location":"getting-started/quick-start/#help-resources","title":"Help &amp; Resources","text":""},{"location":"getting-started/quick-start/#lausanne-local-resources","title":"\ud83c\udde8\ud83c\udded Lausanne Local Resources","text":"<p>FabLab EPFL: - Address: B\u00e2timent MX, EPFL Campus - Tools: Free (EPFL) or small fee - Help: Experienced makers available - Website: EPFL FabLab (check EPFL website for current information)</p> <p>Electrolab Renens: - Address: Near Lausanne - Hackerspace with electronics - Community: Friendly, helpful</p> <p>Conrad Electronics Geneva: - 40 min from Lausanne - In-person component shopping - Staff can help with questions</p>"},{"location":"getting-started/quick-start/#online-resources","title":"Online Resources","text":"<p>This Documentation: - Hardware Guide - Assembly Guide - Firmware Guide</p> <p>Community: - GitHub Discussions - Issues</p> <p>General Learning: - SparkFun Soldering Tutorial - Adafruit NeoPixel Guide  - Rust on ESP-IDF (esp-idf)</p>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Ready to start?</p> <ol> <li>Read full documentation:</li> <li>Hardware Overview</li> <li>Bill of Materials</li> <li> <p>Soldering Guide</p> </li> <li> <p>Order components:</p> </li> <li>Use shopping list for Lausanne</li> <li> <p>2-3 day delivery from Swiss suppliers</p> </li> <li> <p>Prepare tools:</p> </li> <li>Visit FabLab EPFL</li> <li> <p>Or buy basic soldering kit</p> </li> <li> <p>Build!:</p> </li> <li>Follow guides step-by-step</li> <li>Ask for help if stuck</li> <li>Share your success!</li> </ol> <p>Questions? Ask in GitHub Discussions</p> <p>Stuck? Check the Configuration Guide or open an issue on GitHub.</p> <p>Let's build this! \ud83d\ude80</p>"},{"location":"getting-started/timeline/","title":"Project Timeline","text":"<p>This guide provides a realistic timeline for building your Wall Clock In Machine from start to finish, customized for Lausanne residents.</p>"},{"location":"getting-started/timeline/#overview","title":"Overview","text":"<p>Total time from decision to working device: 2-4 weeks (depending on part availability and your experience level)</p>"},{"location":"getting-started/timeline/#phase-1-planning-ordering-days-1-3","title":"Phase 1: Planning &amp; Ordering (Days 1-3)","text":""},{"location":"getting-started/timeline/#day-1-review-decide","title":"Day 1: Review &amp; Decide","text":"<ul> <li> Read through the Overview and Quick Start guides</li> <li> Review the Bill of Materials</li> <li> Decide on budget tier (CHF 40-150)</li> <li> Check if you have FabLab EPFL access (students/staff)</li> </ul> <p>Time Required: 1-2 hours</p>"},{"location":"getting-started/timeline/#days-2-3-order-components","title":"Days 2-3: Order Components","text":"<ul> <li> Order electronics from Digitec/Conrad or AliExpress</li> <li> Check FabLab EPFL tool availability for soldering</li> <li> Optional: Order custom enclosure parts or prepare for 3D printing</li> </ul> <p>Time Required: 2-3 hours</p> <p>Expected Delivery: - Digitec/Conrad: 1-3 business days - AliExpress: 2-4 weeks (budget option) - Local pickup (Play Zone, Conrad): Same day</p>"},{"location":"getting-started/timeline/#phase-2-learning-preparation-days-4-10","title":"Phase 2: Learning &amp; Preparation (Days 4-10)","text":""},{"location":"getting-started/timeline/#while-waiting-for-parts","title":"While Waiting for Parts","text":"<ul> <li> Read Firmware Overview and Architecture</li> <li> Study Wiring Diagram</li> <li> Watch soldering tutorials if you're a beginner</li> <li> Set up Rust toolchain and espflash</li> <li> Clone the firmware repository</li> <li> Test API connectivity (set up backend API first)</li> </ul> <p>Time Required: 4-8 hours spread over a week</p> <p>Learning Resources: - Rust on ESP-IDF book - smart-leds patterns and examples - esp-idf-svc WiFi/HTTP examples - FabLab EPFL workshops (check their schedule)</p>"},{"location":"getting-started/timeline/#phase-3-assembly-days-11-14","title":"Phase 3: Assembly (Days 11-14)","text":""},{"location":"getting-started/timeline/#initial-setup-day-11","title":"Initial Setup (Day 11)","text":"<ul> <li> Inventory all received components</li> <li> Test ESP32 with USB-C connection</li> <li> Flash test firmware (LED blink)</li> <li> Reserve FabLab EPFL time slot</li> </ul> <p>Time Required: 1-2 hours</p>"},{"location":"getting-started/timeline/#breadboard-prototype-days-12-13","title":"Breadboard Prototype (Days 12-13)","text":"<ul> <li> Follow Breadboard Prototype guide</li> <li> Connect all components without soldering</li> <li> Test button functionality</li> <li> Test LED animations</li> <li> Test WiFi connection and API calls</li> </ul> <p>Time Required: 3-5 hours</p>"},{"location":"getting-started/timeline/#soldering-day-14","title":"Soldering (Day 14)","text":"<ul> <li> Book FabLab EPFL soldering station</li> <li> Follow Soldering Guide</li> <li> Solder all connections</li> <li> Test each connection with multimeter</li> <li> Clean flux residue</li> </ul> <p>Time Required: 3-4 hours (first time), 1-2 hours (experienced)</p> <p>Note: FabLab staff can help with soldering if you're new!</p>"},{"location":"getting-started/timeline/#phase-4-integration-testing-days-15-17","title":"Phase 4: Integration &amp; Testing (Days 15-17)","text":""},{"location":"getting-started/timeline/#firmware-configuration-day-15","title":"Firmware Configuration (Day 15)","text":"<ul> <li> Follow Installation guide</li> <li> Configure WiFi credentials via captive portal</li> <li> Set API endpoint URL</li> <li> Test button state transitions</li> <li> Verify LED energy meter animation</li> </ul> <p>Time Required: 2-3 hours</p>"},{"location":"getting-started/timeline/#enclosure-assembly-days-16-17","title":"Enclosure Assembly (Days 16-17)","text":"<ul> <li> Follow Enclosure Assembly guide</li> <li> Mount PCB/breadboard inside enclosure</li> <li> Install button and LED strip</li> <li> Secure battery</li> <li> Add rubber feet or mounting hardware</li> </ul> <p>Time Required: 2-4 hours</p>"},{"location":"getting-started/timeline/#final-testing-day-17","title":"Final Testing (Day 17)","text":"<ul> <li> Follow Final Testing checklist</li> <li> Test full work session cycle</li> <li> Verify battery charging</li> <li> Check LED indicators in various lighting conditions</li> <li> Stress test API connectivity</li> </ul> <p>Time Required: 2 hours</p>"},{"location":"getting-started/timeline/#phase-5-deployment-customization-days-18-21","title":"Phase 5: Deployment &amp; Customization (Days 18-21)","text":""},{"location":"getting-started/timeline/#desk-deployment-day-18","title":"Desk Deployment (Day 18)","text":"<ul> <li> Choose desk location (near desk edge, visible LEDs)</li> <li> Install mounting hardware if needed</li> <li> Connect USB-C charger cable</li> <li> Perform first \"real\" work session</li> </ul> <p>Time Required: 30 minutes</p>"},{"location":"getting-started/timeline/#fine-tuning-days-19-21","title":"Fine-Tuning (Days 19-21)","text":"<ul> <li> Adjust LED brightness for your environment</li> <li> Customize LED colors/animations</li> <li> Configure sleep/wake behavior</li> <li> Set button debounce timing if needed</li> <li> Optimize API retry intervals</li> </ul> <p>Time Required: 2-3 hours spread over several days</p>"},{"location":"getting-started/timeline/#timeline-by-experience-level","title":"Timeline by Experience Level","text":""},{"location":"getting-started/timeline/#beginner-no-electronics-experience","title":"Beginner (No Electronics Experience)","text":"<ul> <li>Planning: 3 days</li> <li>Learning: 1 week</li> <li>Assembly: 2-3 days</li> <li>Testing: 2 days</li> <li>Total: 3-4 weeks</li> </ul> <p>Recommendations: - Attend FabLab EPFL introduction workshop - Ask for help during soldering - Take your time with breadboard testing - Don't skip the learning phase!</p>"},{"location":"getting-started/timeline/#intermediate-some-embeddedrust-experience","title":"Intermediate (Some Embedded/Rust Experience)","text":"<ul> <li>Planning: 1-2 days</li> <li>Learning: 2-3 days</li> <li>Assembly: 1 day</li> <li>Testing: 1 day</li> <li>Total: 1-2 weeks</li> </ul> <p>Recommendations: - Use fast delivery options (Digitec Premium) - Solder directly after breadboard verification - Customize firmware early</p>"},{"location":"getting-started/timeline/#advanced-electronics-firmware-experience","title":"Advanced (Electronics &amp; Firmware Experience)","text":"<ul> <li>Planning: 1 day</li> <li>Learning: Parallel with assembly</li> <li>Assembly: 4-6 hours (same day)</li> <li>Testing: 2 hours</li> <li>Total: 1 week (mostly waiting for parts)</li> </ul> <p>Recommendations: - Order premium components from local stores - Consider custom PCB design - Add advanced features (haptic feedback, OLED display, etc.)</p>"},{"location":"getting-started/timeline/#parallel-activities","title":"Parallel Activities","text":"<p>These can be done simultaneously to save time:</p> <pre><code>gantt\n    title Wall Clock In Machine Build Timeline\n    dateFormat YYYY-MM-DD\n    section Preparation\n    Order Parts           :a1, 2024-01-01, 1d\n    Learning             :a2, 2024-01-02, 7d\n    Parts Delivery       :milestone, m1, 2024-01-08, 0d\n    section Assembly\n    Breadboard Test      :a3, 2024-01-08, 2d\n    Soldering           :a4, 2024-01-10, 1d\n    section Integration\n    Firmware Setup      :a5, 2024-01-11, 1d\n    Enclosure          :a6, 2024-01-12, 1d\n    Testing            :a7, 2024-01-13, 1d\n    section Deployment\n    Go Live            :milestone, m2, 2024-01-14, 0d</code></pre>"},{"location":"getting-started/timeline/#contingency-planning","title":"Contingency Planning","text":""},{"location":"getting-started/timeline/#budget-extra-time-for","title":"Budget Extra Time For:","text":"<ul> <li>Component Delays: +1-2 weeks for international shipping</li> <li>Learning Curve: +3-5 days if you're new to soldering</li> <li>Troubleshooting: +1-2 days for debugging issues</li> <li>Rework: +2-3 days if you need to re-solder connections</li> </ul>"},{"location":"getting-started/timeline/#common-delays","title":"Common Delays","text":"<ol> <li>Customs: AliExpress orders can get stuck (Swiss customs CHF 62 limit)</li> <li>FabLab Availability: Book in advance during exam periods</li> <li>Part Defects: Order 1-2 spare components (especially buttons)</li> <li>API Backend: Ensure backend is deployed before testing</li> </ol>"},{"location":"getting-started/timeline/#quick-win-1-day-prototype","title":"Quick Win: 1-Day Prototype","text":"<p>If you need a working demo quickly:</p> <p>Morning (3 hours): 1. Buy ESP32, button, and LED strip from Play Zone Lausanne 2. Use breadboard (no soldering) 3. Flash basic firmware</p> <p>Afternoon (3 hours): 1. Test button + LED 2. Connect to WiFi 3. Mock API calls (or use test backend)</p> <p>Result: Functional prototype without enclosure or battery (USB-powered only)</p>"},{"location":"getting-started/timeline/#next-steps","title":"Next Steps","text":"<p>Once you've completed your build:</p> <ol> <li>Read Daily Operation for usage tips</li> <li>Review the documentation for common issues</li> <li>Consider contributing improvements to the project</li> <li>Share your build with the community!</li> </ol>"},{"location":"getting-started/timeline/#support","title":"Support","text":"<ul> <li>FabLab EPFL: Drop-in hours Monday-Friday (check website for schedule)</li> <li>GitHub Issues: Report bugs or ask questions</li> <li>EPFL CS Association: Student tech community</li> <li>Electronics Discord: Swiss electronics community</li> </ul> <p>Questions? Check the documentation or open an issue on GitHub!</p>"},{"location":"hardware/bill-of-materials/","title":"Bill of Materials","text":"<p>Complete shopping list for building the Wall Clock In Machine.</p> <p>Shopping Strategy</p> <ul> <li>Order from AliExpress for lowest cost (2-4 week shipping)</li> <li>Order from Amazon for fast delivery (2-day shipping)</li> <li>Order from Adafruit/SparkFun for guaranteed quality</li> <li>Buy multiples - save on shipping and have spares!</li> </ul>"},{"location":"hardware/bill-of-materials/#quick-summary","title":"Quick Summary","text":"Category Items Total Cost Electronics 6 components $18 Power 3 components $11 Enclosure Case + hardware $6 Total $35 <p>Time to Assemble: 2-3 hours for first build</p>"},{"location":"hardware/bill-of-materials/#core-electronics","title":"Core Electronics","text":""},{"location":"hardware/bill-of-materials/#1-microcontroller","title":"1. Microcontroller","text":"<p>ESP32-C3-DevKitM-1 (or compatible)</p> <ul> <li>Quantity: 1</li> <li>Price: $4-6</li> <li>Features: WiFi, Bluetooth, USB-C, 22 GPIO</li> <li>Specifications:<ul> <li>CPU: RISC-V @ 160MHz</li> <li>RAM: 400KB SRAM</li> <li>Flash: 4MB</li> <li>Connector: USB-C</li> </ul> </li> </ul> <p>Where to Buy:</p> Vendor Link Price Shipping AliExpress Search ESP32-C3 $3.50 Free (3-4 weeks) Amazon Amazon Search $6.99 Prime 2-day Espressif Official Store $5.95 Varies Adafruit Product #5337 $9.95 $5 flat <p>Compatible Boards</p> <p>Any ESP32-C3 board works! Look for: - ESP32-C3-DevKitC-02 - ESP32-C3-WROOM-02 - ESP32-C3 Super Mini</p> <p>Just verify it has: USB-C port, 4MB flash, accessible GPIO pins</p>"},{"location":"hardware/bill-of-materials/#2-led-strip","title":"2. LED Strip","text":"<p>WS2812B Addressable RGB LED Strip (8 LEDs minimum)</p> <ul> <li>Quantity: 8 LEDs (or buy 1 meter strip with 60 LEDs)</li> <li>Price: $2-5</li> <li>Specifications:<ul> <li>Voltage: 5V DC</li> <li>Type: WS2812B / SK6812 / NeoPixel</li> <li>Individual addressable RGB</li> <li>Current: ~60mA per LED at full brightness</li> </ul> </li> </ul> <p>Where to Buy:</p> Vendor Link Price Notes AliExpress WS2812B Strip $2/meter Buy 1 meter, cut to size Amazon Amazon WS2812B $8/meter Pre-cut options available Adafruit NeoPixel Strip $10/meter High quality, weatherproof BTF-Lighting Amazon Store $9/meter Popular brand <p>LED Options</p> <ul> <li>60 LEDs/meter: Easy to cut, standard density</li> <li>144 LEDs/meter: More compact, harder to cut</li> <li>Pre-wired: Look for \"WS2812B 8 LED\" modules</li> <li>Compatible: SK6812, NeoPixel, any WS2812 variant works</li> </ul>"},{"location":"hardware/bill-of-materials/#3-toggle-switch","title":"3. Toggle Switch","text":"<p>SPDT Toggle Switch (ON-OFF-ON or ON-ON)</p> <ul> <li>Quantity: 1</li> <li>Price: $1-3</li> <li>Specifications:<ul> <li>Type: Single Pole Double Throw (SPDT)</li> <li>Rating: 3A @ 125VAC</li> <li>Mounting: Panel mount (6mm thread)</li> <li>Actuation: Toggle/Lever</li> </ul> </li> </ul> <p>Where to Buy:</p> Vendor Link Price AliExpress SPDT Toggle $0.50 Amazon E-Switch 100DP1T1B1M2QEH $3.00 Adafruit Toggle Switch $0.95 Mouser C&amp;K 7101 $2.50 <p>Switch Type</p> <ul> <li>\u2705 SPDT (Single Pole Double Throw) - Has 3 terminals</li> <li>\u2705 ON-ON - Two stable positions</li> <li>\u274c SPST - Only 2 terminals (won't work)</li> <li>\u274c Momentary - Returns to center (not suitable)</li> </ul>"},{"location":"hardware/bill-of-materials/#4-resistor-for-leds","title":"4. Resistor (for LEDs)","text":"<p>330\u03a9 Resistor (\u00bcW)</p> <ul> <li>Quantity: 1</li> <li>Price: $0.10 (or buy pack of 100)</li> <li>Specifications:<ul> <li>Value: 330\u03a9 (orange-orange-brown)</li> <li>Wattage: \u00bcW or higher</li> <li>Tolerance: 5% or better</li> </ul> </li> </ul> <p>Where to Buy:</p> Vendor Link Price AliExpress Resistor Kit $2 for 1000pcs Amazon Elegoo Resistor Kit $8 for 1200pcs Adafruit Single Resistor $0.75 <p>Alternative</p> <p>Many WS2812B strips don't need external resistors. Try without first!</p>"},{"location":"hardware/bill-of-materials/#5-capacitor-for-leds","title":"5. Capacitor (for LEDs)","text":"<p>1000\u00b5F Electrolytic Capacitor (6.3V or higher)</p> <ul> <li>Quantity: 1</li> <li>Price: $0.20</li> <li>Specifications:<ul> <li>Capacitance: 470\u00b5F - 1000\u00b5F</li> <li>Voltage: 6.3V minimum (16V recommended)</li> <li>Type: Electrolytic</li> </ul> </li> </ul> <p>Where to Buy:</p> Vendor Link Price AliExpress Capacitor Kit $3 for 120pcs Amazon Assorted Kit $10 for 500pcs Adafruit 1000\u00b5F 25V $0.95 <p>Optional Component</p> <p>The capacitor smooths power to the LEDs and prevents flickering. Not strictly required for 8 LEDs.</p>"},{"location":"hardware/bill-of-materials/#6-wires-connectors","title":"6. Wires &amp; Connectors","text":"<p>Hookup Wire (22-26 AWG)</p> <ul> <li>Quantity: 1 meter of each color (red, black, yellow/white)</li> <li>Price: $3-5 for assorted spool</li> <li>Specifications:<ul> <li>Gauge: 22-26 AWG solid or stranded</li> <li>Colors: Red (power), Black (ground), Other (data)</li> </ul> </li> </ul> <p>JST-PH 2.0 Connectors (Optional but recommended)</p> <ul> <li>Quantity: 2-3 sets (male + female)</li> <li>Price: $2-4 for 10 pairs</li> <li>Use: Battery connection, easy disconnection</li> </ul> <p>Where to Buy:</p> Vendor Link Price AliExpress Wire Kit + JST $5 Amazon Striveday Wire Kit $14 Adafruit Silicone Wire Spool $3/spool"},{"location":"hardware/bill-of-materials/#power-components","title":"Power Components","text":""},{"location":"hardware/bill-of-materials/#7-lipo-battery","title":"7. LiPo Battery","text":"<p>3.7V 2000mAh Lithium Polymer Battery (503450 size)</p> <ul> <li>Quantity: 1</li> <li>Price: $7-10</li> <li>Specifications:<ul> <li>Voltage: 3.7V nominal (4.2V max, 3.0V min)</li> <li>Capacity: 2000mAh (higher OK, longer runtime)</li> <li>Size: 50\u00d734\u00d75mm (503450) - flexible</li> <li>Connector: JST-PH 2.0 (2-pin)</li> <li>Protection: Built-in PCM (Protection Circuit Module)</li> </ul> </li> </ul> <p>Where to Buy:</p> Vendor Link Price Notes AliExpress LiPo 2000mAh $6-8 Check size fits Amazon Adafruit LiPo $10-12 High quality Adafruit 2000mAh Battery $9.95 With JST connector <p>Battery Safety</p> <ul> <li>\u26a0\ufe0f Do not puncture or short circuit</li> <li>\u26a0\ufe0f Do not charge unattended</li> <li>\u26a0\ufe0f Store in cool, dry place</li> <li>\u26a0\ufe0f Dispose properly (battery recycling)</li> <li>\u2705 Use batteries with built-in protection circuit</li> </ul> <p>Size Flexibility</p> <p>Any 3.7V LiPo from 1000mAh to 3000mAh works: - 1000mAh: Smaller, lighter, 5-7 day runtime - 2000mAh: Recommended, 10-14 day runtime - 3000mAh: Larger, heavier, 15-20 day runtime</p>"},{"location":"hardware/bill-of-materials/#8-battery-charger","title":"8. Battery Charger","text":"<p>TP4056 Lithium Battery Charger Module (with protection)</p> <ul> <li>Quantity: 1</li> <li>Price: $1-3</li> <li>Specifications:<ul> <li>Input: Micro-USB or USB-C (5V)</li> <li>Output: 4.2V (LiPo charging)</li> <li>Current: 1A max (adjustable with resistor)</li> <li>Protection: Overcharge, overdischarge, overcurrent</li> <li>Indicators: Red LED (charging), Blue LED (full)</li> </ul> </li> </ul> <p>Where to Buy:</p> Vendor Link Price AliExpress TP4056 USB-C $1.50 Amazon HiLetgo TP4056 $8 for 5-pack Adafruit USB LiPo Charger $7.50 <p>USB Type</p> <ul> <li>USB-C version: Recommended (same as ESP32-C3)</li> <li>Micro-USB version: Works but need 2 different cables</li> </ul>"},{"location":"hardware/bill-of-materials/#9-voltage-regulator","title":"9. Voltage Regulator","text":"<p>AMS1117-3.3V Linear Regulator Module</p> <ul> <li>Quantity: 1</li> <li>Price: $1-2</li> <li>Specifications:<ul> <li>Input: 4.5V - 7V (or 3.3-6V for LDO version)</li> <li>Output: 3.3V @ 800mA</li> <li>Type: Linear LDO (Low Dropout)</li> <li>Package: SOT-223 or module with caps</li> </ul> </li> </ul> <p>Where to Buy:</p> Vendor Link Price AliExpress AMS1117 Module $1 Amazon HiLetgo AMS1117 $7 for 10-pack Adafruit Breadboard Regulator $1.95 <p>Alternative</p> <p>Many ESP32-C3 boards have built-in 3.3V regulation from 5V USB. If yours does, you can power LEDs from 5V USB and skip this component for USB-only operation.</p>"},{"location":"hardware/bill-of-materials/#enclosure-hardware","title":"Enclosure &amp; Hardware","text":""},{"location":"hardware/bill-of-materials/#10-enclosure","title":"10. Enclosure","text":"<p>3D Printed Case or Laser-Cut Acrylic Box</p> <ul> <li>Quantity: 1</li> <li>Price: $5-10 (materials) or $15-25 (printed/cut)</li> <li>Specifications:<ul> <li>Dimensions: 100\u00d760\u00d735mm (internal)</li> <li>Material: PLA, PETG, or 3mm acrylic</li> <li>Features: LED window, switch hole, USB access</li> </ul> </li> </ul> <p>Options:</p> Option Cost Time Notes 3D Print Yourself $3 6 hours Need 3D printer Print Service $15-25 3-5 days Use Shapeways, Craftcloud Laser Cut Service $20-30 3-5 days Use Ponoko, SendCutSend DIY Wood/Plastic $5 2 hours Hand tools + plastic box <p>Print Services:</p> <ul> <li>Craftcloud - Compare prices from 100+ services</li> <li>Shapeways - Professional finish</li> <li>3D Hubs - Local 3D printing</li> </ul> <p>Laser Cut Services:</p> <ul> <li>Ponoko - Upload SVG/DXF files</li> <li>SendCutSend - Metal and plastic</li> </ul> <p>DIY Enclosure Ideas:</p> <ol> <li>Plastic Project Box ($5 from Amazon/eBay)</li> <li>Hammond 1591 Enclosure ($8 from Mouser)</li> <li>Mint Tin (free! - Altoids tin)</li> <li>Wooden Box (craft store - $3-5)</li> </ol> <p>3D Model Files: Available in <code>/hardware/enclosure/</code> folder (STL files)</p>"},{"location":"hardware/bill-of-materials/#11-mounting-hardware","title":"11. Mounting Hardware","text":"<p>Screws, Standoffs, Nuts</p> <ul> <li>Quantity: Various</li> <li>Price: $3-5</li> <li>Specifications:<ul> <li>M3 screws (8-10mm length) \u00d7 4</li> <li>M3 hex standoffs (10mm) \u00d7 4</li> <li>M2 screws (6mm) for ESP32 \u00d7 2</li> </ul> </li> </ul> <p>Where to Buy:</p> Vendor Link Price AliExpress M3 Standoff Kit $3 Amazon Sutemribor 1080pcs Kit $16 Home Depot Loose screws $2"},{"location":"hardware/bill-of-materials/#optional-components","title":"Optional Components","text":""},{"location":"hardware/bill-of-materials/#for-enhanced-features","title":"For Enhanced Features","text":"Component Purpose Price Link Buzzer Audio feedback $1 AliExpress OLED Display Show time/status $5 Amazon I2C OLED DHT22 Sensor Temperature/humidity $3 Adafruit DHT22 Button Extra input $0.20 Tactile Button NFC Reader RFID for multi-user $8 PN532 Module"},{"location":"hardware/bill-of-materials/#tools-required","title":"Tools Required","text":"<p>You'll Need These Tools</p> <p>Not included in cost above - these are workshop tools you may already have:</p>"},{"location":"hardware/bill-of-materials/#essential-tools","title":"Essential Tools","text":"Tool Purpose Price Where Soldering Iron Solder components $15-50 Amazon Solder Join connections $5 60/40 Rosin Core Wire Strippers Strip wire insulation $8 Hardware store Flush Cutters Cut wires/leads $7 Amazon Multimeter Test voltage/continuity $12 Amazon USB-C Cable Program ESP32 $5 Any USB-C cable <p>Total Tool Cost: ~$50-100 (one-time investment, reusable for all projects)</p>"},{"location":"hardware/bill-of-materials/#nice-to-have","title":"Nice to Have","text":"<ul> <li>Third Hand/Helping Hands - Hold components while soldering ($10)</li> <li>Heat Shrink Tubing - Insulate connections ($5)</li> <li>Hot Glue Gun - Secure components ($8)</li> <li>Drill + Bits - Make holes in enclosure ($30)</li> <li>Label Maker - Mark connections ($15)</li> </ul>"},{"location":"hardware/bill-of-materials/#shopping-lists","title":"Shopping Lists","text":""},{"location":"hardware/bill-of-materials/#budget-option-35-total","title":"Budget Option (~$35 total)","text":"<p>Perfect for first build:</p> <ol> <li>ESP32-C3 from AliExpress: $3.50</li> <li>WS2812B LED Strip (1 meter): $2.00</li> <li>SPDT Toggle Switch: $0.50</li> <li>2000mAh LiPo Battery: $7.00</li> <li>TP4056 Charger (USB-C): $1.50</li> <li>AMS1117 Regulator Module: $1.00</li> <li>Wire Kit + Connectors: $5.00</li> <li>Resistor/Capacitor Kit: $3.00</li> <li>Plastic Project Box: $5.00</li> <li>M3 Hardware Kit: $3.00</li> <li>USB-C Cable: $3.00</li> </ol> <p>Subtotal: $34.50 Shipping: Free (3-4 weeks from China)</p>"},{"location":"hardware/bill-of-materials/#premium-option-80-total","title":"Premium Option (~$80 total)","text":"<p>Higher quality, faster shipping:</p> <ol> <li>ESP32-C3 from Adafruit: $9.95</li> <li>NeoPixel Strip from Adafruit: $10.00</li> <li>Quality Toggle Switch: $3.00</li> <li>Adafruit 2000mAh LiPo: $9.95</li> <li>Adafruit USB LiPo Charger: $7.50</li> <li>Regulator Module from Amazon: $2.00</li> <li>Premium Wire Kit: $14.00</li> <li>Component Kits: $10.00</li> <li>3D Printed Enclosure: $20.00</li> <li>Hardware Assortment: $10.00</li> <li>USB-C Cable: $5.00</li> </ol> <p>Subtotal: \\(101.40   **Shipping**: ~\\)10 (2-3 days domestic)</p>"},{"location":"hardware/bill-of-materials/#bulk-order-build-5-units","title":"Bulk Order (Build 5 units)","text":"<p>Save on per-unit cost:</p> <ul> <li>ESP32-C3 \u00d7 5: \\(17.50 (\\)3.50 each)</li> <li>LED Strips \u00d7 5m: \\(10 (\\)2 each)</li> <li>Switches \u00d7 10: \\(5 (\\)0.50 each)</li> <li>Batteries \u00d7 5: \\(35 (\\)7 each)</li> <li>Chargers \u00d7 5: \\(7.50 (\\)1.50 each)</li> <li>Regulators \u00d7 10: \\(10 (\\)1 each)</li> <li>Shared wire/component kits: $15</li> <li>Project boxes \u00d7 5: \\(25 (\\)5 each)</li> <li>Shared hardware: $10</li> </ul> <p>Total: \\(135 for 5 units = **\\)27 per unit** Savings: 25% vs buying individually</p>"},{"location":"hardware/bill-of-materials/#where-to-get-everything","title":"Where to Get Everything","text":""},{"location":"hardware/bill-of-materials/#local-shopping-in-lausanne-switzerland","title":"\ud83c\udde8\ud83c\udded Local Shopping in Lausanne, Switzerland","text":"<p>Physical Stores in Lausanne Area:</p> Store Location Speciality Website Digitec Galaxus Online + Z\u00fcrich Electronics, fast delivery digitec.ch Play Zone Centre Flon, Lausanne Electronics, Arduino kits playzone.ch Distrelec Online + pickup points Professional components distrelec.ch Brack Online, 1-2 day delivery Consumer electronics brack.ch <p>Maker Spaces in Lausanne (borrow tools, get help):</p> <ul> <li>FabLab EPFL - EPFL Campus (check EPFL website for current information)</li> <li>Location: EPFL Campus, B\u00e2timent MX</li> <li>Tools: 3D printers, soldering stations, laser cutters</li> <li>Open hours: Check website for schedule</li> <li> <p>Perfect for: Students with EPFL access</p> </li> <li> <p>Makerspace Renens - Near Lausanne</p> </li> <li>Location: Renens (15 min from Lausanne)</li> <li>Tools: Full workshop access</li> <li>Community: Meetups and workshops</li> </ul>"},{"location":"hardware/bill-of-materials/#european-suppliers-fast-shipping-to-switzerland","title":"European Suppliers (Fast Shipping to Switzerland)","text":"<p>Germany (2-3 day delivery):</p> Vendor Speciality Shipping Website Reichelt Complete electronics CHF 9, free &gt;CHF 80 reichelt.com Conrad Electronic Professional components CHF 8, free &gt;CHF 50 conrad.ch Berrybase Raspberry Pi &amp; ESP32 CHF 10 berrybase.de Eckstein Arduino &amp; makers CHF 7 eckstein-shop.de <p>France (2-4 day delivery):</p> Vendor Speciality Shipping Website Kubii Maker components CHF 12 kubii.fr GoTronic Electronics kits CHF 10 gotronic.fr <p>UK (3-5 days, customs possible):</p> Vendor Speciality Shipping Website Pimoroni Quality maker products \u00a310-15 + customs pimoroni.com The Pi Hut Raspberry Pi ecosystem \u00a38-12 + customs thepihut.com <p>Brexit &amp; Customs</p> <p>Orders from UK may incur: - Import VAT (7.7% in Switzerland) - Customs clearance fee (CHF 11-18) - Consider ordering from EU instead</p>"},{"location":"hardware/bill-of-materials/#budget-options","title":"Budget Options","text":"<p>AliExpress (cheapest, 3-4 weeks):</p> <ul> <li>Search: \"ESP32-C3 kit\"</li> <li>Order from seller with good ratings (&gt;95%)</li> <li>Price: CHF 25-35 with free shipping</li> <li>Swiss customs: Orders &gt;CHF 62 incur VAT + CHF 18 processing</li> <li>Best for: Budget builds, patient buyers</li> </ul> <p>Bangood (alternative to AliExpress):</p> <ul> <li>Similar prices and shipping times</li> <li>Sometimes better shipping to Switzerland</li> <li>Price: CHF 30-40 including shipping</li> </ul>"},{"location":"hardware/bill-of-materials/#recommended-shopping-plan-for-lausanne","title":"Recommended Shopping Plan for Lausanne","text":"<p>Option 1: Fast Build (2-3 days, CHF 90)</p> <ol> <li>Digitec Galaxus (order online, delivered to Lausanne):</li> <li>ESP32-C3 DevKit: CHF 15</li> <li>WS2812B LED Strip (1m): CHF 12</li> <li>LiPo Battery 2000mAh: CHF 18</li> <li>USB-C cables and connectors: CHF 10</li> <li> <p>Shipping: Free over CHF 50</p> </li> <li> <p>Conrad.ch (online or store in Geneva):</p> </li> <li>TP4056 Charger Module: CHF 8</li> <li>AMS1117 Regulator: CHF 3</li> <li>Toggle Switch: CHF 5</li> <li>Wire kit: CHF 12</li> <li>Resistor/Capacitor kit: CHF 8</li> <li> <p>Shipping: Free over CHF 50</p> </li> <li> <p>FabLab EPFL or local hardware store:</p> </li> <li>Enclosure materials: CHF 8-15</li> <li>Screws/standoffs: CHF 5</li> </ol> <p>Total: ~CHF 90-100 (Available in 2-3 days)</p> <p>Option 2: Budget Build (3-4 weeks, CHF 40)</p> <ol> <li>AliExpress (single order to avoid multiple customs):</li> <li>ESP32-C3 kit with LEDs: CHF 15</li> <li>2000mAh LiPo + TP4056 charger: CHF 10</li> <li>Complete component kit: CHF 8</li> <li>Project box: CHF 5</li> <li> <p>Shipping: Free</p> </li> <li> <p>Local hardware store (Landi, Jumbo):</p> </li> <li>Screws/standoffs: CHF 3-5</li> </ol> <p>Total: ~CHF 40-45 (Wait 3-4 weeks)</p> <p>Option 3: Premium Build (1-2 days, CHF 150)</p> <p>Visit FabLab EPFL + Digitec: - All components from Swiss suppliers - Professional quality parts - Workshop access for assembly - Community support</p> <p>Total: ~CHF 150 (Same/next day)</p>"},{"location":"hardware/bill-of-materials/#price-comparison-in-chf","title":"Price Comparison (in CHF)","text":"Component AliExpress Digitec/Conrad Adafruit (import) ESP32-C3 CHF 4 CHF 15 CHF 18 LED Strip CHF 2 CHF 12 CHF 20 LiPo Battery CHF 7 CHF 18 CHF 25 Charger CHF 2 CHF 8 CHF 15 Other parts CHF 10 CHF 25 CHF 30 Subtotal CHF 25 CHF 78 CHF 108 Shipping Free (slow) CHF 0-12 CHF 20-30 Customs/VAT CHF 0-5 CHF 0 CHF 18-25 TOTAL CHF 25-30 CHF 78-90 CHF 146-163 Delivery 3-4 weeks 1-3 days 1-2 weeks"},{"location":"hardware/bill-of-materials/#swiss-tax-customs-information","title":"Swiss Tax &amp; Customs Information","text":"<p>Import Rules</p> <ul> <li>Tax-free limit: CHF 62 (including shipping)</li> <li>VAT rate: 7.7% on (value + shipping)</li> <li>Processing fee: CHF 11.50-18.00 (Swiss Post)</li> <li>Customs declaration: Required for all imports</li> <li>Pro tip: Split orders to stay under CHF 62</li> </ul> <p>Example calculation for CHF 80 order: <pre><code>Order value:        CHF 80.00\nShipping:          CHF 10.00\nSubtotal:          CHF 90.00\nVAT (7.7%):        CHF  6.93\nProcessing fee:    CHF 18.00\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nTOTAL:             CHF 114.93\n</code></pre></p>"},{"location":"hardware/bill-of-materials/#regional-options-other-countries","title":"Regional Options (Other Countries)","text":"<p>Other Europe: - Pimoroni (UK) - Quality products, Brexit customs - Mouser (Switzerland) - Professional components - Farnell (Switzerland) - Industrial supplier</p> <p>Asia: - Taobao (China - cheapest!) - Tokopedia (Indonesia) - Lazada (Southeast Asia)</p> <p>Australia: - Core Electronics - Little Bird Electronics</p> <p>Americas: - Adafruit (USA) - High shipping + customs - SparkFun (USA) - High shipping + customs - Amazon.de (Germany) - Ships to Switzerland</p>"},{"location":"hardware/bill-of-materials/#next-steps","title":"Next Steps","text":"<p>Got your parts? Great! Continue to:</p> <ul> <li>Hardware Specifications - Detailed technical specs</li> <li>Enclosure Design - Build the box</li> <li>Assembly Guide - Start building!</li> </ul> <p>Questions about components?</p> <ul> <li>Check component specifications in Hardware Specifications</li> <li>Ask in GitHub Discussions</li> </ul>"},{"location":"hardware/enclosure-design/","title":"Enclosure Design","text":"<p>Design guidelines, dimensions, and options for the Wall Clock In Machine enclosure.</p>"},{"location":"hardware/enclosure-design/#goals","title":"Goals","text":"<ul> <li>Clean, compact desktop form factor</li> <li>One main button on top/front</li> <li>LEDs visible from typical seating position</li> <li>Easy access to USB-C charging</li> <li>Safe mounting for battery</li> </ul>"},{"location":"hardware/enclosure-design/#recommended-dimensions","title":"Recommended Dimensions","text":"<ul> <li>Overall: 100 x 60 x 35 mm (W x D x H)</li> <li>Button hole: 16 mm (for panel-mount button)</li> <li>LED window: 8 x 70 mm light strip diffuser</li> <li>USB-C cutout: 9 x 6 mm</li> </ul>"},{"location":"hardware/enclosure-design/#materials","title":"Materials","text":"<ul> <li>3D printed PLA or PETG (2 mm walls)</li> <li>Acrylic diffuser for LEDs (1-2 mm)</li> <li>Brass heat inserts for screws (M3)</li> </ul>"},{"location":"hardware/enclosure-design/#layout","title":"Layout","text":"<pre><code>[ Button ]   [ LED window ]\n\n[ ESP32 ] [ Battery ] [ Charger ]  (inside, mounted on standoffs)\n</code></pre>"},{"location":"hardware/enclosure-design/#mounting","title":"Mounting","text":"<ul> <li>Use M3 standoffs (8-12 mm) for the ESP32 board</li> <li>Battery secured with Velcro and a strap</li> <li>Cable management using adhesive tie mounts</li> </ul>"},{"location":"hardware/enclosure-design/#3d-printing","title":"3D Printing","text":"<ul> <li>Layer height: 0.2 mm</li> <li>Infill: 20-30%</li> <li>Supports: For USB-C cutout and button hole as needed</li> <li>Print time: 3-5 hours depending on printer</li> </ul>"},{"location":"hardware/enclosure-design/#assembly-order","title":"Assembly Order","text":"<ol> <li>Insert brass heat inserts into bottom shell</li> <li>Mount ESP32 and charger board</li> <li>Place LED strip and diffuser</li> <li>Route wiring; test electronics</li> <li>Secure battery</li> <li>Close top shell; install button</li> </ol>"},{"location":"hardware/enclosure-design/#alternatives","title":"Alternatives","text":"<ul> <li>Laser-cut acrylic sandwich design</li> <li>Off-the-shelf plastic project box (Hammond 1551 series)</li> <li>Wooden enclosure for premium look</li> </ul>"},{"location":"hardware/enclosure-design/#files-and-models","title":"Files and Models","text":"<ul> <li>STL/STEP: Coming soon (to be added under <code>hardware/enclosure/</code>)</li> </ul> <p>See also: Wiring Diagram, Soldering, Final Testing</p>"},{"location":"hardware/overview/","title":"Hardware Overview","text":"<p>Welcome to the hardware section! This page explains the physical components that make the Wall Clock In Machine work.</p>"},{"location":"hardware/overview/#system-architecture","title":"System Architecture","text":"<p>The device consists of five main subsystems working together:</p> <pre><code>graph TD\n    A[User] --&gt; B[Button/Switch]\n    B --&gt; C[ESP32-C3 Brain]\n    C --&gt; D[LED Display]\n    C --&gt; E[WiFi Module]\n    C --&gt; F[Power System]\n    F --&gt; C\n    E --&gt; G[Internet/API]\n\n    style C fill:#6366f1\n    style D fill:#ef4444\n    style E fill:#3b82f6\n    style F fill:#22c55e</code></pre>"},{"location":"hardware/overview/#1-input-system-buttonswitch","title":"1. Input System (Button/Switch)","text":"<p>Component: SPDT Toggle Switch</p> <p>The input is a mechanical toggle switch that can be in one of two stable positions:</p> <ul> <li>Down Position = Clocked In (Working)</li> <li>Up Position = Clocked Out (Not Working)</li> </ul> <p>Why a toggle switch instead of a button?</p> <ul> <li>Physical state matches work state (no confusion)</li> <li>Accidental presses don't cause false triggers</li> <li>Tactile feedback confirms action</li> <li>No software state confusion after reboot</li> </ul> <p>Technical Details:</p> <ul> <li>Type: Single Pole Double Throw (SPDT)</li> <li>Rating: 3A @ 125VAC</li> <li>Actuation Force: 200-300g</li> <li>Lifecycle: 100,000+ operations</li> <li>Connected to GPIO pin with internal pull-up resistor</li> <li>No external resistors needed</li> </ul>"},{"location":"hardware/overview/#2-processing-unit-esp32-c3","title":"2. Processing Unit (ESP32-C3)","text":"<p>Component: ESP32-C3-DevKit-M-1</p> <p>The \"brain\" of the device is a modern RISC-V microcontroller:</p> <p>Key Features:</p> <ul> <li>32-bit RISC-V processor @ 160MHz</li> <li>400KB SRAM for program execution</li> <li>4MB Flash for code and data storage</li> <li>WiFi 802.11 b/g/n (2.4GHz)</li> <li>Bluetooth 5.0 LE (future expansion)</li> <li>22 GPIO pins (plenty for expansion)</li> <li>Native USB-C (no UART adapter needed)</li> <li>Deep Sleep Mode @ 5\u00b5A (battery efficiency)</li> </ul> <p>Why ESP32-C3?</p> Requirement ESP32-C3 Alternatives WiFi \u2705 Built-in Arduino Uno + Shield $30 Low Power \u2705 5\u00b5A sleep Raspberry Pi Zero: 100mA USB Programming \u2705 Native ESP8266 needs adapter Cost \u2705 $4 Arduino Nano 33 IoT: $25 Community \u2705 Massive New boards lack support <p>Pinout Overview:</p> <pre><code>                ESP32-C3\n           \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n     3V3 \u2500\u2500\u2524 1         21 \u251c\u2500\u2500 GND\n BUTTON \u2500\u2500\u2524 2         20 \u251c\u2500\u2500 (unused)\n    LED \u2500\u2500\u2524 3         19 \u251c\u2500\u2500 USB-\n     EN \u2500\u2500\u2524 4         18 \u251c\u2500\u2500 USB+\n    GND \u2500\u2500\u2524 5         17 \u251c\u2500\u2500 (unused)\n   (nc) \u2500\u2500\u2524 6         16 \u251c\u2500\u2500 (nc)\n   ...              ...\n           \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"hardware/overview/#3-visual-feedback-system-leds","title":"3. Visual Feedback System (LEDs)","text":"<p>Component: WS2812B Addressable LED Strip</p> <p>8 individually controllable RGB LEDs provide:</p> <ol> <li>Status LED (LED 0): Shows current state</li> <li>Energy Meter (LEDs 1-7): Work session duration</li> </ol> <p>LED Technology:</p> <ul> <li>Addressable: Each LED can be different color</li> <li>RGB: 16.7 million color combinations</li> <li>Chainable: Single data pin controls all</li> <li>Brightness: 0-255 levels per channel</li> <li>Power: ~60mA per LED at full white</li> </ul> <p>Why WS2812B?</p> <ul> <li>Single GPIO pin controls 8 LEDs</li> <li>No resistors or complex wiring</li> <li>Smooth animations possible</li> <li>Standard in maker community</li> <li>Cheap: $2 for 8 LEDs</li> </ul> <p>Color Scheme:</p> State Status LED Meaning \ud83d\udd34 Red Solid Clocked Out (Idle) \ud83d\udfe2 Green Solid Clocked In (Working) \ud83d\udd35 Blue Pulsing Connecting to WiFi \ud83d\udfe1 Yellow Pulsing API Communication \ud83d\udfe3 Purple Flash Configuration Mode \ud83c\udf08 Rainbow Animation Workday Complete! <p>Energy Meter Colors:</p> <pre><code>Hours:    0-1    1-3    3-5    5-7    7-8    8+\nColor:   Green \u2192 \u2192 \u2192 Yellow \u2192 \u2192 Orange \u2192 Red\n</code></pre>"},{"location":"hardware/overview/#4-connectivity-system-wifi","title":"4. Connectivity System (WiFi)","text":"<p>Component: Built into ESP32-C3</p> <p>WiFi Specifications:</p> <ul> <li>Protocol: 802.11 b/g/n (2.4GHz only)</li> <li>Security: WPA/WPA2/WPA3</li> <li>Range: 50-100m line-of-sight</li> <li>Power: 120mA during transmission</li> <li>Deep sleep: 5\u00b5A when idle</li> </ul> <p>Configuration Portal:</p> <p>On first boot, the device creates a WiFi network:</p> <pre><code>Network Name: WallClockIn_XXXXXX\nPassword: (none - open network)\nPortal: http://192.168.4.1\n</code></pre> <p>Connect to this network and configure:</p> <ul> <li>Your WiFi network name (SSID)</li> <li>WiFi password</li> <li>API endpoint URL</li> </ul> <p>Settings stored in flash memory (survives reboots).</p> <p>API Communication:</p> <ul> <li>Protocol: HTTPS (TLS/SSL)</li> <li>Method: REST API (JSON)</li> <li>Endpoints: <code>/api/timer/start</code>, <code>/api/timer/stop</code></li> <li>Retry Logic: 3 attempts with exponential backoff</li> <li>Timeout: 10 seconds per request</li> </ul>"},{"location":"hardware/overview/#5-power-system","title":"5. Power System","text":"<p>Components: LiPo Battery + Charger + Regulator</p>"},{"location":"hardware/overview/#battery-2000mah-lipo","title":"Battery (2000mAh LiPo)","text":"<ul> <li>Type: Lithium Polymer</li> <li>Voltage: 3.7V nominal (4.2V full, 3.0V empty)</li> <li>Capacity: 2000mAh</li> <li>Form Factor: 503450 (50\u00d734\u00d75mm)</li> <li>Weight: 15g</li> <li>Lifecycle: 500+ charge cycles</li> </ul> <p>Runtime Calculation:</p> <pre><code>Average Current:\n- ESP32-C3 active: 80mA\n- ESP32-C3 sleep: 0.005mA (5\u00b5A)\n- LEDs idle: 5mA (dim status LED)\n- LEDs active: 60mA (8 LEDs at 1/4 brightness)\n\nDuty Cycle (typical day):\n- 5 minutes active (button press, API call)\n- 8 hours working (LED on)\n- Rest of day in deep sleep\n\nAverage: ~15mAh per day\nBattery Life: 2000mAh / 15mAh = 133 hours = 10-14 days\n</code></pre>"},{"location":"hardware/overview/#charger-tp4056","title":"Charger (TP4056)","text":"<ul> <li>Input: USB-C, 5V</li> <li>Output: 4.2V (LiPo charging)</li> <li>Current: 1A max (configurable with resistor)</li> <li>Protection: Overcurrent, overvoltage, undervoltage</li> <li>Indicator LEDs: Red (charging), Green (full)</li> <li>Charge Time: 2-3 hours for 2000mAh</li> </ul>"},{"location":"hardware/overview/#voltage-regulator-ams1117-33","title":"Voltage Regulator (AMS1117-3.3)","text":"<ul> <li>Input: 3.0V - 5.0V (from battery or USB)</li> <li>Output: 3.3V (stable for ESP32-C3)</li> <li>Current: 800mA max</li> <li>Dropout: 1.1V</li> <li>Protection: Thermal shutdown, current limiting</li> </ul> <p>Power Flow:</p> <pre><code>USB-C \u2500\u2500\u2192 TP4056 \u2500\u2500\u2192 Battery \u2500\u2500\u2192 AMS1117 \u2500\u2500\u2192 ESP32-C3\n   5V      Charger    3.7V     Regulator    3.3V\n</code></pre>"},{"location":"hardware/overview/#physical-specifications","title":"Physical Specifications","text":""},{"location":"hardware/overview/#enclosure-dimensions","title":"Enclosure Dimensions","text":"<pre><code>   100mm\n  \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n  \u2502     \u2502 60mm\n  \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n  Height: 35mm\n</code></pre> <ul> <li>Volume: 210 cm\u00b3</li> <li>Weight: 85g (with battery)</li> <li>Material: 3D printed PLA or laser-cut acrylic</li> </ul>"},{"location":"hardware/overview/#component-layout","title":"Component Layout","text":"<pre><code>Top View:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   [LED Strip]       \u2502\n\u2502                     \u2502\n\u2502     \u250c\u2500\u2500\u2500\u2500\u2500\u2510         \u2502\n\u2502     \u2502 ESP \u2502         \u2502\n\u2502     \u2514\u2500\u2500\u2500\u2500\u2500\u2518         \u2502\n\u2502                     \u2502\n\u2502    [Battery]        \u2502\n\u2502                     \u2502\n\u2502   \u2610 [Switch]        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nSide View:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 LED | ESP | Battery \u2502 \u2190 35mm height\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"hardware/overview/#component-specifications-summary","title":"Component Specifications Summary","text":"Component Model Voltage Current Cost Microcontroller ESP32-C3-DevKit-M-1 3.3V 80mA avg $4 LED Strip WS2812B (8 LEDs) 5V 60mA max $2 Switch SPDT Toggle 3.3V &lt;1mA $1 Battery LiPo 503450 2000mAh 3.7V - $8 Charger TP4056 Module 5V in 1A $2 Regulator AMS1117-3.3 3.0-5V 800mA $1 Connectors JST-PH 2.0 - - $3 Enclosure 3D Printed PLA - - $5 USB Cable USB-C 5V - $3 Misc Wires, Solder - - $2 TOTAL $31"},{"location":"hardware/overview/#safety-features","title":"Safety Features","text":""},{"location":"hardware/overview/#overcurrent-protection","title":"Overcurrent Protection","text":"<ul> <li>TP4056 limits charge current to 1A</li> <li>AMS1117 has built-in current limiting</li> <li>Battery has internal protection circuit</li> </ul>"},{"location":"hardware/overview/#thermal-protection","title":"Thermal Protection","text":"<ul> <li>AMS1117 shuts down at 150\u00b0C</li> <li>ESP32-C3 throttles at 85\u00b0C</li> <li>Battery disconnects at 80\u00b0C</li> </ul>"},{"location":"hardware/overview/#voltage-protection","title":"Voltage Protection","text":"<ul> <li>TP4056 prevents overcharging (&gt;4.2V)</li> <li>TP4056 prevents overdischarge (&lt;3.0V)</li> <li>Reverse polarity protection on battery connector</li> </ul>"},{"location":"hardware/overview/#software-protections","title":"Software Protections","text":"<ul> <li>Watchdog timer resets frozen firmware</li> <li>Deep sleep prevents battery drain</li> <li>API timeout prevents hung connections</li> </ul>"},{"location":"hardware/overview/#expandability","title":"Expandability","text":"<p>The design includes expansion options:</p>"},{"location":"hardware/overview/#available-gpio-pins","title":"Available GPIO Pins","text":"<ul> <li>6 unused GPIO pins for sensors/buttons</li> <li>I2C interface for displays/sensors</li> <li>SPI interface for SD cards/screens</li> <li>ADC pins for analog sensors</li> </ul>"},{"location":"hardware/overview/#potential-expansions","title":"Potential Expansions","text":"<ol> <li>Temperature/Humidity Sensor (DHT22) - track office conditions</li> <li>OLED Display (128\u00d764) - show time/status</li> <li>Buzzer - audio feedback</li> <li>Motion Sensor (PIR) - auto clock-out</li> <li>NFC Reader - multi-user support</li> <li>Battery Gauge (MAX17048) - precise battery %</li> </ol>"},{"location":"hardware/overview/#bluetooth-capabilities","title":"Bluetooth Capabilities","text":"<p>ESP32-C3 includes Bluetooth 5.0 LE:</p> <ul> <li>Future mobile app for configuration</li> <li>BLE beacons for proximity detection</li> <li>Mesh networking for multi-device setups</li> </ul>"},{"location":"hardware/overview/#next-steps","title":"Next Steps","text":"<p>Ready to build? Continue to:</p> <ul> <li>Bill of Materials - Shopping list with links</li> <li>Specifications - Detailed technical specs</li> <li>Enclosure Design - 3D model and dimensions</li> </ul> <p>Or jump ahead to:</p> <ul> <li>Assembly Guide - Start building!</li> </ul>"},{"location":"hardware/specifications/","title":"Hardware Specifications","text":"<p>Detailed technical specifications for all components in the Wall Clock In Machine.</p>"},{"location":"hardware/specifications/#system-overview","title":"System Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502               Wall Clock In Machine                  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                      \u2502\n\u2502  Input      \u2500\u2500\u2192  Processing  \u2500\u2500\u2192  Output            \u2502\n\u2502  Toggle         ESP32-C3        8\u00d7 RGB LEDs         \u2502\n\u2502  Switch         RISC-V          WS2812B             \u2502\n\u2502                 160MHz                               \u2502\n\u2502                                                      \u2502\n\u2502  Power: 3.7V LiPo \u2500\u2500\u2192 3.3V Regulated               \u2502\n\u2502         2000mAh        AMS1117                      \u2502\n\u2502                                                      \u2502\n\u2502  Connectivity: WiFi 802.11 b/g/n                    \u2502\n\u2502                HTTPS API Calls                       \u2502\n\u2502                                                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"hardware/specifications/#1-microcontroller-esp32-c3","title":"1. Microcontroller (ESP32-C3)","text":""},{"location":"hardware/specifications/#core-specifications","title":"Core Specifications","text":"Parameter Value Notes CPU RISC-V 32-bit Single core @ 160MHz Architecture RISC-V RV32IMC Open source architecture SRAM 400 KB For program execution ROM 384 KB Boot code Flash 4 MB External SPI flash Clock Speed 160 MHz Adjustable down to 2MHz FPU No Integer only Cache 16KB I-Cache, 16KB D-Cache Improves performance"},{"location":"hardware/specifications/#wireless","title":"Wireless","text":"Parameter Value Notes WiFi 802.11 b/g/n 2.4GHz only, no 5GHz WiFi Modes Station, AP, Station+AP We use Station mode WiFi Security WPA/WPA2/WPA3 Modern security Bluetooth BLE 5.0 Not used in current firmware Max TX Power 20.5 dBm ~100mW RX Sensitivity -97 dBm Good reception Range 50-100m Line of sight"},{"location":"hardware/specifications/#gpio-peripherals","title":"GPIO &amp; Peripherals","text":"Parameter Value Notes GPIO Pins 22 total 15 usable (some reserved) ADC 6 channels, 12-bit 0-3.3V range PWM 6 channels LED dimming SPI 3 interfaces For flash, external devices I2C 1 interface For sensors, displays UART 2 interfaces Serial communication USB 1\u00d7 USB 2.0 OTG Native USB-C Touch Sensors 14 channels Capacitive touch RTC Yes Real-time clock for timekeeping Watchdog Timer Yes Auto-reset on hang"},{"location":"hardware/specifications/#power-consumption","title":"Power Consumption","text":"Mode Current Voltage Power Use Case Active (WiFi TX) 120mA 3.3V 396mW Sending API request Active (WiFi RX) 100mA 3.3V 330mW Receiving API response Active (CPU only) 25mA 3.3V 82.5mW Processing, no WiFi Modem Sleep 15mA 3.3V 49.5mW WiFi off, CPU active Light Sleep 1.8mA 3.3V 5.9mW CPU paused, RAM retained Deep Sleep 5\u00b5A 3.3V 16.5\u00b5W \u2b50 Used when idle Hibernation 2.5\u00b5A 3.3V 8.25\u00b5W RTC + minimal RAM <p>Our Usage Pattern: - Deep sleep 95% of time: 5\u00b5A - Active 5% of time (button press, API, LED): ~80mA average - Blended average: ~15mA over 24 hours</p>"},{"location":"hardware/specifications/#memory-map","title":"Memory Map","text":"<pre><code>0x4000_0000 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n            \u2502  Internal ROM   \u2502  384KB\n0x4006_0000 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n            \u2502  Internal SRAM  \u2502  400KB\n0x400C_4000 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n            \u2502  External Flash \u2502  4MB\n0x4200_0000 \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n            \u2502  Memory-mapped  \u2502\n            \u2502  peripherals    \u2502\n0xFFFF_FFFF \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"hardware/specifications/#temperature-environmental","title":"Temperature &amp; Environmental","text":"Parameter Value Notes Operating Temp -40\u00b0C to +85\u00b0C Industrial grade Storage Temp -40\u00b0C to +125\u00b0C When powered off Humidity 5% to 95% RH Non-condensing ESD Protection 2kV HBM Human body model"},{"location":"hardware/specifications/#pin-configuration-our-usage","title":"Pin Configuration (Our Usage)","text":"GPIO Pin Function Connection Notes GPIO2 Digital Input Toggle Switch Pull-up enabled GPIO3 Digital Output WS2812B Data 5V tolerant with resistor GPIO9 USB D- USB Data Reserved for USB GPIO8 USB D+ USB Data Reserved for USB EN Reset Reset Button Active low GND Ground Ground plane Multiple pins 3V3 Power Output 3.3V supply 600mA max 5V Power Input USB 5V Only when USB connected <p>Unused Pins (available for expansion): - GPIO0, 1, 4, 5, 6, 7, 10, 18, 19 (9 pins free!)</p>"},{"location":"hardware/specifications/#2-led-strip-ws2812b","title":"2. LED Strip (WS2812B)","text":""},{"location":"hardware/specifications/#electrical-specifications","title":"Electrical Specifications","text":"Parameter Value Notes LED Type WS2812B Integrated controller + RGB LED Package 5050 SMD 5.0\u00d75.0mm IC Protocol Single-wire serial 800kHz Voltage 5V \u00b10.5V Can work at 3.7V (dimmer) Current per LED 60mA max At full white (R+G+B=255) Current typical 20mA At \u2153 brightness Power per LED 0.3W max Full brightness PWM Frequency 400Hz Flicker-free Color Depth 8-bit per channel 16.7M colors (256\u00b3)"},{"location":"hardware/specifications/#optical-specifications","title":"Optical Specifications","text":"Parameter Value Notes Red 620-625nm Dominant wavelength Green 515-525nm Dominant wavelength Blue 465-475nm Dominant wavelength Luminous Intensity Red: 550-700mcd At 20mA Green: 1100-1400mcd At 20mA Blue: 200-400mcd At 20mA Viewing Angle 120\u00b0 Wide dispersion"},{"location":"hardware/specifications/#timing-requirements","title":"Timing Requirements","text":"Parameter Value Tolerance T0H (0 bit high) 0.4\u00b5s \u00b1150ns T0L (0 bit low) 0.85\u00b5s \u00b1150ns T1H (1 bit high) 0.8\u00b5s \u00b1150ns T1L (1 bit low) 0.45\u00b5s \u00b1150ns Reset &gt;50\u00b5s Low signal <p>Data Format: <pre><code>Each LED: 24 bits (GRB order)\nBit 0:    High for 0.4\u00b5s, Low for 0.85\u00b5s\nBit 1:    High for 0.8\u00b5s, Low for 0.45\u00b5s\n\nExample: Green=255, Red=0, Blue=0\nData: [11111111][00000000][00000000]\n      \u2191Green    \u2191Red      \u2191Blue\n</code></pre></p>"},{"location":"hardware/specifications/#power-budget-8-leds","title":"Power Budget (8 LEDs)","text":"Scenario Current Power Notes All off 1mA 5mW Quiescent current 1 LED dim (10%) 6mA 30mW Status indicator 7 LEDs medium (25%) 105mA 525mW Energy meter All LEDs full white 480mA 2.4W Rainbow celebration Typical usage 60mA 300mW Status + 50% meter <p>Voltage Drop Consideration: - Long LED strips: Voltage drops 0.5V per meter - Our 8 LEDs: Negligible drop (&lt;0.1V) - No need for power injection</p>"},{"location":"hardware/specifications/#3-toggle-switch","title":"3. Toggle Switch","text":""},{"location":"hardware/specifications/#mechanical-specifications","title":"Mechanical Specifications","text":"Parameter Value Notes Type SPDT Single Pole, Double Throw Positions 2 (ON-ON) Both stable Actuation Force 200-300g Tactile feedback Contact Resistance &lt;50m\u03a9 Low resistance Insulation Resistance &gt;100M\u03a9 High isolation Dielectric Strength 1000VAC Safety Mechanical Life 100,000 cycles Very durable Electrical Rating 3A @ 125VAC Overkill for 3.3V Mounting Panel mount 6mm threaded bushing"},{"location":"hardware/specifications/#contact-configuration","title":"Contact Configuration","text":"<pre><code>         \u250c\u2500\u2500\u2500 COM (Common)\n    ON   \u2502\n  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500 NC (Normally Closed)\n  \u2502      \u2502\n  \u2502      \u2514\u2500\u2500\u2500\u2500 NO (Normally Open)\n  \u2502\n  \u2514\u2500 ON position 2\n\nOur wiring:\n  COM \u2192 GPIO2 (ESP32)\n  NC  \u2192 Not connected\n  NO  \u2192 GND\n</code></pre> <p>Switch States: - UP position: COM disconnected from GND \u2192 GPIO reads HIGH (3.3V) \u2192 Clocked Out - DOWN position: COM connected to GND \u2192 GPIO reads LOW (0V) \u2192 Clocked In</p>"},{"location":"hardware/specifications/#debouncing","title":"Debouncing","text":"<p>Mechanical switches \"bounce\" when toggled:</p> <pre><code>Ideal:     \u2500\u2500\u2500\u2510              \u250c\u2500\u2500\u2500\n              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nReality:   \u2500\u2500\u2500\u2510\u2510\u2510\u2510           \u250c\u2510\u250c\u250c\u2500\u2500\n              \u2514\u2518\u2514\u2518\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2518\n              \u2191 Bouncing (5-20ms)\n</code></pre> <p>Software debouncing in firmware: - Read switch state - Wait 50ms - Read again to confirm - Only register if stable</p>"},{"location":"hardware/specifications/#4-battery-lipo","title":"4. Battery (LiPo)","text":""},{"location":"hardware/specifications/#electrical-specifications_1","title":"Electrical Specifications","text":"Parameter Value Notes Chemistry Lithium Polymer LiPo Nominal Voltage 3.7V Average during discharge Fully Charged 4.2V Maximum safe voltage Discharged 3.0V Minimum safe voltage Capacity 2000mAh At 0.2C discharge rate Discharge Rate 1C typical 2A continuous Max Discharge 2C burst 4A for 10 seconds Charge Rate 1C max 2A charging Internal Resistance 80-120m\u03a9 Affects efficiency Cycle Life 500 cycles To 80% capacity"},{"location":"hardware/specifications/#physical-specifications","title":"Physical Specifications","text":"Parameter Value Notes Form Factor 503450 50\u00d734\u00d75mm (LxWxH) Weight 15g Lightweight Connector JST-PH 2.0 2-pin, 2.0mm pitch Protection Built-in PCM Protects against abuse"},{"location":"hardware/specifications/#discharge-curve","title":"Discharge Curve","text":"<pre><code>Voltage vs. Capacity\n4.2V \u2524\u25cf\n     \u2502 \u2572\n4.0V \u2524  \u2572___\n     \u2502      \u2572___\n3.7V \u2524          \u2500\u2500\u2500___\n     \u2502                \u2572___\n3.3V \u2524                    \u2572___\n     \u2502                        \u2572___\n3.0V \u2524                            \u25cf\n     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n     0%                         100%\n         Discharged Capacity\n</code></pre> <p>Voltage to Percentage (approximate): - 4.2V = 100% - 4.0V = 90% - 3.9V = 80% - 3.8V = 60% - 3.7V = 40% - 3.6V = 20% - 3.3V = 5% - 3.0V = 0%</p>"},{"location":"hardware/specifications/#runtime-calculation","title":"Runtime Calculation","text":"<p>Average current consumption: <pre><code>Deep sleep (23h 55min):  5\u00b5A \u00d7 23.92h = 0.12mAh\nActive (5 min/day):      80mA \u00d7 0.08h = 6.4mAh\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nTotal per day:                          6.52mAh\n\nBattery capacity:        2000mAh\nDays per charge:         2000 / 6.52 = 307 days\n</code></pre></p> <p>Wait, 307 days? Not quite! Reality factors:</p> <ul> <li>LED usage during work hours: +10mAh/day</li> <li>WiFi reconnections: +5mAh/day</li> <li>API calls: +2mAh/day</li> <li>Efficiency losses: +5mAh/day</li> <li>Self-discharge: ~1%/month</li> </ul> <p>Realistic runtime: 10-14 days per charge</p>"},{"location":"hardware/specifications/#safety-features-pcm","title":"Safety Features (PCM)","text":"<p>Built-in Protection Circuit Module prevents:</p> Protection Threshold Action Overcharge &gt;4.25V Disconnect charging Overdischarge &lt;2.5V Disconnect load Overcurrent &gt;3A Disconnect temporarily Short circuit &lt;0.1\u03a9 Disconnect immediately Over-temperature &gt;80\u00b0C Disconnect all"},{"location":"hardware/specifications/#charging-profile","title":"Charging Profile","text":"<pre><code>Current/Voltage vs. Time\n\n4.2V \u2524              ___________\n     \u2502            \u2571\n     \u2502          \u2571  Constant Voltage\n3.7V \u2524        \u2571\n     \u2502    \u2571\u2571\u2571\u2571  Constant Current\n     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n     0h   1h   2h   3h   4h\n\nCurrent:\n1.0A \u2524\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2572\n     \u2502         \u2572___\n     \u2502             \u2572___\n0.1A \u2524                 \u2572___\n     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n     0h   1h   2h   3h   4h\n</code></pre> <p>Stages: 1. Constant Current (0-2h): Charge at 1A until 4.2V 2. Constant Voltage (2-3h): Hold 4.2V, current tapers 3. Termination: Stop when current &lt;0.1A (100mA)</p>"},{"location":"hardware/specifications/#5-charger-tp4056","title":"5. Charger (TP4056)","text":""},{"location":"hardware/specifications/#electrical-specifications_2","title":"Electrical Specifications","text":"Parameter Value Notes Input Voltage 4.5-5.5V USB power Input Current 1A max Configurable Charge Voltage 4.2V \u00b11% Precise regulation Charge Current 1A default Set by RPROG resistor Charge Termination 0.1A 10% of charge current Efficiency 85% Heat generation Dropout Voltage 0.5V Vout = Vin - 0.5V Standby Current &lt;2\u00b5A When not charging"},{"location":"hardware/specifications/#protection-features","title":"Protection Features","text":"Feature Threshold Notes Over-temperature 120\u00b0C Thermal shutdown Input Overvoltage &gt;6.5V Protection Output Overvoltage &gt;4.3V Battery protection Reverse Battery Yes Prevents damage Charge Timer Optional Safety timeout"},{"location":"hardware/specifications/#charge-current-configuration","title":"Charge Current Configuration","text":"<p>Charge current set by RPROG resistor:</p> RPROG Charge Current Charge Time (2000mAh) 1.2k\u03a9 1000mA (1A) 2-2.5 hours 2k\u03a9 600mA 3-4 hours 3k\u03a9 400mA 5-6 hours 10k\u03a9 130mA 15-20 hours <p>Formula: <code>Icharge = 1200V / RPROG</code></p> <p>Default: Most TP4056 modules come with 1.2k\u03a9 (1A charging)</p>"},{"location":"hardware/specifications/#led-indicators","title":"LED Indicators","text":"LED State Meaning Red On Charging Red Off Not connected or error Blue/Green On Fully charged Both Off No battery"},{"location":"hardware/specifications/#pinout","title":"Pinout","text":"<pre><code>TP4056 Module\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 IN+    BAT+ \u2502\n\u2502             \u2502\n\u2502 IN-    BAT- \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nIN+ \u2192 USB 5V\nIN- \u2192 USB GND\nBAT+ \u2192 Battery positive (JST red wire)\nBAT- \u2192 Battery negative (JST black wire)\n</code></pre>"},{"location":"hardware/specifications/#6-voltage-regulator-ams1117-33","title":"6. Voltage Regulator (AMS1117-3.3)","text":""},{"location":"hardware/specifications/#electrical-specifications_3","title":"Electrical Specifications","text":"Parameter Value Notes Input Voltage 4.5-7V Absolute max: 15V Output Voltage 3.3V \u00b12% Tight regulation Output Current 800mA 1A absolute max Dropout Voltage 1.1V Vin min = 4.4V Quiescent Current 5mA Wasted as heat Load Regulation \u00b11% Stable under load Line Regulation \u00b10.2% Stable with Vin changes Ripple Rejection 75dB Filters input noise"},{"location":"hardware/specifications/#thermal-characteristics","title":"Thermal Characteristics","text":"Parameter Value Notes Thermal Resistance 50\u00b0C/W Without heatsink Operating Temp -40\u00b0C to +125\u00b0C Junction temp Thermal Shutdown 150\u00b0C Automatic protection Power Dissipation 1.2W max Without heatsink <p>Heat calculation: <pre><code>Power dissipated = (Vin - Vout) \u00d7 Iout\nExample: (4.2V - 3.3V) \u00d7 100mA = 90mW\nTemperature rise: 90mW \u00d7 50\u00b0C/W = 4.5\u00b0C\n\nSafe without heatsink \u2713\n</code></pre></p>"},{"location":"hardware/specifications/#capacitors-required","title":"Capacitors Required","text":"Capacitor Value Location Purpose Input 10\u00b5F VIN to GND Stabilize input Output 22\u00b5F VOUT to GND Reduce ripple Ceramic bypass 0.1\u00b5F Both sides High-freq noise <p>Note: Most AMS1117 modules include these capacitors already!</p>"},{"location":"hardware/specifications/#pinout_1","title":"Pinout","text":"<pre><code>AMS1117 Module (Top View)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 VIN         \u2502\n\u2502 GND    VOUT \u2502\n\u2502 GND         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nVIN  \u2192 Battery positive (3.7-4.2V)\nGND  \u2192 Common ground\nVOUT \u2192 ESP32-C3 3.3V input\n</code></pre>"},{"location":"hardware/specifications/#system-integration","title":"System Integration","text":""},{"location":"hardware/specifications/#power-distribution","title":"Power Distribution","text":"<pre><code>USB-C 5V \u2500\u2500\u2192 TP4056 \u2500\u2500\u252c\u2500\u2500\u2192 Battery (3.7V)\n                       \u2502\n                       \u2514\u2500\u2500\u2192 AMS1117 \u2500\u2500\u2192 ESP32-C3 (3.3V)\n\n                            ESP32 5V \u2500\u2500\u2192 WS2812B LEDs (5V)\n</code></pre> <p>Power Paths: 1. USB connected: USB \u2192 TP4056 \u2192 Battery + AMS1117 \u2192 ESP32 2. USB disconnected: Battery \u2192 AMS1117 \u2192 ESP32 3. LEDs: Always powered from ESP32's 5V pin (USB) or 3.7V (battery)</p>"},{"location":"hardware/specifications/#voltage-levels","title":"Voltage Levels","text":"Node Voltage Range Current USB Input 5.0V 4.75-5.25V 500mA-2A Battery 3.7V 3.0-4.2V 2000mA capacity ESP32 Input 3.3V 3.0-3.6V 80mA avg GPIO High 3.3V 2.64-3.3V 40mA max GPIO Low 0V 0-0.33V 40mA max LED Data 3.3V 2.5-5.0V &lt;1mA LED Power 5.0V 4.5-5.5V 60mA per LED"},{"location":"hardware/specifications/#signal-levels","title":"Signal Levels","text":"Signal Type Voltage Frequency Toggle Switch Digital Input 0V / 3.3V DC LED Data Serial Data 3.3V 800kHz WiFi RF Analog N/A 2.4GHz USB Data Differential 0.3-3.6V 12Mbps"},{"location":"hardware/specifications/#environmental-specifications","title":"Environmental Specifications","text":""},{"location":"hardware/specifications/#operating-conditions","title":"Operating Conditions","text":"Parameter Min Typical Max Notes Temperature 0\u00b0C 20\u00b0C 40\u00b0C Office environment Humidity 20% 50% 80% Non-condensing Altitude 0m 600m 2000m Lausanne is 495m Atmospheric Pressure 800hPa 1013hPa 1100hPa Affects WiFi range"},{"location":"hardware/specifications/#storage-conditions","title":"Storage Conditions","text":"Parameter Min Max Notes Temperature -20\u00b0C +60\u00b0C Battery separate: -40\u00b0C to +50\u00b0C Humidity 10% 90% Non-condensing Battery Storage 40-60% Charge level for long-term storage"},{"location":"hardware/specifications/#compliance-certifications","title":"Compliance &amp; Certifications","text":""},{"location":"hardware/specifications/#electromagnetic-compatibility-emc","title":"Electromagnetic Compatibility (EMC)","text":"<ul> <li>WiFi: FCC Part 15, CE, IC certified (via ESP32-C3 module)</li> <li>Emissions: Class B (residential)</li> <li>Immunity: IEC 61000-4 compliant</li> </ul>"},{"location":"hardware/specifications/#safety","title":"Safety","text":"<ul> <li>Low Voltage: USB 5V, compliant with IEC 60950</li> <li>Battery: UN38.3 certified (LiPo shipping)</li> <li>RoHS: Lead-free components</li> </ul> <p>Certification Note</p> <p>Personal projects don't need certifications, but components are pre-certified. If selling commercially, you'd need CE marking for Europe.</p>"},{"location":"hardware/specifications/#performance-summary","title":"Performance Summary","text":"Metric Value Industry Comparison Boot Time 2-3 seconds \u2b50\u2b50\u2b50\u2b50\u2b50 Excellent Battery Life 10-14 days \u2b50\u2b50\u2b50\u2b50 Very Good WiFi Range 50-100m \u2b50\u2b50\u2b50 Good Response Time &lt;500ms \u2b50\u2b50\u2b50\u2b50\u2b50 Excellent Cost CHF 40-90 \u2b50\u2b50\u2b50\u2b50\u2b50 Excellent Size 100\u00d760\u00d735mm \u2b50\u2b50\u2b50\u2b50 Compact Weight 85g \u2b50\u2b50\u2b50\u2b50 Lightweight"},{"location":"hardware/specifications/#next-steps","title":"Next Steps","text":"<p>Now that you understand the technical specifications:</p> <ul> <li>Enclosure Design - Physical design and 3D models</li> <li>Assembly Guide - Build your device</li> <li>Firmware Installation - Flash the code</li> </ul> <p>Or explore:</p> <ul> <li>Bill of Materials - Updated shopping list</li> <li>Wiring Diagram - Connection guide</li> </ul>"},{"location":"hardware/wiring/","title":"Wiring Diagram","text":"<p>Connections between ESP32-C3, button, LED strip, charger, and battery.</p>"},{"location":"hardware/wiring/#summary","title":"Summary","text":"<ul> <li>Microcontroller: ESP32-C3 DevKit</li> <li>LEDs: WS2812B (8 pixels)</li> <li>Button: SPDT or latching toggle</li> <li>Power: 3.7V LiPo via TP4056 to 3.3V regulator</li> </ul>"},{"location":"hardware/wiring/#pin-mapping","title":"Pin Mapping","text":"Function ESP32-C3 Pin Notes LED Data GPIO 2 Connect to DIN of WS2812B via 330\u03a9 resistor Button GPIO 9 Use pull-up; button to GND Charger Status (optional) GPIO 3 Read charging state Battery Voltage (optional) GPIO 4 (ADC) Via divider 100k/220k"},{"location":"hardware/wiring/#power","title":"Power","text":"<ul> <li>Battery (3.7V LiPo) \u2192 TP4056 Charger \u2192 5V USB-C input</li> <li>Output to AMS1117-3.3 (or onboard regulator) \u2192 ESP32 3.3V</li> <li>LED strip powered at 5V if available; else 3.3V logic level often works</li> <li>Common GND for all components</li> </ul>"},{"location":"hardware/wiring/#schematic-notes","title":"Schematic Notes","text":"<ul> <li>Add 1000 \u00b5F capacitor across LED power near strip</li> <li>Add 330 \u03a9 resistor in series with LED data line</li> <li>Keep LED ground and data wire short and twisted if possible</li> </ul>"},{"location":"hardware/wiring/#assembly-order","title":"Assembly Order","text":"<ol> <li>Wire power rails and verify 3.3V/5V</li> <li>Connect LED strip (5V, GND, DIN)</li> <li>Connect button to GPIO with pull-up</li> <li>Optional: voltage divider for battery sensing</li> <li>Tidy cables and strain relief</li> </ol>"},{"location":"hardware/wiring/#testing","title":"Testing","text":"<ul> <li>Flash LED blink test</li> <li>Verify button reads HIGH/LOW correctly</li> <li>Confirm no brownouts when LEDs animate</li> </ul> <p>Reference: Specifications, Soldering</p>"},{"location":"usage/battery/","title":"Battery Management","text":"<p>Guidance to keep your device healthy and extend battery life.</p>"},{"location":"usage/battery/#specs","title":"Specs","text":"<ul> <li>3.7V LiPo, 2000 mAh</li> <li>Charger: TP4056 (USB-C module)</li> <li>Runtime: 10-14 days typical</li> </ul>"},{"location":"usage/battery/#charging","title":"Charging","text":"<ul> <li>Plug into USB-C 5V source (phone charger is fine)</li> <li>Red LED on charger = charging, Green = full</li> <li>Safe to leave overnight (auto cutoff)</li> </ul>"},{"location":"usage/battery/#best-practices","title":"Best Practices","text":"<ul> <li>Charge around 20-30% (yellow warning)</li> <li>Unplug when fully charged</li> <li>Avoid full discharge (&lt;5%)</li> <li>Don\u2019t leave on charger for weeks</li> </ul>"},{"location":"usage/battery/#battery-life-vs-brightness","title":"Battery Life vs Brightness","text":"Brightness Typical Days 25% 16-20 50% 12-16 100% 7-10 <p>Adjust in firmware: <code>BRIGHTNESS</code> constant in <code>led_controller.cpp</code>.</p>"},{"location":"usage/battery/#replacement","title":"Replacement","text":"<p>Expected lifespan: 3-5 years.</p> <p>Signs you need a replacement: - Device dies quickly after charge - Charger stays red unusually long - Battery swollen or warm (stop using immediately)</p> <p>Steps: 1. Buy replacement 3.7V LiPo (same dimensions, JST-PH 2.0) 2. Power off device, disconnect old battery 3. Connect new battery paying attention to polarity 4. Charge fully before first use</p>"},{"location":"usage/battery/#storage","title":"Storage","text":"<p>If not using for 1+ month: - Charge to ~50-70% - Power off and disconnect from charger - Store at 15-25\u00b0C, dry place - Recharge every 3 months</p>"},{"location":"usage/battery/#safety","title":"Safety","text":"<ul> <li>Never puncture or bend the cell</li> <li>Don\u2019t short-circuit terminals</li> <li>Use quality chargers only</li> <li>Stop using if battery swells, smells, or overheats</li> </ul>"},{"location":"usage/battery/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Charges but dies fast \u2192 Battery aging; reduce brightness; consider replacement</li> <li>Doesn\u2019t charge \u2192 Check USB cable and charger; verify polarity; inspect TP4056 module</li> <li>Gets hot while charging \u2192 Unplug immediately; inspect for short; replace battery</li> </ul> <p>Related: LED Indicators, Maintenance</p>"},{"location":"usage/daily-operation/","title":"Daily Operation","text":"<p>This guide covers the everyday use of your Wall Clock In Machine for tracking office work hours.</p>"},{"location":"usage/daily-operation/#basic-operation","title":"Basic Operation","text":""},{"location":"usage/daily-operation/#starting-your-work-day","title":"Starting Your Work Day","text":"<p>When you arrive at the office:</p> <ol> <li>Check Device Status</li> <li>Top LED should be breathing green (clocked out, idle)</li> <li>If red: Check battery level and power connections</li> <li> <p>If blinking blue: Device is connecting to WiFi</p> </li> <li> <p>Clock In</p> </li> <li>Press button down (toggle to \"working\" position)</li> <li>Top LED turns solid blue</li> <li> <p>Energy meter fills 1 LED (green) after ~1 hour</p> </li> <li> <p>Confirmation</p> </li> <li>Listen for quiet \"beep\" from LED feedback (visual pulse)</li> <li>Check backend API to verify session started</li> <li>If no response: Check WiFi connection and API configuration</li> </ol> <p>Normal behavior: Button stays in DOWN position throughout your work session.</p>"},{"location":"usage/daily-operation/#during-your-work-session","title":"During Your Work Session","text":"<p>Energy Meter Visualization:</p> <p>The 7 lower LEDs show your accumulated work time:</p> Hours Worked LEDs Lit Color Gradient 0-1 hour 1 LED Green 1-2 hours 2 LEDs Green 2-3 hours 3 LEDs Green-Yellow 3-4 hours 4 LEDs Yellow 4-5 hours 5 LEDs Yellow-Orange 5-6 hours 6 LEDs Orange-Red 6+ hours 7 LEDs Red (full) <p>Color meanings: - Green (0-2 hours): Fresh, starting work - Yellow (2-4 hours): Productive middle - Orange (4-5 hours): Consider a break - Red (5+ hours): Long session, time for lunch/break!</p> <p>Status LED (top): - Solid Blue: Working normally, clocked in - Pulsing Blue: Sending API update (every 5 minutes) - Blinking Yellow: Battery below 20% - Blinking Red: Error (check battery level and connections)</p>"},{"location":"usage/daily-operation/#taking-breaks","title":"Taking Breaks","text":"<p>The Wall Clock In Machine tracks continuous work time:</p> <p>Option 1: Keep Running (Recommended for short breaks) - Leave button DOWN - Take coffee/bathroom break (5-15 min) - Energy meter continues counting - No action needed</p> <p>Option 2: Clock Out for Breaks (Lunch, meetings) - Press button up (toggle to \"stopped\" position) - Device saves session and uploads to API - Take your break - Press button down when you return to start new session</p> <p>Why Option 1 is better: - One continuous session = accurate daily total - Less manual interaction - Backend API aggregates all sessions automatically</p> <p>When to use Option 2: - Lunch break (30+ minutes) - Off-site meeting - End of work day</p>"},{"location":"usage/daily-operation/#ending-your-work-day","title":"Ending Your Work Day","text":"<p>When leaving the office:</p> <ol> <li>Clock Out</li> <li>Press button up (toggle to \"clocked out\" position)</li> <li>Top LED pulses blue (uploading session)</li> <li>Energy meter LEDs fade out one by one</li> <li> <p>Top LED returns to breathing green</p> </li> <li> <p>Verification</p> </li> <li>Check backend API/dashboard for recorded hours</li> <li>Verify session end time is correct</li> <li> <p>Review energy meter accuracy (should match your actual hours)</p> </li> <li> <p>Charging (if needed)</p> </li> <li>Plug in USB-C cable if battery below 30%</li> <li>Charging LED turns red</li> <li>Unplug when green (or leave overnight)</li> </ol> <p>Battery management: See Battery Management</p>"},{"location":"usage/daily-operation/#led-indicator-reference","title":"LED Indicator Reference","text":""},{"location":"usage/daily-operation/#quick-status-check","title":"Quick Status Check","text":"Indicator Pattern Meaning Action Top LED Breathing Green Clocked out, idle Normal standby Top LED Solid Blue Clocked in, working Normal operation Top LED Pulsing Blue Sending API update Wait (5-10 seconds) Top LED Blinking Yellow Low battery Charge soon Top LED Blinking Red Error state Check troubleshooting Top LED Fast Rainbow WiFi setup mode Connect via captive portal Energy Meter Green gradient 0-2 hours worked Fresh session Energy Meter Yellow gradient 2-4 hours worked Mid-session Energy Meter Orange-Red 4+ hours worked Long session Charging LED Red Charging Leave connected Charging LED Green Fully charged Can unplug <p>For detailed LED meanings, see LED Indicators.</p>"},{"location":"usage/daily-operation/#common-usage-patterns","title":"Common Usage Patterns","text":""},{"location":"usage/daily-operation/#pattern-1-standard-9-5-office-day","title":"Pattern 1: Standard 9-5 Office Day","text":"<pre><code>08:45 - Arrive at office\n        - Device in standby (green breathing)\n        - Press button DOWN\n\n09:00 - Start work\n        - 1 green LED lit\n\n12:00 - Lunch break (press button UP)\n        - Session 1 saved: 3 hours\n        - Device back to standby\n\n13:00 - Return from lunch\n        - Press button DOWN\n        - New session starts\n\n17:00 - End work day (press button UP)\n        - Session 2 saved: 4 hours\n        - Total: 7 hours recorded\n</code></pre>"},{"location":"usage/daily-operation/#pattern-2-long-single-session","title":"Pattern 2: Long Single Session","text":"<pre><code>09:00 - Clock in (button DOWN)\n10:00 - 1 LED (green)\n11:00 - 2 LEDs (green)\n12:00 - 3 LEDs (green-yellow) - Quick desk lunch, stay clocked in\n13:00 - 4 LEDs (yellow)\n14:00 - 5 LEDs (orange)\n15:00 - 6 LEDs (orange-red)\n16:00 - 7 LEDs (red) - Full meter!\n17:00 - Clock out (button UP)\n        - Single 8-hour session saved\n</code></pre>"},{"location":"usage/daily-operation/#pattern-3-flexible-remote-work","title":"Pattern 3: Flexible Remote Work","text":"<pre><code>10:00 - Start work (button DOWN)\n11:30 - Break (button UP) - 1.5 hours saved\n14:00 - Resume (button DOWN)\n16:00 - Short break - Leave button DOWN\n16:15 - Continue working\n18:30 - End (button UP) - 4.5 hours saved\n        - Total: 6 hours\n</code></pre>"},{"location":"usage/daily-operation/#battery-behavior","title":"Battery Behavior","text":""},{"location":"usage/daily-operation/#expected-battery-life","title":"Expected Battery Life","text":"<p>Normal usage (clocked in 6-8 hours/day): - Fresh charge: 10-14 days between charges - Year 2: 8-12 days - Year 3: 6-10 days</p> <p>LED brightness impact: - 100% brightness: 7-10 days - 50% brightness: 12-16 days - 25% brightness: 16-20 days</p> <p>Power-saving mode (deep sleep when clocked out): - Standby power: ~5 \u00b5A - Working power: ~80-150 mA - WiFi sync: ~200 mA peak (every 5 min for 2-5 seconds)</p>"},{"location":"usage/daily-operation/#charging-habits","title":"Charging Habits","text":"<p>Best practices: - Charge when battery drops below 20% (yellow warning) - Overnight charging is fine (charger has auto-cutoff) - Unplug at 100% to maximize battery lifespan - Charge every weekend if you use daily</p> <p>Avoid: - Letting battery fully drain (below 5%) - Keeping plugged in 24/7 - Charging in direct sunlight or hot environments</p> <p>See detailed charging guide: Battery Management</p>"},{"location":"usage/daily-operation/#api-integration","title":"API Integration","text":""},{"location":"usage/daily-operation/#backend-communication","title":"Backend Communication","text":"<p>Automatic sync schedule: - Clock in: Immediate POST to start session - During session: Status ping every 5 minutes (optional) - Clock out: Immediate POST to end session with duration</p> <p>API endpoints used: <pre><code>POST /api/beats/start   # Clock in\nPOST /api/beats/end     # Clock out\nGET  /api/beats/status  # Optional health check\n</code></pre></p> <p>Network resilience: - Device stores session locally if offline - Auto-retry up to 3 times with exponential backoff - Syncs when WiFi returns - No data loss even if network fails</p>"},{"location":"usage/daily-operation/#checking-your-data","title":"Checking Your Data","text":"<p>Via Web Dashboard (if you built one): 1. Open backend dashboard URL 2. View daily/weekly/monthly summaries 3. Export CSV for invoicing or records</p> <p>Via Direct API Query: <pre><code>curl -X GET \"https://your-api.com/api/beats?date=2024-01-15\" \\\n  -H \"Authorization: Bearer YOUR_TOKEN\"\n</code></pre></p> <p>Data stored: - Session start timestamp - Session end timestamp - Duration (calculated) - Device ID (your ESP32 MAC address) - Project ID (if configured)</p>"},{"location":"usage/daily-operation/#troubleshooting-quick-checks","title":"Troubleshooting Quick Checks","text":""},{"location":"usage/daily-operation/#button-press-not-responding","title":"Button Press Not Responding","text":"<ol> <li>Check battery level (yellow/red LED?)</li> <li>Try long press (2 seconds)</li> <li>Check button physical connection</li> <li>Check hardware connections and battery level</li> </ol>"},{"location":"usage/daily-operation/#session-not-recorded","title":"Session Not Recorded","text":"<ol> <li>Check WiFi connection (blue blinking = connecting)</li> <li>Verify API endpoint in configuration</li> <li>Check backend API logs</li> <li>Check WiFi connection and API configuration</li> </ol>"},{"location":"usage/daily-operation/#wrong-duration-recorded","title":"Wrong Duration Recorded","text":"<ol> <li>Verify clock-out button press registered</li> <li>Check for automatic session timeout (default: 12 hours)</li> <li>Review API timestamp accuracy</li> <li>Check device time sync (NTP)</li> </ol>"},{"location":"usage/daily-operation/#leds-not-turning-on","title":"LEDs Not Turning On","text":"<ol> <li>Check battery charge</li> <li>Verify LED power connection</li> <li>Test with USB-C power</li> <li>Check hardware connections and battery level</li> </ol>"},{"location":"usage/daily-operation/#advanced-usage","title":"Advanced Usage","text":""},{"location":"usage/daily-operation/#multiple-devices","title":"Multiple Devices","text":"<p>If you have multiple work locations:</p> <ol> <li>Build one device per location</li> <li>Configure each with unique device ID</li> <li>Backend API tracks all devices</li> <li>Dashboard shows combined total</li> </ol> <p>Example: - Device A: EPFL office - Device B: Home office - Device C: Co-working space - All sync to same backend account</p>"},{"location":"usage/daily-operation/#project-tracking","title":"Project Tracking","text":"<p>If your backend supports projects:</p> <ol> <li>Configure project ID in firmware</li> <li>Use button patterns for project switching:</li> <li>Single click: Default project</li> <li>Double click: Alternate project (requires firmware mod)</li> <li> <p>Long press (5s): Admin mode</p> </li> <li> <p>Or use physical DIP switches for 4-8 projects</p> </li> </ol>"},{"location":"usage/daily-operation/#offline-mode","title":"Offline Mode","text":"<p>Device works offline: - Sessions stored in ESP32 EEPROM - Holds up to 50 sessions (configurable) - Auto-sync when WiFi returns - LED shows orange status indicator</p> <p>Activate offline mode: - Long press button (10 seconds) at startup - Top LED turns orange - All sessions cached locally</p> <p>Sync later: - Connect to WiFi - Long press button (10 seconds) again - Device uploads all cached sessions</p>"},{"location":"usage/daily-operation/#maintenance-schedule","title":"Maintenance Schedule","text":""},{"location":"usage/daily-operation/#daily","title":"Daily","text":"<ul> <li>\u2713 Observe LED indicators for abnormal behavior</li> <li>\u2713 Verify sessions recorded correctly</li> </ul>"},{"location":"usage/daily-operation/#weekly","title":"Weekly","text":"<ul> <li>\u2713 Check battery level (charge if needed)</li> <li>\u2713 Wipe dust from button and enclosure</li> <li>\u2713 Review backend data for accuracy</li> </ul>"},{"location":"usage/daily-operation/#monthly","title":"Monthly","text":"<ul> <li>\u2713 Clean LED surface with microfiber cloth</li> <li>\u2713 Check button feel (should have crisp click)</li> <li>\u2713 Verify WiFi connection strength</li> <li>\u2713 Update firmware if new version available</li> </ul>"},{"location":"usage/daily-operation/#yearly","title":"Yearly","text":"<ul> <li>\u2713 Deep clean enclosure interior</li> <li>\u2713 Check solder joints for cold joints</li> <li>\u2713 Test battery capacity (may need replacement after 3-5 years)</li> <li>\u2713 Re-flash firmware to latest version</li> </ul> <p>See full maintenance guide: Maintenance</p>"},{"location":"usage/daily-operation/#tips-tricks","title":"Tips &amp; Tricks","text":""},{"location":"usage/daily-operation/#improving-accuracy","title":"Improving Accuracy","text":"<ul> <li>Place device away from electromagnetic interference</li> <li>Use stable WiFi network (not guest networks)</li> <li>Configure NTP server for accurate timestamps</li> <li>Test button before each work week</li> </ul>"},{"location":"usage/daily-operation/#reducing-distractions","title":"Reducing Distractions","text":"<ul> <li>Lower LED brightness during focus work</li> <li>Disable energy meter animation (keep only top status LED)</li> <li>Use minimal brightness at night</li> <li>Turn off status beeps</li> </ul>"},{"location":"usage/daily-operation/#extending-battery-life","title":"Extending Battery Life","text":"<ul> <li>Reduce LED brightness to 25%</li> <li>Disable WiFi sync during sessions (sync only at clock-out)</li> <li>Use deep sleep modes aggressively</li> <li>Charge every weekend preventively</li> </ul>"},{"location":"usage/daily-operation/#making-it-fun","title":"Making It Fun","text":"<ul> <li>Customize LED colors per project</li> <li>Add achievement animations (1000 hours, etc.)</li> <li>Share weekly stats with team</li> <li>Gamify productivity with LED effects</li> </ul>"},{"location":"usage/daily-operation/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about LED Indicators in detail</li> <li>Understand Battery Management</li> <li>Review Maintenance procedures</li> </ul> <p>Questions? Check the documentation or open an issue on GitHub!</p>"},{"location":"usage/led-indicators/","title":"LED Indicators","text":"<p>This page explains all LED patterns and what they mean on the Wall Clock In Machine.</p>"},{"location":"usage/led-indicators/#led-layout","title":"LED Layout","text":"<ul> <li>1x Top Status LED (WS2812 pixel 0)</li> <li>7x Energy Meter LEDs (WS2812 pixels 1-7)</li> <li>1x Charger LED (on charging module, red/green)</li> </ul>"},{"location":"usage/led-indicators/#top-status-led-pixel-0","title":"Top Status LED (Pixel 0)","text":"Pattern Meaning Action Breathing Green Clocked out, idle None Solid Blue Clocked in, working None Pulsing Blue (5s) Sync in progress Wait Fast Rainbow WiFi setup mode (AP) Connect via captive portal Blinking Yellow (2 Hz) Battery low (&lt;20%) Charge soon Blinking Red (2 Hz) Error state See Troubleshooting Off Deep sleep Press button or power cycle"},{"location":"usage/led-indicators/#energy-meter-leds-pixels-1-7","title":"Energy Meter LEDs (Pixels 1-7)","text":"<ul> <li>Fill from left to right as hours accumulate</li> <li>Color gradient indicates progress</li> <li>1-2 LEDs: Green</li> <li>3-4 LEDs: Yellow</li> <li>5-6 LEDs: Orange</li> <li>7 LEDs: Red</li> <li>Fades out on clock out</li> </ul>"},{"location":"usage/led-indicators/#charger-led","title":"Charger LED","text":"<ul> <li>Red: Charging</li> <li>Green: Fully charged</li> <li>Off: Not connected or no battery</li> </ul>"},{"location":"usage/led-indicators/#setup-mode-animation","title":"Setup Mode Animation","text":"<p>When device boots with button pressed (or no saved WiFi):</p> <ol> <li>Top LED shows fast rainbow cycle</li> <li>Energy meter LEDs scroll left-right</li> <li>Device exposes WiFi AP: <code>WALL-CLOCK-SETUP</code></li> <li>Connect to AP, then configure WiFi and API endpoint</li> </ol>"},{"location":"usage/led-indicators/#error-patterns","title":"Error Patterns","text":""},{"location":"usage/led-indicators/#api-error","title":"API Error","text":"<ul> <li>Top LED: Blinking Red</li> <li>Energy LEDs: Off</li> <li>Action: Check API URL and network connectivity</li> </ul>"},{"location":"usage/led-indicators/#wifi-error","title":"WiFi Error","text":"<ul> <li>Top LED: Blue pulse every 2 seconds</li> <li>Energy LEDs: Single yellow blink</li> <li>Action: Move closer to router, re-enter credentials</li> </ul>"},{"location":"usage/led-indicators/#sensorbutton-error","title":"Sensor/Button Error","text":"<ul> <li>Top LED: Alternating red/orange</li> <li>Energy LEDs: All dim red</li> <li>Action: Check button wiring and debounce settings</li> </ul>"},{"location":"usage/led-indicators/#customization","title":"Customization","text":"<p>You can customize colors and patterns in firmware:</p> <ul> <li>File: <code>firmware/src/led_controller.cpp</code></li> <li>Constants to change:</li> <li><code>STATUS_COLOR_WORKING</code></li> <li><code>STATUS_COLOR_IDLE</code></li> <li><code>COLOR_GRADIENT[]</code></li> <li><code>BRIGHTNESS</code></li> </ul> <p>Example (pseudocode):</p> <pre><code>setStatusColor(working ? Blue : Green);\nfillEnergyMeter(hoursWorked, gradient);\nif (syncing) pulse(StatusPixel, Blue);\n</code></pre>"},{"location":"usage/led-indicators/#tips","title":"Tips","text":"<ul> <li>Keep brightness at 25-50% for comfortable desk viewing</li> <li>Avoid direct sunlight for accurate color perception</li> <li>Clean LED diffuser monthly for consistent light</li> </ul> <p>See also: Daily Operation, Battery Management</p>"},{"location":"usage/maintenance/","title":"Maintenance","text":"<p>Keep your Wall Clock In Machine running smoothly.</p>"},{"location":"usage/maintenance/#weekly","title":"Weekly","text":"<ul> <li>Wipe enclosure and button with microfiber cloth</li> <li>Verify LEDs and button response</li> <li>Check battery level; charge if &lt;30%</li> </ul>"},{"location":"usage/maintenance/#monthly","title":"Monthly","text":"<ul> <li>Inspect solder joints for cracks</li> <li>Clean LED diffuser/acrylic with isopropyl alcohol</li> <li>Verify WiFi connection strength at the desk</li> <li>Review firmware release notes; update if needed</li> </ul>"},{"location":"usage/maintenance/#quarterly","title":"Quarterly","text":"<ul> <li>Open enclosure and clear dust</li> <li>Inspect wiring insulation and strain reliefs</li> <li>Re-seat JST connectors</li> </ul>"},{"location":"usage/maintenance/#yearly","title":"Yearly","text":"<ul> <li>Test battery capacity (run from 100% to 20% once)</li> <li>Inspect button actuation (replace if mushy)</li> <li>Reflow suspicious solder joints</li> </ul>"},{"location":"usage/maintenance/#firmware-updates","title":"Firmware Updates","text":"<ol> <li>Connect via USB-C</li> <li>Put device in programming mode (hold button at boot if required)</li> <li>Flash latest firmware from repository</li> <li>Verify configuration preserved; reconfigure if needed</li> </ol>"},{"location":"usage/maintenance/#cleaning-tips","title":"Cleaning Tips","text":"<ul> <li>Power off before cleaning</li> <li>Avoid water ingress</li> <li>Use antistatic brush for PCB dust</li> <li>Do not use acetone on plastics</li> </ul>"},{"location":"usage/maintenance/#spare-parts-checklist","title":"Spare Parts Checklist","text":"<ul> <li>1x spare button</li> <li>1x spare LED strip segment</li> <li>1x spare battery (same size)</li> <li>Heat-shrink tubing assortment</li> <li>JST-PH connectors and cable</li> </ul>"},{"location":"usage/maintenance/#service-log-template","title":"Service Log Template","text":"<pre><code>Date       | Action           | Notes\n-----------|------------------|-----------------------------\n2025-01-10 | Cleaned diffuser | Reduced glare\n2025-03-01 | FW v1.2 flashed  | Improved WiFi retries\n</code></pre> <p>See also: Battery Management</p>"}]}