{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"ASSEMBLY_GUIDE/","title":"Assembly Guide","text":"<p>Time Required: 2-3 hours Skill Level: Beginner to Intermediate Tools Needed: See Bill of Materials</p>"},{"location":"ASSEMBLY_GUIDE/#before-you-begin","title":"Before You Begin","text":""},{"location":"ASSEMBLY_GUIDE/#safety-first","title":"Safety First! \u26a0\ufe0f","text":"<ul> <li>Work in a well-ventilated area (solder fumes)</li> <li>Wear safety glasses</li> <li>Keep soldering iron away from flammable materials</li> <li>LiPo batteries can be dangerous - handle with care</li> <li>Have a fire extinguisher nearby (just in case!)</li> </ul>"},{"location":"ASSEMBLY_GUIDE/#preparation-checklist","title":"Preparation Checklist","text":"<ul> <li> All components received and verified</li> <li> Tools assembled and ready</li> <li> Enclosure printed or ready</li> <li> Work area clean and organized</li> <li> Read this guide completely once before starting</li> </ul>"},{"location":"ASSEMBLY_GUIDE/#recommended-order","title":"Recommended Order","text":"<ol> <li>Test individual components first</li> <li>Assemble electronics on breadboard (optional but recommended)</li> <li>Test firmware before soldering</li> <li>Solder permanent connections</li> <li>Assemble into enclosure</li> <li>Final testing</li> </ol>"},{"location":"ASSEMBLY_GUIDE/#phase-1-component-testing-30-minutes","title":"Phase 1: Component Testing (30 minutes)","text":""},{"location":"ASSEMBLY_GUIDE/#test-1-esp32-c3-board","title":"Test 1: ESP32-C3 Board","text":"<p>Purpose: Verify the microcontroller works before soldering</p> <pre><code># Connect ESP32-C3 to computer via USB-C cable\n# Open Arduino IDE or PlatformIO\n# Upload \"Blink\" example sketch\n# LED should blink on the board\n</code></pre> <p>Expected Result: On-board LED blinks every second</p> <p>\u2705 Pass: Continue to next test \u274c Fail: Check USB cable, try different port, or replace board</p>"},{"location":"ASSEMBLY_GUIDE/#test-2-led-strip","title":"Test 2: LED Strip","text":"<p>Wiring (Temporary for testing): <pre><code>LED Strip    \u2192   ESP32-C3\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nVCC (Red)    \u2192   3.3V\nGND (White)  \u2192   GND\nDATA (Green) \u2192   GPIO 8\n</code></pre></p> <p>Test Code: Upload FastLED \"ColorPalette\" example</p> <p>Expected Result: LEDs cycle through colors</p> <p>\u2705 Pass: LEDs work \u274c Fail: Check wiring, verify it's 5V compatible, try different LED</p>"},{"location":"ASSEMBLY_GUIDE/#test-3-battery-charger","title":"Test 3: Battery &amp; Charger","text":"<p>\u26a0\ufe0f IMPORTANT: Only test battery with protection circuit!</p> <p>Steps: 1. Connect battery to TP4056 charger module (BAT+ and BAT-) 2. Plug USB-C cable into TP4056 3. Red LED should light up (charging) 4. Measure voltage on OUT+ and OUT- (should be ~4.2V when full)</p> <p>Expected Result: Battery charges, LEDs indicate status</p> <p>\u2705 Pass: Charging system works \u274c Fail: Check polarity, verify TP4056 module, test battery voltage</p>"},{"location":"ASSEMBLY_GUIDE/#test-4-toggle-switch","title":"Test 4: Toggle Switch","text":"<p>Test: Use multimeter in continuity mode - Toggle to position 1: Common \u2192 Terminal 1 should beep - Toggle to position 2: Common \u2192 Terminal 2 should beep</p> <p>Expected Result: Clear continuity in each position</p> <p>\u2705 Pass: Switch works \u274c Fail: Clean contacts or replace switch</p>"},{"location":"ASSEMBLY_GUIDE/#phase-2-breadboard-prototype-1-hour","title":"Phase 2: Breadboard Prototype (1 hour)","text":"<p>Why? Test everything together before permanent soldering!</p>"},{"location":"ASSEMBLY_GUIDE/#wiring-diagram","title":"Wiring Diagram","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                                                     \u2502\n\u2502  [ESP32-C3]                                        \u2502\n\u2502   GPIO8 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba DATA (LED Strip)          \u2502\n\u2502   GPIO9 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u25ba Button (Common)           \u2502\n\u2502                   \u2502                                 \u2502\n\u2502   3.3V \u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u25ba LED Strip VCC             \u2502\n\u2502            \u2502                                        \u2502\n\u2502   GND \u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba All GND points            \u2502\n\u2502                                                     \u2502\n\u2502                                                     \u2502\n\u2502  [TP4056 Charger]                                  \u2502\n\u2502   OUT+ \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba Voltage Regulator IN      \u2502\n\u2502   OUT- \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba GND                       \u2502\n\u2502   BAT+ \u2500\u2500\u2500\u2510                                        \u2502\n\u2502   BAT- \u2500\u2500\u2500\u2524 Battery (2000mAh LiPo)                \u2502\n\u2502                                                     \u2502\n\u2502  [Voltage Regulator (Optional)]                    \u2502\n\u2502   OUT (3.3V) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba ESP32 3.3V               \u2502\n\u2502                                                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"ASSEMBLY_GUIDE/#step-by-step-breadboard-assembly","title":"Step-by-Step Breadboard Assembly","text":"<p>Step 1: Mount ESP32-C3 on breadboard center</p> <p>Step 2: Connect power rails - TP4056 OUT+ \u2192 Positive rail - TP4056 OUT- / GND \u2192 Negative rail</p> <p>Step 3: Connect toggle switch - Common terminal \u2192 GPIO9 - One switch terminal \u2192 GND - Other terminal \u2192 Open (not used)</p> <p>Step 4: Connect LED strip (cut to 8 LEDs) - VCC \u2192 Positive rail (3.3V or 5V via regulator) - GND \u2192 Negative rail - DATA \u2192 GPIO8</p> <p>Step 5: Add bypass capacitor - 100\u00b5F capacitor across power rails near ESP32</p>"},{"location":"ASSEMBLY_GUIDE/#test-breadboard-circuit","title":"Test Breadboard Circuit","text":"<ol> <li>Upload firmware (see Firmware Installation)</li> <li>Power on via USB</li> <li>Device should boot and show blue LED (WiFi connecting)</li> <li>Press button - should respond</li> <li>LEDs should light up</li> </ol> <p>Troubleshooting: - No power: Check connections, battery charge - LEDs don't work: Check DATA pin, verify 5V power if needed - Button doesn't respond: Check pull-up resistor (internal should work)</p>"},{"location":"ASSEMBLY_GUIDE/#phase-3-permanent-soldering-1-15-hours","title":"Phase 3: Permanent Soldering (1-1.5 hours)","text":""},{"location":"ASSEMBLY_GUIDE/#preparation","title":"Preparation","text":"<p>Organize Your Workspace: - Soldering iron on left (or right if left-handed) - Solder spool nearby - Components laid out in order - Helping hands or PCB holder - Damp sponge for cleaning iron tip</p> <p>Soldering Tips: - Tin the iron tip before each joint - Heat the pad AND wire, then apply solder - Use just enough solder (shiny joint, not a blob) - Don't move joint for 2-3 seconds while cooling - Check each joint before moving to next</p>"},{"location":"ASSEMBLY_GUIDE/#soldering-order","title":"Soldering Order","text":"<p>1. Power Distribution Board (Optional)</p> <p>Create a small power distribution board using prototype PCB:</p> <pre><code>Common Power Points:\n  - Battery OUT+ \u2192 Multiple 3.3V outputs\n  - GND \u2192 Multiple GND outputs\n</code></pre> <p>2. Solder Wires to TP4056 Charger</p> <ul> <li>BAT+ (red wire, 10cm) \u2192 Battery positive</li> <li>BAT- (black wire, 10cm) \u2192 Battery negative  </li> <li>OUT+ (red wire, 15cm) \u2192 Power distribution</li> <li>OUT- (black wire, 15cm) \u2192 Common ground</li> </ul> <p>Heat shrink each connection!</p> <p>3. Solder Wires to ESP32-C3</p> <p>Option A: Solder directly to board pads (permanent) Option B: Use headers and female connectors (removable)</p> <p>Recommended wires: - GPIO8 (yellow, 15cm) \u2192 LED strip DATA - GPIO9 (white, 15cm) \u2192 Toggle switch - GPIO4 (green, 15cm) \u2192 Battery voltage sense (via divider) - 3.3V (red, multiple) - GND (black, multiple)</p> <p>4. Voltage Divider for Battery Sensing</p> <pre><code>Battery+ \u2500\u2500\u252c\u2500\u2500 10k\u03a9 resistor \u2500\u2500\u252c\u2500\u2500 GPIO4 (ADC)\n           \u2502                    \u2502\n           \u2502                    \u251c\u2500\u2500 10k\u03a9 resistor \u2500\u2500 GND\n</code></pre> <p>This divides battery voltage (4.2V max) to safe level (2.1V) for ADC.</p> <p>5. Solder LED Strip</p> <ul> <li>Cut strip after 8<sup>th</sup> LED (there are cut marks)</li> <li>Tin the copper pads on strip</li> <li>Solder wires to pads:</li> <li>VCC (red, 10cm)</li> <li>GND (black, 10cm)</li> <li>DATA (yellow, 10cm)</li> </ul> <p>\u26a0\ufe0f Polarity matters! Double-check before powering on.</p> <p>6. Solder Toggle Switch</p> <ul> <li>Common terminal \u2192 GPIO9 wire</li> <li>One position terminal \u2192 GND</li> <li>Leave other terminal empty</li> </ul> <p>Optionally add 10k\u03a9 pull-up resistor between GPIO9 and 3.3V (ESP32 has internal pull-up, so this is optional).</p> <p>7. USB-C Panel Connector</p> <ul> <li>Solder wires from panel connector to TP4056 USB pads</li> <li>Or use TP4056 module with built-in USB-C</li> </ul>"},{"location":"ASSEMBLY_GUIDE/#inspection-checklist","title":"Inspection Checklist","text":"<p>After soldering, inspect each joint:</p> <ul> <li> Shiny, not dull (good solder flow)</li> <li> No cold joints (gray, grainy appearance)</li> <li> No solder bridges between pins</li> <li> No loose wires</li> <li> All wires have heat shrink tubing</li> <li> Connections are mechanically strong</li> </ul> <p>Test with multimeter: - [ ] Continuity on all expected connections - [ ] No shorts between power and ground - [ ] Battery voltage present at regulator input</p>"},{"location":"ASSEMBLY_GUIDE/#phase-4-enclosure-assembly-30-minutes","title":"Phase 4: Enclosure Assembly (30 minutes)","text":""},{"location":"ASSEMBLY_GUIDE/#prepare-enclosure","title":"Prepare Enclosure","text":"<p>3D Printed Enclosure: 1. Remove support material carefully 2. Sand any rough edges 3. Test-fit all components before gluing 4. Drill out toggle switch hole if needed (12mm)</p> <p>Purchased Project Box: 1. Mark locations for toggle switch and USB port 2. Drill 12mm hole for switch (use step drill bit) 3. Cut rectangular slot for USB-C connector 4. Drill mounting holes for PCB standoffs</p>"},{"location":"ASSEMBLY_GUIDE/#component-mounting","title":"Component Mounting","text":"<p>Step 1: Install USB-C Panel Connector - Insert from outside - Secure with mounting nut from inside - Verify it sits flush</p> <p>Step 2: Install Toggle Switch - Insert switch through top hole - Add lock washer and nut - Tighten firmly (should not rotate)</p> <p>Step 3: Mount LED Light Pipe - Apply small amount of hot glue to edges - Press frosted acrylic into front panel slot - Wipe away excess glue</p> <p>Step 4: Position LED Strip - Stick LED strip behind light pipe (use adhesive backing) - Position so LEDs align with diffuser - Keep 2-3mm gap between LEDs and diffuser</p> <p>Step 5: Mount ESP32-C3 - Use M3 standoffs (10mm height) - Screw standoffs to bottom shell - Place ESP32 on standoffs - Secure with M3 screws</p> <p>Step 6: Mount TP4056 Charger - Use double-sided foam tape OR - Hot glue to bottom shell - Position near USB-C connector</p> <p>Step 7: Mount Battery - Place battery in remaining space - Secure with double-sided foam tape - Do not glue directly! (need to remove for replacement) - Route wires neatly</p>"},{"location":"ASSEMBLY_GUIDE/#cable-management","title":"Cable Management","text":"<ul> <li>Use small cable ties or twist ties</li> <li>Keep wires away from toggle switch mechanism</li> <li>Ensure no wires pinched when closing enclosure</li> <li>Leave some slack for serviceability</li> </ul>"},{"location":"ASSEMBLY_GUIDE/#final-assembly","title":"Final Assembly","text":"<ol> <li>Double-check all connections one last time</li> <li>Test device before closing (power on, verify LEDs work)</li> <li>Align top cover with bottom shell</li> <li>Insert M3 screws through bottom into top cover</li> <li>Tighten screws evenly (don't overtighten!)</li> <li>Apply rubber feet to bottom corners</li> </ol>"},{"location":"ASSEMBLY_GUIDE/#phase-5-final-testing-15-minutes","title":"Phase 5: Final Testing (15 minutes)","text":""},{"location":"ASSEMBLY_GUIDE/#power-on-test","title":"Power-On Test","text":"<ol> <li>Charge battery fully (USB-C, wait for blue LED on TP4056)</li> <li>Press toggle switch to turn on</li> <li>Device should boot:</li> <li>Blue LED (WiFi connecting)</li> <li>Should create hotspot \"WallClockIn-Setup\"</li> </ol>"},{"location":"ASSEMBLY_GUIDE/#led-test","title":"LED Test","text":"<ul> <li>Status LED should light up</li> <li>Try different states:</li> <li>Red = Clocked out</li> <li>Green = Clocked in</li> <li>Blue = Connecting</li> <li>Yellow = Error</li> </ul>"},{"location":"ASSEMBLY_GUIDE/#button-test","title":"Button Test","text":"<ul> <li>Press toggle switch</li> <li>Should transition between states</li> <li>Hold for 3 seconds \u2192 Config mode (white LED)</li> </ul>"},{"location":"ASSEMBLY_GUIDE/#wifi-configuration-test","title":"WiFi Configuration Test","text":"<p>See Configuration Guide for setup steps</p>"},{"location":"ASSEMBLY_GUIDE/#api-test","title":"API Test","text":"<ul> <li>Configure API endpoint</li> <li>Test clock in (button press)</li> <li>Verify API receives request</li> <li>Test clock out</li> <li>Check energy meter updates</li> </ul>"},{"location":"ASSEMBLY_GUIDE/#battery-test","title":"Battery Test","text":"<ul> <li>Unplug USB-C</li> <li>Device should run on battery</li> <li>Check battery indicator in logs</li> <li>Should last multiple days</li> </ul>"},{"location":"ASSEMBLY_GUIDE/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ASSEMBLY_GUIDE/#problem-device-doesnt-power-on","title":"Problem: Device doesn't power on","text":"<p>Possible Causes: - Battery not charged - Loose battery connection - Dead battery - Switch not connected properly</p> <p>Solutions: 1. Plug in USB-C to charge 2. Check battery voltage with multimeter (should be 3.0V+) 3. Verify connections to TP4056 4. Check toggle switch wiring</p>"},{"location":"ASSEMBLY_GUIDE/#problem-leds-dont-light-up","title":"Problem: LEDs don't light up","text":"<p>Possible Causes: - Wrong DATA pin - Power issue (LEDs need 5V ideally) - Damaged LED strip - Incorrect wiring</p> <p>Solutions: 1. Verify DATA connected to GPIO8 2. Check LED power supply voltage 3. Test LED strip separately 4. Look for solder bridges</p>"},{"location":"ASSEMBLY_GUIDE/#problem-button-doesnt-respond","title":"Problem: Button doesn't respond","text":"<p>Possible Causes: - GPIO9 not connected - Switch faulty - Debounce issue</p> <p>Solutions: 1. Test switch with multimeter 2. Check wiring to GPIO9 3. Try external pull-up resistor (10k\u03a9)</p>"},{"location":"ASSEMBLY_GUIDE/#problem-wont-connect-to-wifi","title":"Problem: Won't connect to WiFi","text":"<p>Possible Causes: - Incorrect credentials - 5GHz network (ESP32 only supports 2.4GHz) - Network security issues</p> <p>Solutions: 1. Reset config (hold button during boot) 2. Enter setup mode manually 3. Check router settings (WPA2 personal supported)</p>"},{"location":"ASSEMBLY_GUIDE/#problem-battery-drains-quickly","title":"Problem: Battery drains quickly","text":"<p>Possible Causes: - LEDs too bright - Deep sleep not working - High power consumption</p> <p>Solutions: 1. Reduce LED brightness in config 2. Enable deep sleep mode 3. Check for short circuits 4. Replace battery if old</p>"},{"location":"ASSEMBLY_GUIDE/#maintenance","title":"Maintenance","text":""},{"location":"ASSEMBLY_GUIDE/#regular-maintenance-monthly","title":"Regular Maintenance (Monthly)","text":"<ul> <li>Clean LED light pipe with microfiber cloth</li> <li>Check toggle switch tightness</li> <li>Verify USB-C port is clean</li> <li>Check battery runtime</li> </ul>"},{"location":"ASSEMBLY_GUIDE/#annual-maintenance","title":"Annual Maintenance","text":"<ul> <li>Check all solder joints for cracks</li> <li>Tighten screws if loose</li> <li>Test battery capacity (may need replacement after 3-5 years)</li> <li>Update firmware to latest version</li> </ul>"},{"location":"ASSEMBLY_GUIDE/#modifications-upgrades","title":"Modifications &amp; Upgrades","text":""},{"location":"ASSEMBLY_GUIDE/#add-external-antenna","title":"Add External Antenna","text":"<p>For better WiFi range, add external antenna to ESP32-C3</p>"},{"location":"ASSEMBLY_GUIDE/#upgrade-battery","title":"Upgrade Battery","text":"<p>Replace 2000mAh with 3000mAh for longer runtime</p>"},{"location":"ASSEMBLY_GUIDE/#add-oled-display","title":"Add OLED Display","text":"<p>Mount small OLED to show time remaining (requires firmware mod)</p>"},{"location":"ASSEMBLY_GUIDE/#wireless-charging","title":"Wireless Charging","text":"<p>Add Qi wireless charging module for cable-free charging</p>"},{"location":"ASSEMBLY_GUIDE/#congratulations","title":"Congratulations! \ud83c\udf89","text":"<p>You've successfully built your Wall Clock In Machine!</p> <p>Next Steps: 1. Read Configuration Guide to set up WiFi and API 2. Read Usage Guide for daily operation 3. Check Troubleshooting Guide if issues arise</p> <p>Share Your Build: - Take photos of your finished device - Post on social media with #WallClockInMachine - Submit improvements via GitHub PR</p> <p>Need Help? Open an issue on GitHub or check the FAQ!</p>"},{"location":"CONFIGURATION/","title":"Configuration Guide","text":"<p>Time Required: 15 minutes Prerequisite: Firmware installed (see Firmware Installation)</p>"},{"location":"CONFIGURATION/#overview","title":"Overview","text":"<p>This guide covers: 1. WiFi setup 2. API endpoint configuration 3. Customizing settings 4. Testing configuration 5. Troubleshooting</p>"},{"location":"CONFIGURATION/#first-time-setup","title":"First-Time Setup","text":""},{"location":"CONFIGURATION/#step-1-power-on-device","title":"Step 1: Power On Device","text":"<ol> <li>Ensure battery is charged (USB-C for 2 hours)</li> <li>Turn on device (if toggle switch used as power switch)</li> <li>Blue LED should start pulsing</li> </ol>"},{"location":"CONFIGURATION/#step-2-connect-to-setup-wifi","title":"Step 2: Connect to Setup WiFi","text":"<p>The device will try to connect to saved WiFi. If none configured:</p> <p>On your phone or computer: 1. Open WiFi settings 2. Look for network: WallClockIn-Setup 3. Connect (no password needed) 4. Wait 3-5 seconds</p> <p>A configuration page should open automatically - If not, open browser and go to: <code>http://192.168.4.1</code></p>"},{"location":"CONFIGURATION/#step-3-configure-wifi","title":"Step 3: Configure WiFi","text":"<p>On the configuration page:</p> <ol> <li>Click \"Configure WiFi\"</li> <li>Select your WiFi network from the list</li> <li>Enter WiFi password</li> <li>Scroll down to custom parameters:</li> </ol> <p>API Endpoint: <pre><code>https://your-api-domain.com\n</code></pre> (Don't include <code>/api/timer/start</code> - just the base URL)</p> <p>API Token (optional): <pre><code>your_bearer_token_here\n</code></pre> If your API requires authentication, enter your token.</p> <ol> <li>Click \"Save\"</li> </ol>"},{"location":"CONFIGURATION/#step-4-wait-for-connection","title":"Step 4: Wait for Connection","text":"<ul> <li>Device will save settings and reboot</li> <li>Blue LED pulses while connecting</li> <li>After 10-30 seconds:</li> <li>\u2705 Red LED = Connected successfully (clocked out)</li> <li>\u274c Yellow LED = Connection failed</li> </ul>"},{"location":"CONFIGURATION/#verifying-configuration","title":"Verifying Configuration","text":""},{"location":"CONFIGURATION/#check-serial-monitor","title":"Check Serial Monitor","text":"<p>If you have device connected via USB:</p> <pre><code># Open serial monitor\npio device monitor --baud 115200\n\n# You should see:\n[INFO] WiFi connected!\n[INFO] IP address: 192.168.1.42\n[INFO] API client configured for: https://your-api-domain.com\n[INFO] System ready!\n</code></pre>"},{"location":"CONFIGURATION/#test-button","title":"Test Button","text":"<ol> <li>Press toggle button</li> <li>Watch serial output:    <pre><code>[INFO] Button pressed: Clock In\n[API] POST /api/timer/start\n[API] Response: 200 OK\n[INFO] Clocked in successfully! Beat ID: 12345\n</code></pre></li> <li>Status LED should turn green</li> <li>Energy meter LEDs should light up (7 LEDs for 8 hours)</li> </ol>"},{"location":"CONFIGURATION/#check-your-api","title":"Check Your API","text":"<p>On your API backend, verify that the timer was started:</p> <pre><code># Example: Check current status\ncurl https://your-api-domain.com/api/timer/current \\\n  -H \"Authorization: Bearer your_token\"\n\n# Expected response:\n{\n  \"is_running\": true,\n  \"beat_id\": \"12345\",\n  \"started_at\": \"2025-10-29T08:00:00Z\",\n  \"elapsed\": 120\n}\n</code></pre>"},{"location":"CONFIGURATION/#api-endpoint-configuration","title":"API Endpoint Configuration","text":""},{"location":"CONFIGURATION/#format-requirements","title":"Format Requirements","text":"<p>Correct formats: <pre><code>https://api.example.com\nhttp://192.168.1.100:8000\nhttps://mydomain.com/beats\n</code></pre></p> <p>Incorrect formats (don't include endpoints): <pre><code>\u274c https://api.example.com/api/timer/start  (too specific)\n\u274c api.example.com  (missing protocol)\n\u274c https://api.example.com/  (trailing slash ok, but not needed)\n</code></pre></p>"},{"location":"CONFIGURATION/#api-endpoints-used","title":"API Endpoints Used","text":"<p>The device will make requests to these paths:</p> <p>Clock In: <pre><code>POST {your_endpoint}/api/timer/start\nContent-Type: application/json\nAuthorization: Bearer {your_token}\n\n{\n  \"project_id\": \"office-time\"\n}\n</code></pre></p> <p>Clock Out: <pre><code>POST {your_endpoint}/api/timer/stop\nContent-Type: application/json\nAuthorization: Bearer {your_token}\n\n{\n  \"beat_id\": \"12345\"\n}\n</code></pre></p> <p>Get Status (for recovery): <pre><code>GET {your_endpoint}/api/timer/current\nAuthorization: Bearer {your_token}\n</code></pre></p>"},{"location":"CONFIGURATION/#adapting-to-your-api","title":"Adapting to Your API","text":"<p>If your API has different endpoints, you'll need to modify the firmware:</p> <p>In <code>firmware/src/api_client.cpp</code>, change the paths:</p> <pre><code>// Change from:\nApiResponse ApiClient::clockIn(const char* project_id) {\n  return sendRequest(\"POST\", \"/api/timer/start\", payload.c_str());\n}\n\n// To your API's path:\nApiResponse ApiClient::clockIn(const char* project_id) {\n  return sendRequest(\"POST\", \"/your/custom/path\", payload.c_str());\n}\n</code></pre> <p>Then re-upload firmware.</p>"},{"location":"CONFIGURATION/#advanced-settings","title":"Advanced Settings","text":""},{"location":"CONFIGURATION/#changing-work-hours","title":"Changing Work Hours","text":"<p>Default is 8 hours. To change:</p> <p>Option 1: Via Preferences (requires code modification)</p> <p>In <code>firmware/src/config.h</code>: <pre><code>#define DEFAULT_WORK_HOURS  7  // Change to your desired hours\n</code></pre></p> <p>Option 2: Via Serial Commands (future feature)</p> <pre><code>&gt; set work_hours 7\nWork hours set to 7\n</code></pre>"},{"location":"CONFIGURATION/#adjusting-led-brightness","title":"Adjusting LED Brightness","text":"<p>Via code (in <code>firmware/src/config.h</code>): <pre><code>#define LED_BRIGHTNESS  64   // 0-255, lower = dimmer\n</code></pre></p> <p>Via configuration portal (future feature)</p>"},{"location":"CONFIGURATION/#changing-project-id","title":"Changing Project ID","text":"<p>The device sends <code>\"project_id\": \"office-time\"</code> by default.</p> <p>To change:</p> <p>In <code>firmware/src/config.h</code>: <pre><code>#define PROJECT_ID  \"your-project-name\"\n</code></pre></p>"},{"location":"CONFIGURATION/#enabledisable-deep-sleep","title":"Enable/Disable Deep Sleep","text":"<p>Deep sleep saves battery when clocked out.</p> <p>In <code>firmware/src/config.h</code>: <pre><code>// To disable sleep (always stay awake):\n#define ENABLE_DEEP_SLEEP  false\n</code></pre></p>"},{"location":"CONFIGURATION/#reconfiguring-device","title":"Reconfiguring Device","text":""},{"location":"CONFIGURATION/#method-1-long-press-reset","title":"Method 1: Long Press Reset","text":"<ol> <li>Hold toggle button for 5 seconds</li> <li>Status LED turns white (config mode)</li> <li>Device creates WiFi hotspot again</li> <li>Follow \"First-Time Setup\" steps above</li> </ol>"},{"location":"CONFIGURATION/#method-2-factory-reset","title":"Method 2: Factory Reset","text":"<p>Via Serial Monitor: <pre><code># Connect via USB\npio device monitor\n\n# Type:\nreset\n\n# Device will erase all settings and reboot\n</code></pre></p> <p>Via Button During Boot: 1. Disconnect power 2. Hold toggle button 3. Connect power while holding 4. Wait for white LED 5. Release button</p>"},{"location":"CONFIGURATION/#updating-configuration-without-reset","title":"Updating Configuration Without Reset","text":""},{"location":"CONFIGURATION/#via-web-interface-future-feature","title":"Via Web Interface (future feature)","text":"<p>When device is connected to WiFi:</p> <ol> <li>Open browser</li> <li>Go to <code>http://wall-clock-in.local</code> (or device IP)</li> <li>Log in (default password: <code>admin</code>)</li> <li>Update settings</li> <li>Click Save</li> </ol>"},{"location":"CONFIGURATION/#via-serial-commands","title":"Via Serial Commands","text":"<pre><code># Connect serial monitor\npio device monitor\n\n# Update API endpoint\n&gt; set api_endpoint https://new-api.com\nAPI endpoint updated\n\n# Update API token\n&gt; set api_token new_token_here\nAPI token updated\n\n# Save changes\n&gt; save\nConfiguration saved\n\n# Reboot to apply\n&gt; reboot\n</code></pre>"},{"location":"CONFIGURATION/#wifi-troubleshooting","title":"WiFi Troubleshooting","text":""},{"location":"CONFIGURATION/#cant-see-wallclockin-setup-network","title":"Can't See \"WallClockIn-Setup\" Network","text":"<p>Possible causes: - Device already connected to your WiFi - Waiting period hasn't elapsed (wait 30 seconds) - Device in error state</p> <p>Solutions: 1. Hold button for 5 seconds (force config mode) 2. Power cycle device 3. Check if device already connected (check router)</p>"},{"location":"CONFIGURATION/#wont-connect-to-home-wifi","title":"Won't Connect to Home WiFi","text":"<p>Common issues:</p> <p>5GHz Network: ESP32 only supports 2.4GHz - Solution: Use 2.4GHz network or set up dual-band</p> <p>Special Characters in Password: Some characters cause issues - Solution: Change WiFi password to alphanumeric</p> <p>Hidden Network: Must enter SSID manually - Solution: Type SSID in custom field</p> <p>MAC Filtering: Router blocks unknown devices - Solution: Add device MAC to whitelist</p> <p>Weak Signal: Too far from router - Solution: Move closer during setup, or use WiFi extender</p>"},{"location":"CONFIGURATION/#connection-drops-frequently","title":"Connection Drops Frequently","text":"<p>Causes: - Weak WiFi signal - Router sleeps idle connections - Power saving too aggressive</p> <p>Solutions: 1. Move device closer to router 2. Use WiFi extender 3. Disable WiFi sleep on router 4. In firmware, disable power saving:    <pre><code>WiFi.setSleep(false);\n</code></pre></p>"},{"location":"CONFIGURATION/#api-troubleshooting","title":"API Troubleshooting","text":""},{"location":"CONFIGURATION/#api-error-yellow-led","title":"\"API Error\" - Yellow LED","text":"<p>Check serial monitor for specific error:</p> <p>Error: \"Connection failed\" - Device can't reach API server - Check:   - API endpoint URL correct?   - Server online?   - Firewall blocking ESP32?   - HTTPS certificate valid?</p> <p>Error: \"HTTP 401 Unauthorized\" - API token incorrect or missing - Update token in configuration</p> <p>Error: \"HTTP 404 Not Found\" - API endpoint path wrong - Verify paths in <code>api_client.cpp</code></p> <p>Error: \"HTTP 500 Internal Server Error\" - API backend has an issue - Check API logs</p> <p>Error: \"Timeout\" - API too slow to respond (&gt;10 seconds) - Optimize API or increase timeout</p>"},{"location":"CONFIGURATION/#testing-api-manually","title":"Testing API Manually","text":"<p>Before blaming the device, test your API:</p> <pre><code># Test clock in\ncurl -X POST https://your-api.com/api/timer/start \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer your_token\" \\\n  -d '{\"project_id\": \"office-time\"}'\n\n# Expected: 200 OK with beat_id\n\n# Test clock out\ncurl -X POST https://your-api.com/api/timer/stop \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer your_token\" \\\n  -d '{\"beat_id\": \"test123\"}'\n\n# Expected: 200 OK\n</code></pre> <p>If these fail, fix your API first.</p>"},{"location":"CONFIGURATION/#security-considerations","title":"Security Considerations","text":""},{"location":"CONFIGURATION/#api-token-safety","title":"API Token Safety","text":"<p>Don't: - Share your token publicly - Commit token to Git - Use admin tokens (use limited-scope token)</p> <p>Do: - Create device-specific API token - Limit token permissions (only timer access) - Rotate tokens periodically - Revoke if device lost/stolen</p>"},{"location":"CONFIGURATION/#network-security","title":"Network Security","text":"<p>Recommendations: - Use HTTPS for API (not HTTP) - Connect to secure WiFi (WPA2/WPA3) - Keep firmware updated - Don't expose device config portal to internet</p>"},{"location":"CONFIGURATION/#configuration-file-reference","title":"Configuration File Reference","text":"<p>Settings are stored in ESP32 non-volatile memory:</p> <pre><code>// Namespace: \"wallclock\"\nPreferences prefs;\n\n// Stored keys:\napi_endpoint     // String, max 128 chars\napi_token        // String, max 64 chars\nwork_hours       // UInt8, default 8\nled_brightness   // UInt8, default 128\nbeat_id          // String, current session\nclock_in_time    // ULong, Unix timestamp\n</code></pre>"},{"location":"CONFIGURATION/#backup-configuration","title":"Backup Configuration","text":"<p>To backup settings:</p> <p>Via Serial: <pre><code>&gt; config dump\napi_endpoint: https://api.example.com\napi_token: abc123xyz\nwork_hours: 8\nled_brightness: 128\n</code></pre></p> <p>Copy this output and save somewhere safe!</p>"},{"location":"CONFIGURATION/#restore-configuration","title":"Restore Configuration","text":"<p>Via Serial: <pre><code>&gt; config restore\n&gt; set api_endpoint https://api.example.com\n&gt; set api_token abc123xyz\n&gt; set work_hours 8\n&gt; set led_brightness 128\n&gt; save\n</code></pre></p>"},{"location":"CONFIGURATION/#next-steps","title":"Next Steps","text":"<p>\u2705 Configuration complete!</p> <p>Continue to: - Usage Guide - Daily operation - Troubleshooting - Common issues - API Integration - Customize API endpoints</p> <p>Questions? Check FAQ or open an issue!</p>"},{"location":"FIRMWARE_INSTALLATION/","title":"Firmware Installation Guide","text":"<p>Time Required: 30-45 minutes (first time), 5 minutes (updates) Skill Level: Beginner Prerequisites: Computer with USB port, internet connection</p>"},{"location":"FIRMWARE_INSTALLATION/#overview","title":"Overview","text":"<p>This guide will help you install the firmware on your Wall Clock In Machine. You'll learn how to:</p> <ol> <li>Set up the development environment</li> <li>Download the firmware</li> <li>Configure for your setup</li> <li>Upload to the device</li> <li>Verify it works</li> <li>Update firmware in the future</li> </ol>"},{"location":"FIRMWARE_INSTALLATION/#method-1-platformio-recommended","title":"Method 1: PlatformIO (Recommended)","text":"<p>Best for: Developers, people comfortable with command line</p>"},{"location":"FIRMWARE_INSTALLATION/#step-1-install-prerequisites","title":"Step 1: Install Prerequisites","text":"<p>Install Python (if not already installed): <pre><code># macOS (using Homebrew)\nbrew install python3\n\n# Verify installation\npython3 --version\n</code></pre></p> <p>Install PlatformIO Core: <pre><code># Install via pip\npip3 install platformio\n\n# Verify installation\npio --version\n</code></pre></p>"},{"location":"FIRMWARE_INSTALLATION/#step-2-download-firmware","title":"Step 2: Download Firmware","text":"<p>Option A: Clone Git Repository <pre><code>cd ~/projects/\ngit clone https://github.com/yourusername/wallClockInMachine.git\ncd wallClockInMachine/firmware/\n</code></pre></p> <p>Option B: Download ZIP 1. Go to GitHub repository 2. Click \"Code\" \u2192 \"Download ZIP\" 3. Extract to your projects folder 4. Navigate to <code>firmware/</code> directory</p>"},{"location":"FIRMWARE_INSTALLATION/#step-3-install-dependencies","title":"Step 3: Install Dependencies","text":"<pre><code>cd firmware/\n\n# PlatformIO will automatically install all libraries\npio lib install\n\n# This installs:\n# - FastLED (LED control)\n# - WiFiManager (WiFi setup)\n# - ArduinoJson (JSON parsing)\n</code></pre>"},{"location":"FIRMWARE_INSTALLATION/#step-4-build-firmware","title":"Step 4: Build Firmware","text":"<pre><code># Build firmware (compiles but doesn't upload)\npio run\n\n# Expected output:\n# ...\n# Building in release mode\n# ...\n# ============ [SUCCESS] ============\n</code></pre> <p>Troubleshooting Build Errors: - <code>platformio: command not found</code> \u2192 Add to PATH or use full path - <code>No module named 'platformio'</code> \u2192 Reinstall PlatformIO - <code>Library not found</code> \u2192 Run <code>pio lib install</code> again</p>"},{"location":"FIRMWARE_INSTALLATION/#step-5-connect-device","title":"Step 5: Connect Device","text":"<ol> <li>Connect ESP32-C3 to computer via USB-C cable</li> <li>Board should appear as serial device</li> </ol> <p>Find your device port: <pre><code># macOS/Linux\npio device list\n\n# Look for output like:\n# /dev/cu.usbserial-110  ESP32-C3\n\n# Your port might be:\n# macOS: /dev/cu.usbserial-* or /dev/cu.wchusbserial*\n# Linux: /dev/ttyUSB0 or /dev/ttyACM0\n</code></pre></p>"},{"location":"FIRMWARE_INSTALLATION/#step-6-upload-firmware","title":"Step 6: Upload Firmware","text":"<pre><code># Upload firmware to device\npio run --target upload\n\n# Or specify port explicitly:\npio run --target upload --upload-port /dev/cu.usbserial-110\n\n# Expected output:\n# ...\n# Writing at 0x00010000... (100 %)\n# Wrote 123456 bytes (67890 compressed)\n# Hash of data verified.\n# Leaving... Hard resetting via RTS pin...\n# ============ [SUCCESS] ============\n</code></pre> <p>Common Upload Issues: - <code>Failed to connect to ESP32</code> \u2192 Press and hold BOOT button while uploading - <code>Permission denied</code> \u2192 Add user to dialout group (Linux) or use sudo - <code>Could not open port</code> \u2192 Close any serial monitors first</p>"},{"location":"FIRMWARE_INSTALLATION/#step-7-monitor-serial-output","title":"Step 7: Monitor Serial Output","text":"<pre><code># Open serial monitor\npio device monitor\n\n# Or with specific baud rate:\npio device monitor --baud 115200\n\n# You should see:\n# =================================\n# Wall Clock In Machine v1.0.0\n# =================================\n# [INFO] Connecting to WiFi...\n</code></pre> <p>To exit monitor: Press <code>Ctrl+C</code></p>"},{"location":"FIRMWARE_INSTALLATION/#method-2-arduino-ide-easier-for-beginners","title":"Method 2: Arduino IDE (Easier for Beginners)","text":"<p>Best for: First-time users, visual preference</p>"},{"location":"FIRMWARE_INSTALLATION/#step-1-install-arduino-ide","title":"Step 1: Install Arduino IDE","text":"<ol> <li>Download from arduino.cc/en/software</li> <li>Install for your operating system</li> <li>Launch Arduino IDE 2.0+</li> </ol>"},{"location":"FIRMWARE_INSTALLATION/#step-2-install-esp32-board-support","title":"Step 2: Install ESP32 Board Support","text":"<p>In Arduino IDE: 1. Go to <code>File</code> \u2192 <code>Preferences</code> 2. Add to \"Additional Board Manager URLs\":    <pre><code>https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json\n</code></pre> 3. Click <code>OK</code> 4. Go to <code>Tools</code> \u2192 <code>Board</code> \u2192 <code>Boards Manager</code> 5. Search for \"esp32\" 6. Install \"esp32 by Espressif Systems\" (version 2.0.14 or later) 7. Wait for installation to complete</p>"},{"location":"FIRMWARE_INSTALLATION/#step-3-install-required-libraries","title":"Step 3: Install Required Libraries","text":"<p>In Arduino IDE: 1. Go to <code>Sketch</code> \u2192 <code>Include Library</code> \u2192 <code>Manage Libraries</code> 2. Search and install each:    - FastLED by Daniel Garcia    - WiFiManager by tzapu    - ArduinoJson by Benoit Blanchon</p>"},{"location":"FIRMWARE_INSTALLATION/#step-4-open-firmware","title":"Step 4: Open Firmware","text":"<ol> <li>Download firmware from GitHub (see Method 1, Step 2)</li> <li>In Arduino IDE: <code>File</code> \u2192 <code>Open</code></li> <li>Navigate to <code>firmware/src/main.cpp</code></li> <li>Click <code>Open</code></li> </ol>"},{"location":"FIRMWARE_INSTALLATION/#step-5-configure-board-settings","title":"Step 5: Configure Board Settings","text":"<p>In Arduino IDE: 1. Go to <code>Tools</code> \u2192 <code>Board</code> \u2192 <code>ESP32 Arduino</code> \u2192 <code>ESP32C3 Dev Module</code> 2. Set these options:    - CPU Frequency: 160MHz    - Flash Frequency: 80MHz    - Flash Mode: QIO    - Flash Size: 4MB    - Partition Scheme: Default 4MB with spiffs    - Upload Speed: 921600    - USB CDC On Boot: Enabled    - USB Mode: Hardware CDC and JTAG    - Port: Select your ESP32-C3 device</p>"},{"location":"FIRMWARE_INSTALLATION/#step-6-upload","title":"Step 6: Upload","text":"<ol> <li>Connect ESP32-C3 via USB-C</li> <li>Click the Upload button (\u2192 arrow icon)</li> <li>Wait for compilation and upload</li> <li>Watch for \"Done uploading\" message</li> </ol>"},{"location":"FIRMWARE_INSTALLATION/#step-7-open-serial-monitor","title":"Step 7: Open Serial Monitor","text":"<ol> <li>Click <code>Tools</code> \u2192 <code>Serial Monitor</code></li> <li>Set baud rate to <code>115200</code></li> <li>You should see device boot messages</li> </ol>"},{"location":"FIRMWARE_INSTALLATION/#method-3-pre-compiled-binary-quickest","title":"Method 3: Pre-Compiled Binary (Quickest)","text":"<p>Best for: Non-developers, quick testing</p>"},{"location":"FIRMWARE_INSTALLATION/#step-1-download-esptool","title":"Step 1: Download ESPTool","text":"<pre><code># Install esptool\npip3 install esptool\n\n# Verify\nesptool.py version\n</code></pre>"},{"location":"FIRMWARE_INSTALLATION/#step-2-download-pre-compiled-firmware","title":"Step 2: Download Pre-Compiled Firmware","text":"<ol> <li>Go to GitHub Releases</li> <li>Download latest <code>firmware.bin</code></li> <li>Save to your Downloads folder</li> </ol>"},{"location":"FIRMWARE_INSTALLATION/#step-3-flash-firmware","title":"Step 3: Flash Firmware","text":"<pre><code># Navigate to downloads\ncd ~/Downloads/\n\n# Find your device port\nesptool.py --port /dev/cu.usbserial-110 chip_id\n\n# Flash firmware\nesptool.py --port /dev/cu.usbserial-110 write_flash 0x10000 firmware.bin\n\n# Expected output:\n# ...\n# Hash of data verified.\n# \n# Leaving...\n# Hard resetting via RTS pin...\n</code></pre> <p>Parameters Explanation: - <code>--port</code>: Your device's serial port - <code>write_flash</code>: Command to write firmware - <code>0x10000</code>: Memory address (don't change) - <code>firmware.bin</code>: Your firmware file</p>"},{"location":"FIRMWARE_INSTALLATION/#configuration-after-installation","title":"Configuration After Installation","text":""},{"location":"FIRMWARE_INSTALLATION/#first-boot","title":"First Boot","text":"<p>When device powers on for first time:</p> <ol> <li>Blue LED pulses (trying to connect to WiFi)</li> <li>After 30 seconds, creates WiFi hotspot: <code>WallClockIn-Setup</code></li> <li>Connect to this hotspot with phone or computer</li> <li>Browser opens automatically (or go to http://192.168.4.1)</li> <li>Enter your WiFi credentials and API endpoint</li> <li>Click Save</li> <li>Device reboots and connects to your WiFi</li> </ol>"},{"location":"FIRMWARE_INSTALLATION/#detailed-configuration","title":"Detailed Configuration","text":"<p>See Configuration Guide for complete setup instructions.</p>"},{"location":"FIRMWARE_INSTALLATION/#verifying-installation","title":"Verifying Installation","text":""},{"location":"FIRMWARE_INSTALLATION/#check-serial-output","title":"Check Serial Output","text":"<p>Connect to serial monitor and look for:</p> <pre><code>=================================\nWall Clock In Machine v1.0.0\n=================================\n[INFO] Button handler initialized on pin 9\n[INFO] LED controller initialized with 8 LEDs\n[INFO] Connecting to WiFi...\n[INFO] WiFi connected!\n[INFO] IP address: 192.168.1.42\n[INFO] API client configured for: https://api.example.com\n[INFO] System ready!\n[INFO] Battery: 87% (3.92V)\n</code></pre>"},{"location":"FIRMWARE_INSTALLATION/#visual-checks","title":"Visual Checks","text":"<ul> <li>\u2705 Status LED lights up (color depends on state)</li> <li>\u2705 Pressing button changes LED color</li> <li>\u2705 Energy meter LEDs light up when clocked in</li> <li>\u2705 Device responds within 1 second</li> </ul>"},{"location":"FIRMWARE_INSTALLATION/#test-api-connection","title":"Test API Connection","text":"<ol> <li>Press toggle button \u2192 Clock In</li> <li>Watch serial monitor for:    <pre><code>[INFO] Button pressed: Clock In\n[API] POST /api/timer/start\n[API] Response: 200 OK\n[INFO] Now working, energy meter started\n</code></pre></li> <li>Status LED should turn green</li> <li>Energy meter should show 8 hours remaining</li> </ol>"},{"location":"FIRMWARE_INSTALLATION/#updating-firmware","title":"Updating Firmware","text":""},{"location":"FIRMWARE_INSTALLATION/#over-the-air-ota-updates","title":"Over-The-Air (OTA) Updates","text":"<p>Once device is on WiFi, you can update wirelessly!</p> <pre><code>cd firmware/\n\n# Upload via OTA (must be on same network)\npio run --target upload --upload-port wall-clock-in.local\n\n# Or use IP address directly:\npio run --target upload --upload-port 192.168.1.42\n</code></pre> <p>Advantages: - No USB cable needed - Update device while it's mounted on desk - Faster than USB</p> <p>Requirements: - Device must be powered on - Connected to same WiFi network - OTA enabled in firmware (default)</p>"},{"location":"FIRMWARE_INSTALLATION/#usb-updates","title":"USB Updates","text":"<p>Same as initial installation:</p> <pre><code># Connect via USB-C\npio run --target upload\n</code></pre>"},{"location":"FIRMWARE_INSTALLATION/#automatic-update-check","title":"Automatic Update Check","text":"<p>Future Feature: Device will check for updates daily and prompt you.</p>"},{"location":"FIRMWARE_INSTALLATION/#troubleshooting","title":"Troubleshooting","text":""},{"location":"FIRMWARE_INSTALLATION/#could-not-open-port-error","title":"\"Could not open port\" Error","text":"<p>Cause: Port is already in use or permission issue</p> <p>Solutions: <pre><code># macOS: Reset USB device\nsudo killall -STOP -c usb\n\n# Linux: Add user to dialout group\nsudo usermod -a -G dialout $USER\n# Then log out and back in\n\n# Or use sudo (not recommended)\nsudo pio run --target upload\n</code></pre></p>"},{"location":"FIRMWARE_INSTALLATION/#failed-to-connect-to-esp32-error","title":"\"Failed to connect to ESP32\" Error","text":"<p>Cause: Device not in bootloader mode</p> <p>Solutions: 1. Hold BOOT button on ESP32 2. Press RESET button briefly 3. Release BOOT button 4. Try upload again</p> <p>Or:</p> <ol> <li>Disconnect USB</li> <li>Hold BOOT button</li> <li>Connect USB while holding</li> <li>Release BOOT after 2 seconds</li> <li>Try upload</li> </ol>"},{"location":"FIRMWARE_INSTALLATION/#brownout-detector-was-triggered-error","title":"\"Brownout detector was triggered\" Error","text":"<p>Cause: Insufficient power from USB port</p> <p>Solutions: - Use different USB port (avoid hubs) - Use powered USB hub - Try different USB cable (some are charge-only) - Connect directly to computer, not through hub</p>"},{"location":"FIRMWARE_INSTALLATION/#upload-works-but-device-doesnt-boot","title":"Upload Works But Device Doesn't Boot","text":"<p>Possible Causes: 1. Wrong board selected in Arduino IDE 2. Incorrect partition scheme 3. Corrupted firmware</p> <p>Solutions: 1. Erase flash completely:    <pre><code>esptool.py --port /dev/cu.usbserial-110 erase_flash\n</code></pre> 2. Re-upload firmware 3. Check serial monitor for errors</p>"},{"location":"FIRMWARE_INSTALLATION/#libraries-not-found","title":"Libraries Not Found","text":"<p>Arduino IDE: 1. <code>Sketch</code> \u2192 <code>Include Library</code> \u2192 <code>Manage Libraries</code> 2. Reinstall each library 3. Restart Arduino IDE</p> <p>PlatformIO: <pre><code># Clean and reinstall\npio lib uninstall --all\npio lib install\n</code></pre></p>"},{"location":"FIRMWARE_INSTALLATION/#development-tips","title":"Development Tips","text":""},{"location":"FIRMWARE_INSTALLATION/#enable-debug-logging","title":"Enable Debug Logging","text":"<p>In <code>src/config.h</code>, change: <pre><code>#define LOG_LEVEL LOG_LEVEL_DEBUG\n</code></pre></p> <p>This shows detailed information: <pre><code>[DEBUG] Button pressed\n[DEBUG] LED brightness set to 128\n[DEBUG] Energy meter: 6/8 hours, 5 LEDs lit\n</code></pre></p>"},{"location":"FIRMWARE_INSTALLATION/#test-mode","title":"Test Mode","text":"<p>Hold button during boot for 5 seconds to enter test modes: - LED test: All LEDs cycle through colors - WiFi test: Show IP address - API test: Send test request - Battery test: Show voltage and percentage</p>"},{"location":"FIRMWARE_INSTALLATION/#debugging-tools","title":"Debugging Tools","text":"<p>PlatformIO Debugger (advanced): <pre><code># Launch debugger\npio debug\n\n# Set breakpoint at main.cpp line 50\nbreak main.cpp:50\n\n# Continue execution\ncontinue\n</code></pre></p>"},{"location":"FIRMWARE_INSTALLATION/#next-steps","title":"Next Steps","text":"<p>\u2705 Firmware installed successfully!</p> <p>Continue to: 1. Configuration Guide - Set up WiFi and API 2. Usage Guide - Daily operation 3. Troubleshooting - Common issues</p> <p>Questions? Check the FAQ or open an issue on GitHub!</p>"},{"location":"TROUBLESHOOTING/","title":"Troubleshooting Guide","text":"<p>Common issues and solutions for the Wall Clock In Machine</p>"},{"location":"TROUBLESHOOTING/#quick-diagnostic-flowchart","title":"Quick Diagnostic Flowchart","text":"<pre><code>Device not responding?\n\u251c\u2500 No LED lit at all?\n\u2502  \u251c\u2500 Yes \u2192 Check POWER issues (Section 1)\n\u2502  \u2514\u2500 No \u2192 LED lit? Continue...\n\u2502\n\u251c\u2500 Yellow LED blinking?\n\u2502  \u251c\u2500 Yes \u2192 Check API/NETWORK issues (Section 2)\n\u2502  \u2514\u2500 No \u2192 Continue...\n\u2502\n\u251c\u2500 Button not working?\n\u2502  \u251c\u2500 Yes \u2192 Check BUTTON issues (Section 3)\n\u2502  \u2514\u2500 No \u2192 Continue...\n\u2502\n\u251c\u2500 WiFi not connecting?\n\u2502  \u2514\u2500 Yes \u2192 Check WIFI issues (Section 4)\n\u2502\n\u2514\u2500 Everything powers on but doesn't work?\n   \u2514\u2500 Check FIRMWARE issues (Section 5)\n</code></pre>"},{"location":"TROUBLESHOOTING/#section-1-power-issues","title":"Section 1: Power Issues","text":""},{"location":"TROUBLESHOOTING/#problem-no-leds-light-up","title":"Problem: No LEDs Light Up","text":"<p>Possible Causes: - Battery dead/disconnected - Power switch off - Hardware failure - Firmware not loaded</p> <p>Diagnostic Steps:</p> <ol> <li> <p>Check battery voltage:    <pre><code># Multimeter on battery connector\n# Should read 3.0V - 4.2V\n# &lt; 3.0V = dead battery\n</code></pre></p> </li> <li> <p>Check USB power:</p> </li> <li>Plug in USB-C cable</li> <li>TP4056 should have LED (red=charging, blue=done)</li> <li> <p>If no TP4056 LED \u2192 charger module dead or bad cable</p> </li> <li> <p>Check connections:</p> </li> <li>Battery connector properly seated?</li> <li>Wires from TP4056 OUT+ and OUT- connected?</li> <li> <p>ESP32 getting power? (measure 3.3V on 3.3V pin)</p> </li> <li> <p>Bypass test:</p> </li> <li>Connect USB directly to ESP32 (3.3V/5V pin)</li> <li>If ESP32 boots \u2192 Power circuit issue</li> <li>If still nothing \u2192 ESP32 may be dead</li> </ol> <p>Solutions:</p> Symptom Solution Battery voltage &lt; 3.0V Charge battery for 3+ hours, replace if won't charge No TP4056 LED when plugged Replace TP4056 module or USB cable ESP32 doesn't boot on USB power Re-flash firmware or replace ESP32 Voltage present but no boot Check reset circuit, shorting RST to GND briefly"},{"location":"TROUBLESHOOTING/#problem-device-powers-off-randomly","title":"Problem: Device Powers Off Randomly","text":"<p>Possible Causes: - Loose battery connection - Brownout (voltage too low) - Software crash</p> <p>Solutions:</p> <ol> <li>Secure battery connector:</li> <li>Re-seat JST connector</li> <li> <p>Add drop of hot glue for strain relief</p> </li> <li> <p>Check voltage under load:    <pre><code># Monitor battery voltage while LEDs on\n# Should stay &gt; 3.0V\n# Drops below 3.0V = weak battery or bad connection\n</code></pre></p> </li> <li> <p>Enable brownout detector logs:    <pre><code>// In main.cpp setup():\nesp_register_shutdown_handler(&amp;logShutdownReason);\n</code></pre></p> </li> <li> <p>Add more capacitance:</p> </li> <li>100\u00b5F capacitor near ESP32 power pins</li> <li>Helps with voltage spikes</li> </ol>"},{"location":"TROUBLESHOOTING/#section-2-network-api-issues","title":"Section 2: Network &amp; API Issues","text":""},{"location":"TROUBLESHOOTING/#problem-yellow-led-api-error","title":"Problem: Yellow LED (API Error)","text":"<p>What device is trying to do: 1. Connect to WiFi \u2705 2. Make HTTP/HTTPS request to API \u274c (failing here)</p> <p>Check serial monitor first: <pre><code>pio device monitor --baud 115200\n\n# Look for specific error:\n[ERROR] HTTP error: 401  \u2192 Authentication problem\n[ERROR] HTTP error: 404  \u2192 Wrong endpoint\n[ERROR] HTTP error: 500  \u2192 API server error\n[ERROR] Connection failed \u2192 Network/SSL issue\n[ERROR] Timeout \u2192 API too slow\n</code></pre></p> <p>Common HTTP Error Codes:</p> Code Meaning Solution 401 Unauthorized Check API token, update in config 403 Forbidden API token doesn't have permissions 404 Not Found Verify API endpoint path in firmware 429 Too Many Requests Wait 1 minute, API rate limited 500 Server Error Check your API backend logs 502/503 Service Unavailable API server down, wait or restart it <p>Testing API Manually:</p> <pre><code># Test from computer on same network\ncurl -v -X POST https://your-api.com/api/timer/start \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer your_token\" \\\n  -d '{\"project_id\": \"office-time\"}'\n\n# Check:\n# - Does it work from computer?\n# - What response code?\n# - Any error messages?\n</code></pre> <p>Solutions:</p> <ol> <li> <p>401/403 Errors:    <pre><code># Re-enter correct API token\n# Long-press button \u2192 Config mode\n# Update token via web portal\n</code></pre></p> </li> <li> <p>404 Errors:</p> </li> <li>Verify API paths in <code>firmware/src/api_client.cpp</code></li> <li>Ensure paths match your API documentation</li> <li> <p>Re-compile and upload firmware</p> </li> <li> <p>SSL/Certificate Errors:    <pre><code>// In api_client.cpp, we use:\nsecure_client-&gt;setInsecure();\n\n// This skips certificate validation\n// If you want proper validation:\nsecure_client-&gt;setCACert(your_ca_cert);\n</code></pre></p> </li> <li> <p>Timeout Errors:</p> </li> <li>API taking &gt;10 seconds to respond</li> <li>Increase timeout in config.h:      <pre><code>#define API_TIMEOUT_MS  20000  // 20 seconds\n</code></pre></li> </ol>"},{"location":"TROUBLESHOOTING/#problem-blue-led-pulsing-wifi-connecting","title":"Problem: Blue LED Pulsing (WiFi Connecting)","text":"<p>Device stuck trying to connect to WiFi</p> <p>Diagnostic: <pre><code># Serial monitor shows:\n[INFO] Connecting to WiFi: YourNetwork\n[INFO] Connecting to WiFi: YourNetwork\n[INFO] Connecting to WiFi: YourNetwork\n# (repeating forever)\n</code></pre></p> <p>Common Causes:</p> <ol> <li>Wrong WiFi password</li> <li> <p>Solution: Long-press reset \u2192 Re-enter credentials</p> </li> <li> <p>5GHz network</p> </li> <li>ESP32 only supports 2.4GHz</li> <li> <p>Solution: Connect to 2.4GHz network or enable dual-band</p> </li> <li> <p>Hidden network</p> </li> <li> <p>Solution: Manually enter SSID in config portal</p> </li> <li> <p>Special characters in password</p> </li> <li>Some chars like <code>\"</code> or <code>$</code> cause issues</li> <li> <p>Solution: Change WiFi password or escape properly</p> </li> <li> <p>MAC filtering</p> </li> <li>Router blocks unknown devices</li> <li>Solution: Add ESP32 MAC address to whitelist</li> <li> <p>Find MAC: Check serial monitor at boot or router admin</p> </li> <li> <p>Too far from router</p> </li> <li>Weak signal</li> <li> <p>Solution: Move closer or use WiFi extender</p> </li> <li> <p>WPA3-only network</p> </li> <li>ESP32 supports WPA2</li> <li>Solution: Enable WPA2/WPA3 mixed mode on router</li> </ol> <p>Solutions:</p> <pre><code># Force config mode\n# Hold button for 5 seconds \u2192 White LED\n\n# Connect to \"WallClockIn-Setup\"\n# Re-enter WiFi credentials carefully\n\n# If still failing, test with phone hotspot:\n# 1. Create hotspot on phone (2.4GHz, simple password)\n# 2. Configure device to connect to hotspot\n# 3. If works \u2192 Problem is home WiFi settings\n# 4. If fails \u2192 Device hardware/firmware issue\n</code></pre>"},{"location":"TROUBLESHOOTING/#problem-wifi-connects-then-disconnects","title":"Problem: WiFi Connects Then Disconnects","text":"<p>Symptoms: Connects successfully, works for a while, then drops</p> <p>Causes: - Power saving too aggressive - Router disconnects idle clients - Weak signal causing reconnects</p> <p>Solutions:</p> <ol> <li> <p>Disable WiFi sleep (in main.cpp):    <pre><code>void setup() {\n  // After WiFi.begin()\n  WiFi.setSleep(false);\n}\n</code></pre></p> </li> <li> <p>Reserve IP address:</p> </li> <li>In router admin, assign static IP to ESP32 MAC</li> <li> <p>Prevents DHCP lease expiration disconnects</p> </li> <li> <p>Keep-alive pings:    <pre><code>// In loop(), ping gateway every 5 minutes\nif (millis() - lastPing &gt; 300000) {\n  WiFi.ping(WiFi.gatewayIP());\n  lastPing = millis();\n}\n</code></pre></p> </li> <li> <p>Improve signal strength:</p> </li> <li>Add external antenna to ESP32</li> <li>Move device closer to router</li> <li>Use WiFi extender/repeater</li> </ol>"},{"location":"TROUBLESHOOTING/#section-3-button-issues","title":"Section 3: Button Issues","text":""},{"location":"TROUBLESHOOTING/#problem-button-press-not-detected","title":"Problem: Button Press Not Detected","text":"<p>Symptoms: Press button, nothing happens, no logs</p> <p>Diagnostic: <pre><code># Serial monitor with debug enabled\n# Should see when button pressed:\n[DEBUG] Button pressed\n</code></pre></p> <p>Testing button hardware: <pre><code># With multimeter in continuity mode:\n# Toggle switch position 1: Common &lt;-&gt; Terminal 1 (beep)\n# Toggle switch position 2: Common &lt;-&gt; Terminal 2 (beep)\n# No beep = faulty switch\n</code></pre></p> <p>Causes &amp; Solutions:</p> <ol> <li>GPIO not connected:</li> <li>Check wire from GPIO9 to switch</li> <li>Verify solder joint not cold/broken</li> <li> <p>Test continuity</p> </li> <li> <p>Internal pull-up not enabled:    <pre><code>// In button_handler.cpp, verify:\npinMode(pin, INPUT_PULLUP);\n</code></pre></p> </li> <li> <p>Switch bouncing excessively:</p> </li> <li>Add external 10k\u03a9 pull-up resistor</li> <li> <p>Add 0.1\u00b5F capacitor across switch terminals</p> </li> <li> <p>Wrong GPIO pin:</p> </li> <li>Verify using GPIO9 (not GPIO10 or other)</li> <li> <p>Some GPIOs are input-only or have special functions</p> </li> <li> <p>Firmware not running:</p> </li> <li>Check serial monitor for boot messages</li> <li>If silent \u2192 firmware not loaded or crashed</li> </ol> <p>Testing in isolation: <pre><code>// Minimal button test code\nvoid setup() {\n  Serial.begin(115200);\n  pinMode(9, INPUT_PULLUP);\n}\n\nvoid loop() {\n  int state = digitalRead(9);\n  Serial.printf(\"Button: %d\\n\", state);\n  delay(100);\n}\n\n// Upload this test code\n// Press button and watch serial output\n// Should toggle between 0 (pressed) and 1 (released)\n</code></pre></p>"},{"location":"TROUBLESHOOTING/#problem-button-triggers-multiple-times-bouncing","title":"Problem: Button Triggers Multiple Times (Bouncing)","text":"<p>Symptoms: One press registers as 2-3 presses</p> <p>Cause: Mechanical switch bounce not properly debounced</p> <p>Solutions:</p> <ol> <li> <p>Increase debounce time (in config.h):    <pre><code>#define BUTTON_DEBOUNCE_MS  100  // Increase from 50 to 100\n</code></pre></p> </li> <li> <p>Add hardware debouncing:</p> </li> <li>0.1\u00b5F capacitor across switch terminals</li> <li> <p>OR 10k\u03a9 resistor + 0.1\u00b5F capacitor (RC filter)</p> </li> <li> <p>Better quality switch:</p> </li> <li>Replace with higher quality toggle switch</li> <li>Gold-plated contacts have less bounce</li> </ol>"},{"location":"TROUBLESHOOTING/#problem-long-press-not-working","title":"Problem: Long Press Not Working","text":"<p>Symptoms: Can't enter config mode</p> <p>Cause: Long press threshold too long or button handler issue</p> <p>Solutions:</p> <ol> <li> <p>Reduce long press time (in config.h):    <pre><code>#define BUTTON_LONG_PRESS_MS  2000  // Reduce from 3000 to 2000\n</code></pre></p> </li> <li> <p>Test explicitly:    <pre><code># Serial monitor with debug:\n# Hold button and watch:\n[DEBUG] Button pressed\n# (after 3 seconds)\n[INFO] Button long press detected\n</code></pre></p> </li> <li> <p>Use serial command instead:    <pre><code># Type in serial monitor:\nconfig\n# Enters config mode without button\n</code></pre></p> </li> </ol>"},{"location":"TROUBLESHOOTING/#section-4-led-issues","title":"Section 4: LED Issues","text":""},{"location":"TROUBLESHOOTING/#problem-no-leds-light-up_1","title":"Problem: No LEDs Light Up","text":"<p>But status LED (first LED) works</p> <p>Causes: - LED strip not powered - DATA pin not connected - LED strip damaged</p> <p>Testing:</p> <ol> <li> <p>Check LED power:    <pre><code># Measure voltage on LED strip VCC pin\n# Should be 3.3V or 5V (depending on your wiring)\n</code></pre></p> </li> <li> <p>Test LED strip separately:    <pre><code>// Upload FastLED \"Blink\" example\n// Should make all LEDs blink\n// If not \u2192 LED strip hardware issue\n</code></pre></p> </li> <li> <p>Verify DATA pin:</p> </li> <li>Connected to GPIO8?</li> <li>Check solder joint</li> <li>Test continuity</li> </ol> <p>Solutions:</p> Issue Fix No power to LEDs Connect LED VCC to power rail Wrong DATA pin Move wire to GPIO8 Damaged LED Replace LED strip (cheap!) Voltage too low LEDs may need 5V, add boost converter"},{"location":"TROUBLESHOOTING/#problem-leds-show-wrong-colors","title":"Problem: LEDs Show Wrong Colors","text":"<p>Symptoms: Colors off (red shows as green, etc.)</p> <p>Cause: Wrong color order in firmware</p> <p>Solution:</p> <pre><code>// In led_controller.h, try different orders:\n#define COLOR_ORDER GRB  // Default\n// OR\n#define COLOR_ORDER RGB\n// OR\n#define COLOR_ORDER BGR\n\n// Re-compile and test which looks correct\n</code></pre>"},{"location":"TROUBLESHOOTING/#problem-energy-meter-not-updating","title":"Problem: Energy Meter Not Updating","text":"<p>Symptoms: Shows same LEDs even after hours pass</p> <p>Cause: Update interval too long or time not syncing</p> <p>Diagnostic: <pre><code># Serial monitor:\n[DEBUG] Energy meter update: 6/8 hours remaining\n# Should update every 5 minutes\n</code></pre></p> <p>Solutions:</p> <ol> <li> <p>Force update (in config.h):    <pre><code>#define ENERGY_UPDATE_INTERVAL_MS  60000  // 1 minute instead of 5\n</code></pre></p> </li> <li> <p>Check time sync:</p> </li> <li>Device uses <code>millis()</code> for relative time</li> <li> <p>May drift slightly (not a problem for hourly tracking)</p> </li> <li> <p>Manual test:    <pre><code>// In loop(), add:\nif (Serial.available()) {\n  char cmd = Serial.read();\n  if (cmd == 'u') {\n    updateEnergyMeter();\n    Serial.println(\"Force updated energy meter\");\n  }\n}\n</code></pre></p> </li> </ol>"},{"location":"TROUBLESHOOTING/#problem-leds-too-brightdim","title":"Problem: LEDs Too Bright/Dim","text":"<p>Solution:</p> <pre><code>// In config.h:\n#define LED_BRIGHTNESS  255  // 0-255\n\n// For night-friendly:\n#define LED_BRIGHTNESS  32   // Very dim\n\n// For bright office:\n#define LED_BRIGHTNESS  200  // Quite bright\n</code></pre>"},{"location":"TROUBLESHOOTING/#section-5-firmware-issues","title":"Section 5: Firmware Issues","text":""},{"location":"TROUBLESHOOTING/#problem-device-boots-into-crash-loop","title":"Problem: Device Boots Into Crash Loop","text":"<p>Symptoms: Rapid rebooting, serial shows crash</p> <p>Serial output: <pre><code>Guru Meditation Error: Core 0 panic'ed (LoadProhibited)\n...\nBacktrace: 0x400... 0x400...\n</code></pre></p> <p>Causes: - Memory corruption - Null pointer access - Stack overflow - Incompatible library versions</p> <p>Solutions:</p> <ol> <li> <p>Erase flash completely:    <pre><code>esptool.py --port /dev/cu.usbserial-110 erase_flash\n</code></pre></p> </li> <li> <p>Re-upload firmware:    <pre><code>pio run --target upload\n</code></pre></p> </li> <li> <p>Check library versions:    <pre><code># In platformio.ini, use specific versions:\nlib_deps = \n    fastled/FastLED@3.6.0\n    tzapu/WiFiManager@2.0.16-rc.2\n</code></pre></p> </li> <li> <p>Enable debug:    <pre><code>// In config.h:\n#define LOG_LEVEL LOG_LEVEL_DEBUG\n</code></pre></p> </li> </ol>"},{"location":"TROUBLESHOOTING/#problem-brownout-detector-was-triggered","title":"Problem: \"Brownout Detector Was Triggered\"","text":"<p>Symptoms: Device resets with this error</p> <p>Cause: Voltage drops below threshold (usually during WiFi transmission)</p> <p>Solutions:</p> <ol> <li>Add capacitance:</li> <li>100\u00b5F electrolytic near ESP32 power pins</li> <li> <p>10\u00b5F ceramic close to chip</p> </li> <li> <p>Better power supply:</p> </li> <li>Use 5V 2A USB adapter (not computer USB)</li> <li> <p>Thicker power wires (reduce resistance)</p> </li> <li> <p>Reduce power consumption:    <pre><code>// Reduce WiFi power:\nWiFi.setTxPower(WIFI_POWER_15dBm);\n\n// Reduce LED brightness:\n#define LED_BRIGHTNESS  64\n</code></pre></p> </li> <li> <p>Disable brownout detector (NOT RECOMMENDED):    <pre><code>// In setup():\nWRITE_PERI_REG(RTC_CNTL_BROWN_OUT_REG, 0);\n// Only use if you can't fix power issue\n</code></pre></p> </li> </ol>"},{"location":"TROUBLESHOOTING/#problem-ota-update-fails","title":"Problem: OTA Update Fails","text":"<p>Symptoms: Can't update firmware wirelessly</p> <p>Solutions:</p> <ol> <li> <p>Check mDNS working:    <pre><code># Ping device hostname\nping wall-clock-in.local\n\n# If fails, use IP instead:\npio run --target upload --upload-port 192.168.1.42\n</code></pre></p> </li> <li> <p>Firewall blocking:</p> </li> <li>Allow port 3232 (Arduino OTA)</li> <li> <p>Temporarily disable firewall to test</p> </li> <li> <p>Not enough space:</p> </li> <li>OTA needs ~2x firmware size free</li> <li> <p>Use smaller partition scheme</p> </li> <li> <p>Fall back to USB:    <pre><code># Just use USB if OTA won't work\npio run --target upload\n</code></pre></p> </li> </ol>"},{"location":"TROUBLESHOOTING/#problem-preferences-not-saving","title":"Problem: Preferences Not Saving","text":"<p>Symptoms: Settings reset after reboot</p> <p>Cause: Preferences API not working or flash corruption</p> <p>Solutions:</p> <ol> <li> <p>Check namespace:    <pre><code>// Must call begin() before use:\nprefs.begin(PREF_NAMESPACE, false);\n</code></pre></p> </li> <li> <p>Verify writes:    <pre><code>prefs.putString(\"key\", \"value\");\nbool saved = prefs.getBool(\"key\", \"\");\nSerial.printf(\"Saved: %s\\n\", saved.c_str());\n</code></pre></p> </li> <li> <p>Clear preferences:    <pre><code>prefs.clear();  // Erase all keys\nprefs.end();\nESP.restart();\n</code></pre></p> </li> <li> <p>Flash wear:</p> </li> <li>Flash has limited write cycles (~100,000)</li> <li>Don't save on every loop iteration!</li> </ol>"},{"location":"TROUBLESHOOTING/#section-6-battery-issues","title":"Section 6: Battery Issues","text":""},{"location":"TROUBLESHOOTING/#problem-battery-drains-quickly","title":"Problem: Battery Drains Quickly","text":"<p>Expected: 10-14 days per charge Getting: &lt; 5 days</p> <p>Causes:</p> <ol> <li>LEDs too bright:</li> <li> <p>Solution: Reduce brightness to 64</p> </li> <li> <p>Deep sleep not working:    <pre><code># Serial monitor should show:\n[INFO] Entering deep sleep...\n# When clocked out\n</code></pre></p> </li> <li> <p>WiFi staying active:</p> </li> <li> <p>Check if WiFi disconnects properly</p> </li> <li> <p>Old battery:</p> </li> <li>After 300-500 cycles, capacity degrades</li> <li>Solution: Replace battery</li> </ol> <p>Measuring current draw: <pre><code># Use USB power meter:\n# Idle (clocked out, sleeping): &lt; 0.01A (10mA)\n# Active (WiFi, LEDs): 0.10-0.15A (100-150mA)\n# If higher \u2192 Find power drain\n</code></pre></p>"},{"location":"TROUBLESHOOTING/#problem-battery-wont-charge","title":"Problem: Battery Won't Charge","text":"<p>Symptoms: Plug in USB, no TP4056 LED</p> <p>Solutions:</p> <ol> <li>Check USB cable:</li> <li>Try different cable (some are charge-only)</li> <li> <p>Check port (USB 2.0/3.0 should both work)</p> </li> <li> <p>Check TP4056 connections:</p> </li> <li>USB VCC/GND connected?</li> <li> <p>BAT+/BAT- connected to battery?</p> </li> <li> <p>Battery over-discharged:</p> </li> <li>If &lt; 2.0V, protection circuit may have triggered</li> <li> <p>Try \"wake-up\" charge with adjustable power supply (3.7V, 100mA)</p> </li> <li> <p>Replace TP4056:</p> </li> <li>Module may be damaged</li> <li>Cost: $1, easy to replace</li> </ol>"},{"location":"TROUBLESHOOTING/#problem-battery-swelling","title":"Problem: Battery Swelling","text":"<p>\u26a0\ufe0f DANGER! Swollen LiPo batteries can catch fire!</p> <p>What to do:</p> <ol> <li>Immediately disconnect battery</li> <li>Do NOT puncture</li> <li>Place in fireproof container (metal ammo box)</li> <li>Dispose at electronics recycling center</li> <li>Buy new battery</li> </ol> <p>Prevention: - Don't over-charge (4.2V max) - Don't over-discharge (3.0V min) - Don't expose to heat - Use TP4056 protection circuit (always!)</p>"},{"location":"TROUBLESHOOTING/#section-7-general-troubleshooting","title":"Section 7: General Troubleshooting","text":""},{"location":"TROUBLESHOOTING/#problem-everything-worked-yesterday-not-today","title":"Problem: Everything Worked Yesterday, Not Today","text":"<p>Check:</p> <ol> <li>Did WiFi password change?</li> <li> <p>Reset device config and re-enter</p> </li> <li> <p>Did API token expire?</p> </li> <li>Many APIs have token expiration</li> <li> <p>Generate new token and update</p> </li> <li> <p>Is API server down?</p> </li> <li>Test with curl from computer</li> <li> <p>Check server logs</p> </li> <li> <p>Did battery die?</p> </li> <li> <p>Plug in USB, wait 10 minutes, try again</p> </li> <li> <p>Firmware corrupted?</p> </li> <li>Re-flash firmware via USB</li> </ol>"},{"location":"TROUBLESHOOTING/#getting-more-help","title":"Getting More Help","text":"<p>Gather this info before asking for help:</p> <ol> <li> <p>Firmware version:    <pre><code># Serial monitor first line:\nWall Clock In Machine v1.0.0\n</code></pre></p> </li> <li> <p>Error logs:    <pre><code># Copy full serial output showing error\n</code></pre></p> </li> <li> <p>What you tried:</p> </li> <li> <p>List troubleshooting steps already attempted</p> </li> <li> <p>Hardware setup:</p> </li> <li>Photo of device internals (if applicable)</li> <li>Wiring diagram</li> </ol> <p>Where to ask: - GitHub Issues: github.com/yourusername/wallClockInMachine/issues - Reddit: r/esp32, r/arduino - Arduino Forum - Discord: ESP32 community servers</p>"},{"location":"TROUBLESHOOTING/#preventive-maintenance","title":"Preventive Maintenance","text":"<p>To avoid issues:</p> <p>\u2705 Charge battery before fully depleted \u2705 Keep firmware updated \u2705 Monitor serial logs periodically \u2705 Test API separately from device \u2705 Use quality components (don't cheap out on battery!) \u2705 Keep backups of configuration \u2705 Protect device from water, heat, drops  </p>"},{"location":"TROUBLESHOOTING/#emergency-recovery","title":"Emergency Recovery","text":""},{"location":"TROUBLESHOOTING/#complete-factory-reset","title":"Complete Factory Reset","text":"<p>When all else fails:</p> <pre><code># 1. Erase flash completely\nesptool.py --port /dev/cu.usbserial-110 erase_flash\n\n# 2. Re-upload bootloader (if needed)\nesptool.py --port /dev/cu.usbserial-110 write_flash 0x1000 bootloader.bin\n\n# 3. Upload firmware\npio run --target upload\n\n# 4. Reconfigure from scratch\n# Hold button for 5 seconds \u2192 Config mode\n</code></pre>"},{"location":"TROUBLESHOOTING/#hardware-reset","title":"Hardware Reset","text":"<ol> <li>Disconnect battery</li> <li>Disconnect USB</li> <li>Wait 30 seconds (capacitors fully discharge)</li> <li>Press and hold RESET button</li> <li>Reconnect power while holding RESET</li> <li>Release after 5 seconds</li> </ol>"},{"location":"TROUBLESHOOTING/#reverting-to-known-good-firmware","title":"Reverting to Known-Good Firmware","text":"<pre><code># Download previous release from GitHub\n# Flash specific version:\npio run --target upload --environment esp32-c3-devkitm-1@v0.9.0\n</code></pre> <p>Still stuck? Open an issue with full details! We're here to help. \ud83d\ude80</p>"},{"location":"USAGE_GUIDE/","title":"Usage Guide","text":"<p>Daily operation of your Wall Clock In Machine</p>"},{"location":"USAGE_GUIDE/#quick-start","title":"Quick Start","text":""},{"location":"USAGE_GUIDE/#your-first-day","title":"Your First Day","text":"<p>Morning - Arriving at Office: 1. Toggle button down (or to ON position) 2. Status LED turns green \u2705 3. Energy meter shows 7 LEDs lit (8 hours remaining) 4. That's it! You're clocked in.</p> <p>Evening - Leaving Office: 1. Toggle button up (or to OFF position) 2. Status LED turns red \ud83d\udd34 3. Energy meter turns off 4. If you worked 8+ hours: \ud83c\udf89 Rainbow celebration!</p> <p>That's literally it. 2 seconds, twice a day.</p>"},{"location":"USAGE_GUIDE/#led-indicator-reference","title":"LED Indicator Reference","text":""},{"location":"USAGE_GUIDE/#status-led-first-led","title":"Status LED (First LED)","text":"Color Meaning What to Do \ud83d\udd34 Red (solid) Clocked out, idle Press button to clock in \ud83d\udfe2 Green (solid) Clocked in, working Press button to clock out \ud83d\udd35 Blue (pulsing) Connecting to WiFi or API Wait 5-10 seconds \ud83d\udfe1 Yellow (blinking) API error, can't communicate Check WiFi, see troubleshooting \ud83d\udfe3 Purple (breathing) Charging battery Leave plugged in \u26aa White (slow blink) Configuration mode Connect to WiFi hotspot to configure"},{"location":"USAGE_GUIDE/#energy-meter-next-7-leds","title":"Energy Meter (Next 7 LEDs)","text":"<p>Shows remaining work hours when clocked in:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 8-7 hours left:  \ud83d\udfe2\ud83d\udfe2\ud83d\udfe2\ud83d\udfe2\ud83d\udfe2\ud83d\udfe2\ud83d\udfe2        \u2502  Full energy!\n\u2502 6-5 hours left:  \ud83d\udfe2\ud83d\udfe2\ud83d\udfe2\ud83d\udfe2\ud83d\udfe2            \u2502  Cruising along\n\u2502 4-3 hours left:  \ud83d\udfe1\ud83d\udfe1\ud83d\udfe1\ud83d\udfe1              \u2502  Halfway there\n\u2502 2-1 hours left:  \ud83d\udd34\ud83d\udd34                  \u2502  Almost done!\n\u2502 0 hours left:    \ud83c\udf08 RAINBOW! \ud83c\udf08        \u2502  You did it! \ud83c\udf89\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Updates every 5 minutes while working.</p>"},{"location":"USAGE_GUIDE/#typical-usage-patterns","title":"Typical Usage Patterns","text":""},{"location":"USAGE_GUIDE/#standard-office-day-8-hours","title":"Standard Office Day (8 hours)","text":"<pre><code>08:00 AM  \u2192  Arrive at office, toggle button ON\n              Status: Green, Energy: 7 LEDs\n\n12:00 PM  \u2192  Lunch break (leave button ON)\n              Status: Green, Energy: 4 LEDs\n\n05:00 PM  \u2192  Leave office, toggle button OFF\n              Status: Rainbow then Red, Energy: Off\n</code></pre> <p>Note: Device keeps running during lunch. If you want to pause: - Toggle OFF for lunch - Toggle ON when returning - Device tracks multiple sessions</p>"},{"location":"USAGE_GUIDE/#split-day-morning-afternoon","title":"Split Day (Morning + Afternoon)","text":"<pre><code>08:00 AM  \u2192  Clock in (morning shift)\n12:00 PM  \u2192  Clock out (lunch break)\n01:00 PM  \u2192  Clock in (afternoon shift)  \n05:00 PM  \u2192  Clock out (end of day)\n</code></pre> <p>Each button press creates a separate time entry in your API.</p>"},{"location":"USAGE_GUIDE/#work-from-home-day","title":"Work From Home Day","text":"<pre><code>09:00 AM  \u2192  Clock in from home office\n05:30 PM  \u2192  Clock out\n\n(Battery lasts weeks without charging)\n</code></pre>"},{"location":"USAGE_GUIDE/#remotemixed-work","title":"Remote/Mixed Work","text":"<p>Device works anywhere with your WiFi or mobile hotspot!</p>"},{"location":"USAGE_GUIDE/#advanced-features","title":"Advanced Features","text":""},{"location":"USAGE_GUIDE/#long-press-functions","title":"Long Press Functions","text":"<p>Hold button for 5 seconds: - Enters configuration mode (white LED) - Creates WiFi hotspot: \"WallClockIn-Setup\" - Use to change WiFi or API settings</p> <p>During boot, hold button: - Skips WiFi connection - Goes straight to config mode - Useful when WiFi not available</p>"},{"location":"USAGE_GUIDE/#battery-management","title":"Battery Management","text":"<p>Charging: - Plug in USB-C cable anytime - Purple LED indicates charging - Blue LED when fully charged - Can use while charging</p> <p>Battery Life: - Normal use: 10-14 days per charge - Heavy use: 7-10 days - Standby (not used): 30+ days</p> <p>Low Battery Warning: - Yellow LED blinks when &lt;10% - Plug in soon!</p> <p>Checking Battery Level: <pre><code># Via serial monitor\npio device monitor\n\n# Look for:\n[INFO] Battery: 87% (3.92V)\n</code></pre></p>"},{"location":"USAGE_GUIDE/#power-saving","title":"Power Saving","text":"<p>When clocked out: - Device enters deep sleep (5\u00b5A) - Wakes instantly on button press - Saves battery dramatically</p> <p>When clocked in: - Stays awake to update energy meter - Goes to light sleep between updates - Uses ~15mA average</p>"},{"location":"USAGE_GUIDE/#offline-operation","title":"Offline Operation","text":"<p>If WiFi unavailable: 1. Device stores state locally 2. Yellow LED indicates no connection 3. When WiFi returns, syncs automatically 4. Your time is not lost!</p> <p>If API unavailable: - Same behavior as WiFi offline - Stores timestamps locally - Retries API calls periodically</p>"},{"location":"USAGE_GUIDE/#daily-routine-tips","title":"Daily Routine Tips","text":""},{"location":"USAGE_GUIDE/#morning-checklist","title":"Morning Checklist","text":"<p>\u2705 Arrive at desk \u2705 Put down bag/coat \u2705 Toggle button ON \u2190 2 seconds \u2705 Boot computer \u2705 Make coffee  </p> <p>Total extra time: 2 seconds (vs 15 seconds typing curl command!)</p>"},{"location":"USAGE_GUIDE/#evening-checklist","title":"Evening Checklist","text":"<p>\u2705 Finish last task \u2705 Close applications \u2705 Toggle button OFF \u2190 2 seconds \u2705 Grab belongings \u2705 Head home  </p>"},{"location":"USAGE_GUIDE/#forgetting-to-clock-out","title":"Forgetting to Clock Out?","text":"<p>No problem! Options:</p> <p>Option 1: Manual correction via API <pre><code># Update end time via API\ncurl -X PATCH https://api.example.com/api/beats/12345 \\\n  -d '{\"stopped_at\": \"2025-10-29T17:00:00Z\"}'\n</code></pre></p> <p>Option 2: Clock out remotely via web interface (if your API has one)</p> <p>Option 3: Just clock out next morning and note the time</p>"},{"location":"USAGE_GUIDE/#forgetting-to-clock-in","title":"Forgetting to Clock In?","text":"<p>Option 1: Clock in late, note actual arrival time, correct via API</p> <p>Option 2: Create manual entry via API: <pre><code>curl -X POST https://api.example.com/api/timer/start \\\n  -d '{\"project_id\": \"office-time\", \"started_at\": \"2025-10-29T08:00:00Z\"}'\n</code></pre></p>"},{"location":"USAGE_GUIDE/#maintenance","title":"Maintenance","text":""},{"location":"USAGE_GUIDE/#weekly","title":"Weekly","text":"<ul> <li>Wipe LED window with microfiber cloth (if dusty)</li> <li>Charge overnight if needed</li> </ul>"},{"location":"USAGE_GUIDE/#monthly","title":"Monthly","text":"<ul> <li>Check toggle switch tightness</li> <li>Clean USB-C port if dirty (compressed air)</li> <li>Review battery runtime</li> </ul>"},{"location":"USAGE_GUIDE/#every-6-months","title":"Every 6 Months","text":"<ul> <li>Update firmware to latest version</li> <li>Check for loose screws in enclosure</li> <li>Verify API credentials still valid</li> </ul>"},{"location":"USAGE_GUIDE/#annually","title":"Annually","text":"<ul> <li>Consider battery replacement if runtime &lt;5 days</li> <li>Check all solder joints for cracks</li> <li>Update WiFi credentials if changed</li> </ul>"},{"location":"USAGE_GUIDE/#troubleshooting-during-use","title":"Troubleshooting During Use","text":""},{"location":"USAGE_GUIDE/#button-press-not-responding","title":"Button Press Not Responding","text":"<p>Symptoms: Press button, nothing happens</p> <p>Quick Checks: 1. Is device powered on? (any LED lit?) 2. Is it in config mode? (white LED = exit config mode first) 3. Try pressing firmly 4. Check serial monitor for errors</p> <p>Solutions: - Power cycle device - Check battery level - Verify firmware running (connect to serial)</p>"},{"location":"USAGE_GUIDE/#leds-not-lighting-up","title":"LEDs Not Lighting Up","text":"<p>Symptoms: Status LED works, but energy meter doesn't</p> <p>Possible Causes: - Not clocked in yet (only shows when working) - LEDs disabled in settings - Hardware issue</p> <p>Solutions: - Clock in and wait 5 minutes - Check LED brightness setting (may be set to 0) - Test LEDs via serial commands</p>"},{"location":"USAGE_GUIDE/#wifi-keeps-disconnecting","title":"WiFi Keeps Disconnecting","text":"<p>Symptoms: Blue LED pulses frequently, connection drops</p> <p>Causes: - Weak signal - Router issues - Power saving too aggressive</p> <p>Solutions: 1. Move device closer to router or use extender 2. Reserved IP address for device in router 3. Disable WiFi power saving in router 4. Update firmware with fixes</p>"},{"location":"USAGE_GUIDE/#api-calls-failing","title":"API Calls Failing","text":"<p>Symptoms: Yellow LED after button press</p> <p>Check: 1. Is API server running? 2. Token still valid? 3. Network connectivity OK? 4. Serial monitor shows specific error</p> <p>Solutions: - Test API with curl command - Verify token hasn't expired - Check firewall rules - Review API logs</p>"},{"location":"USAGE_GUIDE/#best-practices","title":"Best Practices","text":""},{"location":"USAGE_GUIDE/#do","title":"DO:","text":"<p>\u2705 Charge device weekly (or when LED indicates low battery) \u2705 Keep device on desk in consistent location \u2705 Press button immediately when arriving/leaving \u2705 Clean LED window monthly \u2705 Update firmware when available \u2705 Keep API token secure  </p>"},{"location":"USAGE_GUIDE/#dont","title":"DON'T:","text":"<p>\u274c Leave device in hot car (battery damage) \u274c Submerge in water (not waterproof!) \u274c Drop from height (electronics are fragile) \u274c Pull USB cable at an angle (damages port) \u274c Forget to charge for months (deep discharge damages battery) \u274c Share API credentials  </p>"},{"location":"USAGE_GUIDE/#integrations-workflows","title":"Integrations &amp; Workflows","text":""},{"location":"USAGE_GUIDE/#with-your-timer-api","title":"With Your Timer API","text":"<p>The device integrates seamlessly with your existing timer backend:</p> <p>Your API can: - Generate reports from device data - Calculate work hours automatically - Send notifications (email when you forgot to clock out) - Integrate with payroll systems - Track productivity trends</p> <p>Example Workflow: <pre><code>Device \u2192 API \u2192 Database \u2192 Analytics Dashboard\n                        \u2192 Payroll System\n                        \u2192 Email Reports\n</code></pre></p>"},{"location":"USAGE_GUIDE/#with-other-tools-via-api","title":"With Other Tools (via API)","text":"<p>Zapier/IFTTT: - Clock in \u2192 Start focus music on Spotify - Clock out \u2192 Send summary to Slack - Battery low \u2192 SMS notification</p> <p>Home Automation: - Clock in \u2192 Turn on desk lamp (IFTTT + smart plug) - Clock out \u2192 Lock office door (smart lock API)</p> <p>Calendar Integration: - Sync clock in/out times to Google Calendar - Block focus time based on work hours</p>"},{"location":"USAGE_GUIDE/#tips-tricks","title":"Tips &amp; Tricks","text":""},{"location":"USAGE_GUIDE/#placement-optimization","title":"Placement Optimization","text":"<p>Best locations: - Corner of desk (easy to reach) - Near keyboard (within arm's length) - Away from coffee cup (avoid spills!) - Not blocking monitor</p>"},{"location":"USAGE_GUIDE/#energy-meter-as-motivator","title":"Energy Meter as Motivator","text":"<ul> <li>Green LEDs = plenty of time, relax</li> <li>Yellow LEDs = focus mode activated</li> <li>Red LEDs = almost done, push through!</li> <li>Rainbow = celebrate! \ud83c\udf89</li> </ul>"},{"location":"USAGE_GUIDE/#battery-life-maximization","title":"Battery Life Maximization","text":"<p>To extend battery life: 1. Reduce LED brightness (in config) 2. Enable deep sleep (default) 3. Charge to 80% instead of 100% (longer battery lifespan) 4. Store at 50% charge if not using for weeks</p>"},{"location":"USAGE_GUIDE/#custom-hacks","title":"Custom Hacks","text":"<p>Ideas from the community: - Add second button for \"break\" mode - Connect buzzer for audio feedback - Add OLED display showing time remaining - 3D print custom enclosure designs - Program custom LED animations</p> <p>Share your hacks on GitHub!</p>"},{"location":"USAGE_GUIDE/#faq","title":"FAQ","text":"<p>Q: Can I use this for multiple jobs/projects? A: Currently tracks one project. Modify <code>PROJECT_ID</code> in firmware for different projects, or add project selection feature.</p> <p>Q: Does it work without internet? A: Needs WiFi for API calls. Stores state locally if connection lost, syncs when reconnected.</p> <p>Q: Can multiple people use devices with same API? A: Yes! Each device sends its own timer entries. Make sure each has unique identifier in API.</p> <p>Q: What if I work &gt;8 hours? A: Energy meter goes to 0, but device keeps tracking. Change <code>WORK_HOURS</code> in config for different default.</p> <p>Q: Can I check my time from phone? A: Device doesn't have app, but you can check via your API's web interface or mobile app.</p> <p>Q: Is my data secure? A: Device uses HTTPS for API calls. Data security depends on your API backend implementation.</p> <p>Q: Can I turn off LED animations? A: Currently no, but you can reduce brightness to minimum. Feature request welcome!</p>"},{"location":"USAGE_GUIDE/#getting-help","title":"Getting Help","text":"<p>Issue with device? 1. Check Troubleshooting Guide 2. Review serial monitor logs 3. Test API separately with curl 4. Open GitHub issue with logs</p> <p>Feature request? - Open GitHub issue with \"enhancement\" label - Describe use case - Vote on existing requests</p> <p>Bug found? - Open GitHub issue with \"bug\" label - Include firmware version - Attach serial logs - Describe steps to reproduce</p>"},{"location":"USAGE_GUIDE/#enjoy-your-device","title":"Enjoy Your Device! \ud83c\udf89","text":"<p>You've saved yourself from typing curl commands forever!</p> <p>Time saved per year: ~2.6 hours Satisfaction: Priceless \ud83d\ude0a</p> <p>Share your experience: - Tweet @yourusername with #WallClockInMachine - Post photo on r/arduino or r/homeautomation - Write blog post about your build - Contribute improvements via GitHub PR</p> <p>Happy tracking! \ud83d\udcca\u2728</p>"}]}